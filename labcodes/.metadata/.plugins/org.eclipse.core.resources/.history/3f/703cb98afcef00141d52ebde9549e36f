
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 d0 12 00 	lgdtl  0x12d018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 d0 12 c0       	mov    $0xc012d000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 78 1f 1b c0       	mov    $0xc01b1f78,%edx
c0100035:	b8 d4 ed 1a c0       	mov    $0xc01aedd4,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d4 ed 1a c0 	movl   $0xc01aedd4,(%esp)
c0100051:	e8 26 c4 00 00       	call   c010c47c <memset>

    cons_init();                // init the console
c0100056:	e8 91 16 00 00       	call   c01016ec <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 20 c6 10 c0 	movl   $0xc010c620,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 3c c6 10 c0 	movl   $0xc010c63c,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 ab 56 00 00       	call   c010572f <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 41 20 00 00       	call   c01020ca <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 b9 21 00 00       	call   c0102247 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 77 85 00 00       	call   c010860a <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 46 b2 00 00       	call   c010b2de <sched_init>
    proc_init();                // init process table
c0100098:	e8 b9 ab 00 00       	call   c010ac56 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 7b 17 00 00       	call   c010181d <ide_init>
    swap_init();                // init swap
c01000a2:	e8 49 6d 00 00       	call   c0106df0 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 f6 0d 00 00       	call   c0100ea2 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 87 1f 00 00       	call   c0102038 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 5f ad 00 00       	call   c010ae15 <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 fc 0c 00 00       	call   c0100dd4 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 41 c6 10 c0 	movl   $0xc010c641,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 4f c6 10 c0 	movl   $0xc010c64f,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 5d c6 10 c0 	movl   $0xc010c65d,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 6b c6 10 c0 	movl   $0xc010c66b,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 79 c6 10 c0 	movl   $0xc010c679,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 e0 ed 1a c0       	mov    %eax,0xc01aede0
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 88 c6 10 c0 	movl   $0xc010c688,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 a8 c6 10 c0 	movl   $0xc010c6a8,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 c7 c6 10 c0 	movl   $0xc010c6c7,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 00 ee 1a c0    	mov    %dl,-0x3fe51200(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 00 ee 1a c0       	add    $0xc01aee00,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 00 ee 1a c0       	mov    $0xc01aee00,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 02 14 00 00       	call   c0101718 <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 6a b8 00 00       	call   c010bbbd <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 89 13 00 00       	call   c0101718 <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 69 13 00 00       	call   c0101754 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 cc c6 10 c0    	movl   $0xc010c6cc,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 cc c6 10 c0 	movl   $0xc010c6cc,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 00 ee 10 c0 	movl   $0xc010ee00,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 50 42 12 c0 	movl   $0xc0124250,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec 51 42 12 c0 	movl   $0xc0124251,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 1f a7 12 c0 	movl   $0xc012a71f,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 fa 88 00 00       	call   c0108f00 <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 a3 88 00 00       	call   c0108f00 <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 6b 88 00 00       	call   c0108f00 <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 f0 ba 00 00       	call   c010c2f0 <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 d6 c6 10 c0 	movl   $0xc010c6d6,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 ef c6 10 c0 	movl   $0xc010c6ef,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 05 c6 10 	movl   $0xc010c605,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 07 c7 10 c0 	movl   $0xc010c707,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 d4 ed 1a 	movl   $0xc01aedd4,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 1f c7 10 c0 	movl   $0xc010c71f,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 78 1f 1b 	movl   $0xc01b1f78,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 37 c7 10 c0 	movl   $0xc010c737,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 78 1f 1b c0       	mov    $0xc01b1f78,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 50 c7 10 c0 	movl   $0xc010c750,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 7a c7 10 c0 	movl   $0xc010c77a,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 96 c7 10 c0 	movl   $0xc010c796,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i = 0, j;
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    while(i < STACKFRAME_DEPTH && ebp != 0)
c0100aee:	e9 94 00 00 00       	jmp    c0100b87 <print_stackframe+0xb9>
   {
        cprintf("ebp:0x%08x eip:0x%08x", ebp, eip);
c0100af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b01:	c7 04 24 a8 c7 10 c0 	movl   $0xc010c7a8,(%esp)
c0100b08:	e8 4b f8 ff ff       	call   c0100358 <cprintf>
	cprintf("args:");
c0100b0d:	c7 04 24 be c7 10 c0 	movl   $0xc010c7be,(%esp)
c0100b14:	e8 3f f8 ff ff       	call   c0100358 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b1c:	83 c0 08             	add    $0x8,%eax
c0100b1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++)
c0100b22:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b29:	eb 25                	jmp    c0100b50 <print_stackframe+0x82>
            cprintf("0x%08x ", args[j]);
c0100b2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100b38:	01 d0                	add    %edx,%eax
c0100b3a:	8b 00                	mov    (%eax),%eax
c0100b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b40:	c7 04 24 c4 c7 10 c0 	movl   $0xc010c7c4,(%esp)
c0100b47:	e8 0c f8 ff ff       	call   c0100358 <cprintf>
    while(i < STACKFRAME_DEPTH && ebp != 0)
   {
        cprintf("ebp:0x%08x eip:0x%08x", ebp, eip);
	cprintf("args:");
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++)
c0100b4c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b50:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b54:	7e d5                	jle    c0100b2b <print_stackframe+0x5d>
            cprintf("0x%08x ", args[j]);
        cprintf("\n");
c0100b56:	c7 04 24 cc c7 10 c0 	movl   $0xc010c7cc,(%esp)
c0100b5d:	e8 f6 f7 ff ff       	call   c0100358 <cprintf>
        print_debuginfo(eip - 1);
c0100b62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b65:	83 e8 01             	sub    $0x1,%eax
c0100b68:	89 04 24             	mov    %eax,(%esp)
c0100b6b:	e8 aa fe ff ff       	call   c0100a1a <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b73:	83 c0 04             	add    $0x4,%eax
c0100b76:	8b 00                	mov    (%eax),%eax
c0100b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100b7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b7e:	8b 00                	mov    (%eax),%eax
c0100b80:	89 45 f4             	mov    %eax,-0xc(%ebp)
	i ++;
c0100b83:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
      */
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();

    int i = 0, j;
    while(i < STACKFRAME_DEPTH && ebp != 0)
c0100b87:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b8b:	7f 0a                	jg     c0100b97 <print_stackframe+0xc9>
c0100b8d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b91:	0f 85 5c ff ff ff    	jne    c0100af3 <print_stackframe+0x25>
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
	i ++;
    }
}
c0100b97:	c9                   	leave  
c0100b98:	c3                   	ret    

c0100b99 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b99:	55                   	push   %ebp
c0100b9a:	89 e5                	mov    %esp,%ebp
c0100b9c:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba6:	eb 0c                	jmp    c0100bb4 <parse+0x1b>
            *buf ++ = '\0';
c0100ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bab:	8d 50 01             	lea    0x1(%eax),%edx
c0100bae:	89 55 08             	mov    %edx,0x8(%ebp)
c0100bb1:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb7:	0f b6 00             	movzbl (%eax),%eax
c0100bba:	84 c0                	test   %al,%al
c0100bbc:	74 1d                	je     c0100bdb <parse+0x42>
c0100bbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bc1:	0f b6 00             	movzbl (%eax),%eax
c0100bc4:	0f be c0             	movsbl %al,%eax
c0100bc7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bcb:	c7 04 24 50 c8 10 c0 	movl   $0xc010c850,(%esp)
c0100bd2:	e8 e6 b6 00 00       	call   c010c2bd <strchr>
c0100bd7:	85 c0                	test   %eax,%eax
c0100bd9:	75 cd                	jne    c0100ba8 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bde:	0f b6 00             	movzbl (%eax),%eax
c0100be1:	84 c0                	test   %al,%al
c0100be3:	75 02                	jne    c0100be7 <parse+0x4e>
            break;
c0100be5:	eb 67                	jmp    c0100c4e <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100be7:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100beb:	75 14                	jne    c0100c01 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bed:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100bf4:	00 
c0100bf5:	c7 04 24 55 c8 10 c0 	movl   $0xc010c855,(%esp)
c0100bfc:	e8 57 f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c04:	8d 50 01             	lea    0x1(%eax),%edx
c0100c07:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c0a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c14:	01 c2                	add    %eax,%edx
c0100c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c19:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c1b:	eb 04                	jmp    c0100c21 <parse+0x88>
            buf ++;
c0100c1d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c21:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c24:	0f b6 00             	movzbl (%eax),%eax
c0100c27:	84 c0                	test   %al,%al
c0100c29:	74 1d                	je     c0100c48 <parse+0xaf>
c0100c2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c2e:	0f b6 00             	movzbl (%eax),%eax
c0100c31:	0f be c0             	movsbl %al,%eax
c0100c34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c38:	c7 04 24 50 c8 10 c0 	movl   $0xc010c850,(%esp)
c0100c3f:	e8 79 b6 00 00       	call   c010c2bd <strchr>
c0100c44:	85 c0                	test   %eax,%eax
c0100c46:	74 d5                	je     c0100c1d <parse+0x84>
            buf ++;
        }
    }
c0100c48:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c49:	e9 66 ff ff ff       	jmp    c0100bb4 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c51:	c9                   	leave  
c0100c52:	c3                   	ret    

c0100c53 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c53:	55                   	push   %ebp
c0100c54:	89 e5                	mov    %esp,%ebp
c0100c56:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c59:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c63:	89 04 24             	mov    %eax,(%esp)
c0100c66:	e8 2e ff ff ff       	call   c0100b99 <parse>
c0100c6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c72:	75 0a                	jne    c0100c7e <runcmd+0x2b>
        return 0;
c0100c74:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c79:	e9 85 00 00 00       	jmp    c0100d03 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c85:	eb 5c                	jmp    c0100ce3 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c87:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c8a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c8d:	89 d0                	mov    %edx,%eax
c0100c8f:	01 c0                	add    %eax,%eax
c0100c91:	01 d0                	add    %edx,%eax
c0100c93:	c1 e0 02             	shl    $0x2,%eax
c0100c96:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100c9b:	8b 00                	mov    (%eax),%eax
c0100c9d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100ca1:	89 04 24             	mov    %eax,(%esp)
c0100ca4:	e8 75 b5 00 00       	call   c010c21e <strcmp>
c0100ca9:	85 c0                	test   %eax,%eax
c0100cab:	75 32                	jne    c0100cdf <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100cad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100cb0:	89 d0                	mov    %edx,%eax
c0100cb2:	01 c0                	add    %eax,%eax
c0100cb4:	01 d0                	add    %edx,%eax
c0100cb6:	c1 e0 02             	shl    $0x2,%eax
c0100cb9:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100cbe:	8b 40 08             	mov    0x8(%eax),%eax
c0100cc1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cc4:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cc7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cca:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cce:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cd1:	83 c2 04             	add    $0x4,%edx
c0100cd4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100cd8:	89 0c 24             	mov    %ecx,(%esp)
c0100cdb:	ff d0                	call   *%eax
c0100cdd:	eb 24                	jmp    c0100d03 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cdf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	83 f8 02             	cmp    $0x2,%eax
c0100ce9:	76 9c                	jbe    c0100c87 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100ceb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cf2:	c7 04 24 73 c8 10 c0 	movl   $0xc010c873,(%esp)
c0100cf9:	e8 5a f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100cfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d03:	c9                   	leave  
c0100d04:	c3                   	ret    

c0100d05 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d05:	55                   	push   %ebp
c0100d06:	89 e5                	mov    %esp,%ebp
c0100d08:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d0b:	c7 04 24 8c c8 10 c0 	movl   $0xc010c88c,(%esp)
c0100d12:	e8 41 f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d17:	c7 04 24 b4 c8 10 c0 	movl   $0xc010c8b4,(%esp)
c0100d1e:	e8 35 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d23:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d27:	74 0b                	je     c0100d34 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d2c:	89 04 24             	mov    %eax,(%esp)
c0100d2f:	e8 cd 16 00 00       	call   c0102401 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d34:	c7 04 24 d9 c8 10 c0 	movl   $0xc010c8d9,(%esp)
c0100d3b:	e8 0f f5 ff ff       	call   c010024f <readline>
c0100d40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d47:	74 18                	je     c0100d61 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d49:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d53:	89 04 24             	mov    %eax,(%esp)
c0100d56:	e8 f8 fe ff ff       	call   c0100c53 <runcmd>
c0100d5b:	85 c0                	test   %eax,%eax
c0100d5d:	79 02                	jns    c0100d61 <kmonitor+0x5c>
                break;
c0100d5f:	eb 02                	jmp    c0100d63 <kmonitor+0x5e>
            }
        }
    }
c0100d61:	eb d1                	jmp    c0100d34 <kmonitor+0x2f>
}
c0100d63:	c9                   	leave  
c0100d64:	c3                   	ret    

c0100d65 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d65:	55                   	push   %ebp
c0100d66:	89 e5                	mov    %esp,%ebp
c0100d68:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d72:	eb 3f                	jmp    c0100db3 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d74:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d77:	89 d0                	mov    %edx,%eax
c0100d79:	01 c0                	add    %eax,%eax
c0100d7b:	01 d0                	add    %edx,%eax
c0100d7d:	c1 e0 02             	shl    $0x2,%eax
c0100d80:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100d85:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d88:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d8b:	89 d0                	mov    %edx,%eax
c0100d8d:	01 c0                	add    %eax,%eax
c0100d8f:	01 d0                	add    %edx,%eax
c0100d91:	c1 e0 02             	shl    $0x2,%eax
c0100d94:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100d99:	8b 00                	mov    (%eax),%eax
c0100d9b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100da3:	c7 04 24 dd c8 10 c0 	movl   $0xc010c8dd,(%esp)
c0100daa:	e8 a9 f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100daf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100db6:	83 f8 02             	cmp    $0x2,%eax
c0100db9:	76 b9                	jbe    c0100d74 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100dbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc0:	c9                   	leave  
c0100dc1:	c3                   	ret    

c0100dc2 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100dc2:	55                   	push   %ebp
c0100dc3:	89 e5                	mov    %esp,%ebp
c0100dc5:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dc8:	e8 b7 fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd2:	c9                   	leave  
c0100dd3:	c3                   	ret    

c0100dd4 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dd4:	55                   	push   %ebp
c0100dd5:	89 e5                	mov    %esp,%ebp
c0100dd7:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dda:	e8 ef fc ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de4:	c9                   	leave  
c0100de5:	c3                   	ret    

c0100de6 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100de6:	55                   	push   %ebp
c0100de7:	89 e5                	mov    %esp,%ebp
c0100de9:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100dec:	a1 00 f2 1a c0       	mov    0xc01af200,%eax
c0100df1:	85 c0                	test   %eax,%eax
c0100df3:	74 02                	je     c0100df7 <__panic+0x11>
        goto panic_dead;
c0100df5:	eb 48                	jmp    c0100e3f <__panic+0x59>
    }
    is_panic = 1;
c0100df7:	c7 05 00 f2 1a c0 01 	movl   $0x1,0xc01af200
c0100dfe:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100e01:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e04:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100e07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e0a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e15:	c7 04 24 e6 c8 10 c0 	movl   $0xc010c8e6,(%esp)
c0100e1c:	e8 37 f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e28:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e2b:	89 04 24             	mov    %eax,(%esp)
c0100e2e:	e8 f2 f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e33:	c7 04 24 02 c9 10 c0 	movl   $0xc010c902,(%esp)
c0100e3a:	e8 19 f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e3f:	e8 fa 11 00 00       	call   c010203e <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e44:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e4b:	e8 b5 fe ff ff       	call   c0100d05 <kmonitor>
    }
c0100e50:	eb f2                	jmp    c0100e44 <__panic+0x5e>

c0100e52 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e52:	55                   	push   %ebp
c0100e53:	89 e5                	mov    %esp,%ebp
c0100e55:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e58:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e61:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e65:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e6c:	c7 04 24 04 c9 10 c0 	movl   $0xc010c904,(%esp)
c0100e73:	e8 e0 f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e7f:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e82:	89 04 24             	mov    %eax,(%esp)
c0100e85:	e8 9b f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e8a:	c7 04 24 02 c9 10 c0 	movl   $0xc010c902,(%esp)
c0100e91:	e8 c2 f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e96:	c9                   	leave  
c0100e97:	c3                   	ret    

c0100e98 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e98:	55                   	push   %ebp
c0100e99:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e9b:	a1 00 f2 1a c0       	mov    0xc01af200,%eax
}
c0100ea0:	5d                   	pop    %ebp
c0100ea1:	c3                   	ret    

c0100ea2 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100ea2:	55                   	push   %ebp
c0100ea3:	89 e5                	mov    %esp,%ebp
c0100ea5:	83 ec 28             	sub    $0x28,%esp
c0100ea8:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100eae:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100eb2:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100eb6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100eba:	ee                   	out    %al,(%dx)
c0100ebb:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100ec1:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100ec5:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ec9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ecd:	ee                   	out    %al,(%dx)
c0100ece:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ed4:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ed8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100edc:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ee0:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ee1:	c7 05 78 1e 1b c0 00 	movl   $0x0,0xc01b1e78
c0100ee8:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100eeb:	c7 04 24 22 c9 10 c0 	movl   $0xc010c922,(%esp)
c0100ef2:	e8 61 f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100ef7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100efe:	e8 99 11 00 00       	call   c010209c <pic_enable>
}
c0100f03:	c9                   	leave  
c0100f04:	c3                   	ret    

c0100f05 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100f05:	55                   	push   %ebp
c0100f06:	89 e5                	mov    %esp,%ebp
c0100f08:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100f0b:	9c                   	pushf  
c0100f0c:	58                   	pop    %eax
c0100f0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f13:	25 00 02 00 00       	and    $0x200,%eax
c0100f18:	85 c0                	test   %eax,%eax
c0100f1a:	74 0c                	je     c0100f28 <__intr_save+0x23>
        intr_disable();
c0100f1c:	e8 1d 11 00 00       	call   c010203e <intr_disable>
        return 1;
c0100f21:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f26:	eb 05                	jmp    c0100f2d <__intr_save+0x28>
    }
    return 0;
c0100f28:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f2d:	c9                   	leave  
c0100f2e:	c3                   	ret    

c0100f2f <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f2f:	55                   	push   %ebp
c0100f30:	89 e5                	mov    %esp,%ebp
c0100f32:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f39:	74 05                	je     c0100f40 <__intr_restore+0x11>
        intr_enable();
c0100f3b:	e8 f8 10 00 00       	call   c0102038 <intr_enable>
    }
}
c0100f40:	c9                   	leave  
c0100f41:	c3                   	ret    

c0100f42 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f42:	55                   	push   %ebp
c0100f43:	89 e5                	mov    %esp,%ebp
c0100f45:	83 ec 10             	sub    $0x10,%esp
c0100f48:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f4e:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f52:	89 c2                	mov    %eax,%edx
c0100f54:	ec                   	in     (%dx),%al
c0100f55:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f58:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f5e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f62:	89 c2                	mov    %eax,%edx
c0100f64:	ec                   	in     (%dx),%al
c0100f65:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f68:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f6e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f72:	89 c2                	mov    %eax,%edx
c0100f74:	ec                   	in     (%dx),%al
c0100f75:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f78:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f7e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f82:	89 c2                	mov    %eax,%edx
c0100f84:	ec                   	in     (%dx),%al
c0100f85:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f88:	c9                   	leave  
c0100f89:	c3                   	ret    

c0100f8a <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f8a:	55                   	push   %ebp
c0100f8b:	89 e5                	mov    %esp,%ebp
c0100f8d:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f90:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f97:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f9a:	0f b7 00             	movzwl (%eax),%eax
c0100f9d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100fa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fa4:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100fa9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fac:	0f b7 00             	movzwl (%eax),%eax
c0100faf:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fb3:	74 12                	je     c0100fc7 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fb5:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fbc:	66 c7 05 26 f2 1a c0 	movw   $0x3b4,0xc01af226
c0100fc3:	b4 03 
c0100fc5:	eb 13                	jmp    c0100fda <cga_init+0x50>
    } else {
        *cp = was;
c0100fc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fca:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fce:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fd1:	66 c7 05 26 f2 1a c0 	movw   $0x3d4,0xc01af226
c0100fd8:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fda:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0100fe1:	0f b7 c0             	movzwl %ax,%eax
c0100fe4:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fe8:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fec:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ff0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ff4:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100ff5:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0100ffc:	83 c0 01             	add    $0x1,%eax
c0100fff:	0f b7 c0             	movzwl %ax,%eax
c0101002:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101006:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010100a:	89 c2                	mov    %eax,%edx
c010100c:	ec                   	in     (%dx),%al
c010100d:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101010:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101014:	0f b6 c0             	movzbl %al,%eax
c0101017:	c1 e0 08             	shl    $0x8,%eax
c010101a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010101d:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0101024:	0f b7 c0             	movzwl %ax,%eax
c0101027:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010102b:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010102f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101033:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101037:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101038:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c010103f:	83 c0 01             	add    $0x1,%eax
c0101042:	0f b7 c0             	movzwl %ax,%eax
c0101045:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101049:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010104d:	89 c2                	mov    %eax,%edx
c010104f:	ec                   	in     (%dx),%al
c0101050:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101053:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101057:	0f b6 c0             	movzbl %al,%eax
c010105a:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010105d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101060:	a3 20 f2 1a c0       	mov    %eax,0xc01af220
    crt_pos = pos;
c0101065:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101068:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
}
c010106e:	c9                   	leave  
c010106f:	c3                   	ret    

c0101070 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101070:	55                   	push   %ebp
c0101071:	89 e5                	mov    %esp,%ebp
c0101073:	83 ec 48             	sub    $0x48,%esp
c0101076:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010107c:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101080:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101084:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101088:	ee                   	out    %al,(%dx)
c0101089:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010108f:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101093:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101097:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010109b:	ee                   	out    %al,(%dx)
c010109c:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01010a2:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01010a6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010aa:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010ae:	ee                   	out    %al,(%dx)
c01010af:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010b5:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010b9:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010bd:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010c1:	ee                   	out    %al,(%dx)
c01010c2:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010c8:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010cc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010d0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010d4:	ee                   	out    %al,(%dx)
c01010d5:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010db:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010df:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010e3:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010e7:	ee                   	out    %al,(%dx)
c01010e8:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010ee:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010f2:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010f6:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010fa:	ee                   	out    %al,(%dx)
c01010fb:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101101:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101105:	89 c2                	mov    %eax,%edx
c0101107:	ec                   	in     (%dx),%al
c0101108:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c010110b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010110f:	3c ff                	cmp    $0xff,%al
c0101111:	0f 95 c0             	setne  %al
c0101114:	0f b6 c0             	movzbl %al,%eax
c0101117:	a3 28 f2 1a c0       	mov    %eax,0xc01af228
c010111c:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101122:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101126:	89 c2                	mov    %eax,%edx
c0101128:	ec                   	in     (%dx),%al
c0101129:	88 45 d5             	mov    %al,-0x2b(%ebp)
c010112c:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101132:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101136:	89 c2                	mov    %eax,%edx
c0101138:	ec                   	in     (%dx),%al
c0101139:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010113c:	a1 28 f2 1a c0       	mov    0xc01af228,%eax
c0101141:	85 c0                	test   %eax,%eax
c0101143:	74 0c                	je     c0101151 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101145:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010114c:	e8 4b 0f 00 00       	call   c010209c <pic_enable>
    }
}
c0101151:	c9                   	leave  
c0101152:	c3                   	ret    

c0101153 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101153:	55                   	push   %ebp
c0101154:	89 e5                	mov    %esp,%ebp
c0101156:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101159:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101160:	eb 09                	jmp    c010116b <lpt_putc_sub+0x18>
        delay();
c0101162:	e8 db fd ff ff       	call   c0100f42 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101167:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010116b:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101171:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101175:	89 c2                	mov    %eax,%edx
c0101177:	ec                   	in     (%dx),%al
c0101178:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010117b:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010117f:	84 c0                	test   %al,%al
c0101181:	78 09                	js     c010118c <lpt_putc_sub+0x39>
c0101183:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010118a:	7e d6                	jle    c0101162 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c010118c:	8b 45 08             	mov    0x8(%ebp),%eax
c010118f:	0f b6 c0             	movzbl %al,%eax
c0101192:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101198:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010119b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010119f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01011a3:	ee                   	out    %al,(%dx)
c01011a4:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c01011aa:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01011ae:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011b2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011b6:	ee                   	out    %al,(%dx)
c01011b7:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011bd:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011c1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011c5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011c9:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011ca:	c9                   	leave  
c01011cb:	c3                   	ret    

c01011cc <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011cc:	55                   	push   %ebp
c01011cd:	89 e5                	mov    %esp,%ebp
c01011cf:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011d2:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011d6:	74 0d                	je     c01011e5 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01011db:	89 04 24             	mov    %eax,(%esp)
c01011de:	e8 70 ff ff ff       	call   c0101153 <lpt_putc_sub>
c01011e3:	eb 24                	jmp    c0101209 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011e5:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011ec:	e8 62 ff ff ff       	call   c0101153 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011f1:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011f8:	e8 56 ff ff ff       	call   c0101153 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011fd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101204:	e8 4a ff ff ff       	call   c0101153 <lpt_putc_sub>
    }
}
c0101209:	c9                   	leave  
c010120a:	c3                   	ret    

c010120b <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c010120b:	55                   	push   %ebp
c010120c:	89 e5                	mov    %esp,%ebp
c010120e:	53                   	push   %ebx
c010120f:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101212:	8b 45 08             	mov    0x8(%ebp),%eax
c0101215:	b0 00                	mov    $0x0,%al
c0101217:	85 c0                	test   %eax,%eax
c0101219:	75 07                	jne    c0101222 <cga_putc+0x17>
        c |= 0x0700;
c010121b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101222:	8b 45 08             	mov    0x8(%ebp),%eax
c0101225:	0f b6 c0             	movzbl %al,%eax
c0101228:	83 f8 0a             	cmp    $0xa,%eax
c010122b:	74 4c                	je     c0101279 <cga_putc+0x6e>
c010122d:	83 f8 0d             	cmp    $0xd,%eax
c0101230:	74 57                	je     c0101289 <cga_putc+0x7e>
c0101232:	83 f8 08             	cmp    $0x8,%eax
c0101235:	0f 85 88 00 00 00    	jne    c01012c3 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c010123b:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101242:	66 85 c0             	test   %ax,%ax
c0101245:	74 30                	je     c0101277 <cga_putc+0x6c>
            crt_pos --;
c0101247:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c010124e:	83 e8 01             	sub    $0x1,%eax
c0101251:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101257:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c010125c:	0f b7 15 24 f2 1a c0 	movzwl 0xc01af224,%edx
c0101263:	0f b7 d2             	movzwl %dx,%edx
c0101266:	01 d2                	add    %edx,%edx
c0101268:	01 c2                	add    %eax,%edx
c010126a:	8b 45 08             	mov    0x8(%ebp),%eax
c010126d:	b0 00                	mov    $0x0,%al
c010126f:	83 c8 20             	or     $0x20,%eax
c0101272:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101275:	eb 72                	jmp    c01012e9 <cga_putc+0xde>
c0101277:	eb 70                	jmp    c01012e9 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101279:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101280:	83 c0 50             	add    $0x50,%eax
c0101283:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101289:	0f b7 1d 24 f2 1a c0 	movzwl 0xc01af224,%ebx
c0101290:	0f b7 0d 24 f2 1a c0 	movzwl 0xc01af224,%ecx
c0101297:	0f b7 c1             	movzwl %cx,%eax
c010129a:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01012a0:	c1 e8 10             	shr    $0x10,%eax
c01012a3:	89 c2                	mov    %eax,%edx
c01012a5:	66 c1 ea 06          	shr    $0x6,%dx
c01012a9:	89 d0                	mov    %edx,%eax
c01012ab:	c1 e0 02             	shl    $0x2,%eax
c01012ae:	01 d0                	add    %edx,%eax
c01012b0:	c1 e0 04             	shl    $0x4,%eax
c01012b3:	29 c1                	sub    %eax,%ecx
c01012b5:	89 ca                	mov    %ecx,%edx
c01012b7:	89 d8                	mov    %ebx,%eax
c01012b9:	29 d0                	sub    %edx,%eax
c01012bb:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
        break;
c01012c1:	eb 26                	jmp    c01012e9 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012c3:	8b 0d 20 f2 1a c0    	mov    0xc01af220,%ecx
c01012c9:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c01012d0:	8d 50 01             	lea    0x1(%eax),%edx
c01012d3:	66 89 15 24 f2 1a c0 	mov    %dx,0xc01af224
c01012da:	0f b7 c0             	movzwl %ax,%eax
c01012dd:	01 c0                	add    %eax,%eax
c01012df:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01012e5:	66 89 02             	mov    %ax,(%edx)
        break;
c01012e8:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012e9:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c01012f0:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012f4:	76 5b                	jbe    c0101351 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012f6:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c01012fb:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101301:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c0101306:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010130d:	00 
c010130e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101312:	89 04 24             	mov    %eax,(%esp)
c0101315:	e8 a1 b1 00 00       	call   c010c4bb <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010131a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101321:	eb 15                	jmp    c0101338 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101323:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c0101328:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010132b:	01 d2                	add    %edx,%edx
c010132d:	01 d0                	add    %edx,%eax
c010132f:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101334:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101338:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010133f:	7e e2                	jle    c0101323 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101341:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101348:	83 e8 50             	sub    $0x50,%eax
c010134b:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101351:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0101358:	0f b7 c0             	movzwl %ax,%eax
c010135b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010135f:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101363:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101367:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010136b:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c010136c:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101373:	66 c1 e8 08          	shr    $0x8,%ax
c0101377:	0f b6 c0             	movzbl %al,%eax
c010137a:	0f b7 15 26 f2 1a c0 	movzwl 0xc01af226,%edx
c0101381:	83 c2 01             	add    $0x1,%edx
c0101384:	0f b7 d2             	movzwl %dx,%edx
c0101387:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010138b:	88 45 ed             	mov    %al,-0x13(%ebp)
c010138e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101392:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101396:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101397:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c010139e:	0f b7 c0             	movzwl %ax,%eax
c01013a1:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01013a5:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c01013a9:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013ad:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013b1:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013b2:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c01013b9:	0f b6 c0             	movzbl %al,%eax
c01013bc:	0f b7 15 26 f2 1a c0 	movzwl 0xc01af226,%edx
c01013c3:	83 c2 01             	add    $0x1,%edx
c01013c6:	0f b7 d2             	movzwl %dx,%edx
c01013c9:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013cd:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013d0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013d4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013d8:	ee                   	out    %al,(%dx)
}
c01013d9:	83 c4 34             	add    $0x34,%esp
c01013dc:	5b                   	pop    %ebx
c01013dd:	5d                   	pop    %ebp
c01013de:	c3                   	ret    

c01013df <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013df:	55                   	push   %ebp
c01013e0:	89 e5                	mov    %esp,%ebp
c01013e2:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013ec:	eb 09                	jmp    c01013f7 <serial_putc_sub+0x18>
        delay();
c01013ee:	e8 4f fb ff ff       	call   c0100f42 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013f3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013f7:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013fd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101401:	89 c2                	mov    %eax,%edx
c0101403:	ec                   	in     (%dx),%al
c0101404:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101407:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010140b:	0f b6 c0             	movzbl %al,%eax
c010140e:	83 e0 20             	and    $0x20,%eax
c0101411:	85 c0                	test   %eax,%eax
c0101413:	75 09                	jne    c010141e <serial_putc_sub+0x3f>
c0101415:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010141c:	7e d0                	jle    c01013ee <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010141e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101421:	0f b6 c0             	movzbl %al,%eax
c0101424:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010142a:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010142d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101431:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101435:	ee                   	out    %al,(%dx)
}
c0101436:	c9                   	leave  
c0101437:	c3                   	ret    

c0101438 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101438:	55                   	push   %ebp
c0101439:	89 e5                	mov    %esp,%ebp
c010143b:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010143e:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101442:	74 0d                	je     c0101451 <serial_putc+0x19>
        serial_putc_sub(c);
c0101444:	8b 45 08             	mov    0x8(%ebp),%eax
c0101447:	89 04 24             	mov    %eax,(%esp)
c010144a:	e8 90 ff ff ff       	call   c01013df <serial_putc_sub>
c010144f:	eb 24                	jmp    c0101475 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101451:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101458:	e8 82 ff ff ff       	call   c01013df <serial_putc_sub>
        serial_putc_sub(' ');
c010145d:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101464:	e8 76 ff ff ff       	call   c01013df <serial_putc_sub>
        serial_putc_sub('\b');
c0101469:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101470:	e8 6a ff ff ff       	call   c01013df <serial_putc_sub>
    }
}
c0101475:	c9                   	leave  
c0101476:	c3                   	ret    

c0101477 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101477:	55                   	push   %ebp
c0101478:	89 e5                	mov    %esp,%ebp
c010147a:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c010147d:	eb 33                	jmp    c01014b2 <cons_intr+0x3b>
        if (c != 0) {
c010147f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101483:	74 2d                	je     c01014b2 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101485:	a1 44 f4 1a c0       	mov    0xc01af444,%eax
c010148a:	8d 50 01             	lea    0x1(%eax),%edx
c010148d:	89 15 44 f4 1a c0    	mov    %edx,0xc01af444
c0101493:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101496:	88 90 40 f2 1a c0    	mov    %dl,-0x3fe50dc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c010149c:	a1 44 f4 1a c0       	mov    0xc01af444,%eax
c01014a1:	3d 00 02 00 00       	cmp    $0x200,%eax
c01014a6:	75 0a                	jne    c01014b2 <cons_intr+0x3b>
                cons.wpos = 0;
c01014a8:	c7 05 44 f4 1a c0 00 	movl   $0x0,0xc01af444
c01014af:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01014b5:	ff d0                	call   *%eax
c01014b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014ba:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014be:	75 bf                	jne    c010147f <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014c0:	c9                   	leave  
c01014c1:	c3                   	ret    

c01014c2 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014c2:	55                   	push   %ebp
c01014c3:	89 e5                	mov    %esp,%ebp
c01014c5:	83 ec 10             	sub    $0x10,%esp
c01014c8:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014ce:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014d2:	89 c2                	mov    %eax,%edx
c01014d4:	ec                   	in     (%dx),%al
c01014d5:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014d8:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014dc:	0f b6 c0             	movzbl %al,%eax
c01014df:	83 e0 01             	and    $0x1,%eax
c01014e2:	85 c0                	test   %eax,%eax
c01014e4:	75 07                	jne    c01014ed <serial_proc_data+0x2b>
        return -1;
c01014e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014eb:	eb 2a                	jmp    c0101517 <serial_proc_data+0x55>
c01014ed:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014f3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014f7:	89 c2                	mov    %eax,%edx
c01014f9:	ec                   	in     (%dx),%al
c01014fa:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014fd:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101501:	0f b6 c0             	movzbl %al,%eax
c0101504:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101507:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c010150b:	75 07                	jne    c0101514 <serial_proc_data+0x52>
        c = '\b';
c010150d:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101514:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101517:	c9                   	leave  
c0101518:	c3                   	ret    

c0101519 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101519:	55                   	push   %ebp
c010151a:	89 e5                	mov    %esp,%ebp
c010151c:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010151f:	a1 28 f2 1a c0       	mov    0xc01af228,%eax
c0101524:	85 c0                	test   %eax,%eax
c0101526:	74 0c                	je     c0101534 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101528:	c7 04 24 c2 14 10 c0 	movl   $0xc01014c2,(%esp)
c010152f:	e8 43 ff ff ff       	call   c0101477 <cons_intr>
    }
}
c0101534:	c9                   	leave  
c0101535:	c3                   	ret    

c0101536 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101536:	55                   	push   %ebp
c0101537:	89 e5                	mov    %esp,%ebp
c0101539:	83 ec 38             	sub    $0x38,%esp
c010153c:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101542:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101546:	89 c2                	mov    %eax,%edx
c0101548:	ec                   	in     (%dx),%al
c0101549:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c010154c:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101550:	0f b6 c0             	movzbl %al,%eax
c0101553:	83 e0 01             	and    $0x1,%eax
c0101556:	85 c0                	test   %eax,%eax
c0101558:	75 0a                	jne    c0101564 <kbd_proc_data+0x2e>
        return -1;
c010155a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010155f:	e9 59 01 00 00       	jmp    c01016bd <kbd_proc_data+0x187>
c0101564:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010156a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010156e:	89 c2                	mov    %eax,%edx
c0101570:	ec                   	in     (%dx),%al
c0101571:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101574:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101578:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010157b:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010157f:	75 17                	jne    c0101598 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101581:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101586:	83 c8 40             	or     $0x40,%eax
c0101589:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
        return 0;
c010158e:	b8 00 00 00 00       	mov    $0x0,%eax
c0101593:	e9 25 01 00 00       	jmp    c01016bd <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101598:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010159c:	84 c0                	test   %al,%al
c010159e:	79 47                	jns    c01015e7 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01015a0:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015a5:	83 e0 40             	and    $0x40,%eax
c01015a8:	85 c0                	test   %eax,%eax
c01015aa:	75 09                	jne    c01015b5 <kbd_proc_data+0x7f>
c01015ac:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b0:	83 e0 7f             	and    $0x7f,%eax
c01015b3:	eb 04                	jmp    c01015b9 <kbd_proc_data+0x83>
c01015b5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b9:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015bc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015c0:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c01015c7:	83 c8 40             	or     $0x40,%eax
c01015ca:	0f b6 c0             	movzbl %al,%eax
c01015cd:	f7 d0                	not    %eax
c01015cf:	89 c2                	mov    %eax,%edx
c01015d1:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015d6:	21 d0                	and    %edx,%eax
c01015d8:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
        return 0;
c01015dd:	b8 00 00 00 00       	mov    $0x0,%eax
c01015e2:	e9 d6 00 00 00       	jmp    c01016bd <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015e7:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015ec:	83 e0 40             	and    $0x40,%eax
c01015ef:	85 c0                	test   %eax,%eax
c01015f1:	74 11                	je     c0101604 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015f3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015f7:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015fc:	83 e0 bf             	and    $0xffffffbf,%eax
c01015ff:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
    }

    shift |= shiftcode[data];
c0101604:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101608:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c010160f:	0f b6 d0             	movzbl %al,%edx
c0101612:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101617:	09 d0                	or     %edx,%eax
c0101619:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
    shift ^= togglecode[data];
c010161e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101622:	0f b6 80 60 d1 12 c0 	movzbl -0x3fed2ea0(%eax),%eax
c0101629:	0f b6 d0             	movzbl %al,%edx
c010162c:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101631:	31 d0                	xor    %edx,%eax
c0101633:	a3 48 f4 1a c0       	mov    %eax,0xc01af448

    c = charcode[shift & (CTL | SHIFT)][data];
c0101638:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c010163d:	83 e0 03             	and    $0x3,%eax
c0101640:	8b 14 85 60 d5 12 c0 	mov    -0x3fed2aa0(,%eax,4),%edx
c0101647:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010164b:	01 d0                	add    %edx,%eax
c010164d:	0f b6 00             	movzbl (%eax),%eax
c0101650:	0f b6 c0             	movzbl %al,%eax
c0101653:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101656:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c010165b:	83 e0 08             	and    $0x8,%eax
c010165e:	85 c0                	test   %eax,%eax
c0101660:	74 22                	je     c0101684 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101662:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101666:	7e 0c                	jle    c0101674 <kbd_proc_data+0x13e>
c0101668:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c010166c:	7f 06                	jg     c0101674 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010166e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101672:	eb 10                	jmp    c0101684 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101674:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101678:	7e 0a                	jle    c0101684 <kbd_proc_data+0x14e>
c010167a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010167e:	7f 04                	jg     c0101684 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101680:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101684:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101689:	f7 d0                	not    %eax
c010168b:	83 e0 06             	and    $0x6,%eax
c010168e:	85 c0                	test   %eax,%eax
c0101690:	75 28                	jne    c01016ba <kbd_proc_data+0x184>
c0101692:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101699:	75 1f                	jne    c01016ba <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c010169b:	c7 04 24 3d c9 10 c0 	movl   $0xc010c93d,(%esp)
c01016a2:	e8 b1 ec ff ff       	call   c0100358 <cprintf>
c01016a7:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01016ad:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016b1:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016b5:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016b9:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016bd:	c9                   	leave  
c01016be:	c3                   	ret    

c01016bf <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016bf:	55                   	push   %ebp
c01016c0:	89 e5                	mov    %esp,%ebp
c01016c2:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016c5:	c7 04 24 36 15 10 c0 	movl   $0xc0101536,(%esp)
c01016cc:	e8 a6 fd ff ff       	call   c0101477 <cons_intr>
}
c01016d1:	c9                   	leave  
c01016d2:	c3                   	ret    

c01016d3 <kbd_init>:

static void
kbd_init(void) {
c01016d3:	55                   	push   %ebp
c01016d4:	89 e5                	mov    %esp,%ebp
c01016d6:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016d9:	e8 e1 ff ff ff       	call   c01016bf <kbd_intr>
    pic_enable(IRQ_KBD);
c01016de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016e5:	e8 b2 09 00 00       	call   c010209c <pic_enable>
}
c01016ea:	c9                   	leave  
c01016eb:	c3                   	ret    

c01016ec <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016ec:	55                   	push   %ebp
c01016ed:	89 e5                	mov    %esp,%ebp
c01016ef:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016f2:	e8 93 f8 ff ff       	call   c0100f8a <cga_init>
    serial_init();
c01016f7:	e8 74 f9 ff ff       	call   c0101070 <serial_init>
    kbd_init();
c01016fc:	e8 d2 ff ff ff       	call   c01016d3 <kbd_init>
    if (!serial_exists) {
c0101701:	a1 28 f2 1a c0       	mov    0xc01af228,%eax
c0101706:	85 c0                	test   %eax,%eax
c0101708:	75 0c                	jne    c0101716 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c010170a:	c7 04 24 49 c9 10 c0 	movl   $0xc010c949,(%esp)
c0101711:	e8 42 ec ff ff       	call   c0100358 <cprintf>
    }
}
c0101716:	c9                   	leave  
c0101717:	c3                   	ret    

c0101718 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101718:	55                   	push   %ebp
c0101719:	89 e5                	mov    %esp,%ebp
c010171b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010171e:	e8 e2 f7 ff ff       	call   c0100f05 <__intr_save>
c0101723:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101726:	8b 45 08             	mov    0x8(%ebp),%eax
c0101729:	89 04 24             	mov    %eax,(%esp)
c010172c:	e8 9b fa ff ff       	call   c01011cc <lpt_putc>
        cga_putc(c);
c0101731:	8b 45 08             	mov    0x8(%ebp),%eax
c0101734:	89 04 24             	mov    %eax,(%esp)
c0101737:	e8 cf fa ff ff       	call   c010120b <cga_putc>
        serial_putc(c);
c010173c:	8b 45 08             	mov    0x8(%ebp),%eax
c010173f:	89 04 24             	mov    %eax,(%esp)
c0101742:	e8 f1 fc ff ff       	call   c0101438 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101747:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010174a:	89 04 24             	mov    %eax,(%esp)
c010174d:	e8 dd f7 ff ff       	call   c0100f2f <__intr_restore>
}
c0101752:	c9                   	leave  
c0101753:	c3                   	ret    

c0101754 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101754:	55                   	push   %ebp
c0101755:	89 e5                	mov    %esp,%ebp
c0101757:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c010175a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101761:	e8 9f f7 ff ff       	call   c0100f05 <__intr_save>
c0101766:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101769:	e8 ab fd ff ff       	call   c0101519 <serial_intr>
        kbd_intr();
c010176e:	e8 4c ff ff ff       	call   c01016bf <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101773:	8b 15 40 f4 1a c0    	mov    0xc01af440,%edx
c0101779:	a1 44 f4 1a c0       	mov    0xc01af444,%eax
c010177e:	39 c2                	cmp    %eax,%edx
c0101780:	74 31                	je     c01017b3 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101782:	a1 40 f4 1a c0       	mov    0xc01af440,%eax
c0101787:	8d 50 01             	lea    0x1(%eax),%edx
c010178a:	89 15 40 f4 1a c0    	mov    %edx,0xc01af440
c0101790:	0f b6 80 40 f2 1a c0 	movzbl -0x3fe50dc0(%eax),%eax
c0101797:	0f b6 c0             	movzbl %al,%eax
c010179a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c010179d:	a1 40 f4 1a c0       	mov    0xc01af440,%eax
c01017a2:	3d 00 02 00 00       	cmp    $0x200,%eax
c01017a7:	75 0a                	jne    c01017b3 <cons_getc+0x5f>
                cons.rpos = 0;
c01017a9:	c7 05 40 f4 1a c0 00 	movl   $0x0,0xc01af440
c01017b0:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017b6:	89 04 24             	mov    %eax,(%esp)
c01017b9:	e8 71 f7 ff ff       	call   c0100f2f <__intr_restore>
    return c;
c01017be:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017c1:	c9                   	leave  
c01017c2:	c3                   	ret    

c01017c3 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017c3:	55                   	push   %ebp
c01017c4:	89 e5                	mov    %esp,%ebp
c01017c6:	83 ec 14             	sub    $0x14,%esp
c01017c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01017cc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017d0:	90                   	nop
c01017d1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017d5:	83 c0 07             	add    $0x7,%eax
c01017d8:	0f b7 c0             	movzwl %ax,%eax
c01017db:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017df:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017e3:	89 c2                	mov    %eax,%edx
c01017e5:	ec                   	in     (%dx),%al
c01017e6:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017e9:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017ed:	0f b6 c0             	movzbl %al,%eax
c01017f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017f6:	25 80 00 00 00       	and    $0x80,%eax
c01017fb:	85 c0                	test   %eax,%eax
c01017fd:	75 d2                	jne    c01017d1 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0101803:	74 11                	je     c0101816 <ide_wait_ready+0x53>
c0101805:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101808:	83 e0 21             	and    $0x21,%eax
c010180b:	85 c0                	test   %eax,%eax
c010180d:	74 07                	je     c0101816 <ide_wait_ready+0x53>
        return -1;
c010180f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101814:	eb 05                	jmp    c010181b <ide_wait_ready+0x58>
    }
    return 0;
c0101816:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010181b:	c9                   	leave  
c010181c:	c3                   	ret    

c010181d <ide_init>:

void
ide_init(void) {
c010181d:	55                   	push   %ebp
c010181e:	89 e5                	mov    %esp,%ebp
c0101820:	57                   	push   %edi
c0101821:	53                   	push   %ebx
c0101822:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101828:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010182e:	e9 d6 02 00 00       	jmp    c0101b09 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101833:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101837:	c1 e0 03             	shl    $0x3,%eax
c010183a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101841:	29 c2                	sub    %eax,%edx
c0101843:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101849:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c010184c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101850:	66 d1 e8             	shr    %ax
c0101853:	0f b7 c0             	movzwl %ax,%eax
c0101856:	0f b7 04 85 68 c9 10 	movzwl -0x3fef3698(,%eax,4),%eax
c010185d:	c0 
c010185e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101862:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101866:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010186d:	00 
c010186e:	89 04 24             	mov    %eax,(%esp)
c0101871:	e8 4d ff ff ff       	call   c01017c3 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101876:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010187a:	83 e0 01             	and    $0x1,%eax
c010187d:	c1 e0 04             	shl    $0x4,%eax
c0101880:	83 c8 e0             	or     $0xffffffe0,%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010188a:	83 c2 06             	add    $0x6,%edx
c010188d:	0f b7 d2             	movzwl %dx,%edx
c0101890:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101894:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101897:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010189b:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010189f:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018a4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018ab:	00 
c01018ac:	89 04 24             	mov    %eax,(%esp)
c01018af:	e8 0f ff ff ff       	call   c01017c3 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018b4:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018b8:	83 c0 07             	add    $0x7,%eax
c01018bb:	0f b7 c0             	movzwl %ax,%eax
c01018be:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018c2:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018c6:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018ca:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018ce:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018da:	00 
c01018db:	89 04 24             	mov    %eax,(%esp)
c01018de:	e8 e0 fe ff ff       	call   c01017c3 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018e3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018e7:	83 c0 07             	add    $0x7,%eax
c01018ea:	0f b7 c0             	movzwl %ax,%eax
c01018ed:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018f1:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018f5:	89 c2                	mov    %eax,%edx
c01018f7:	ec                   	in     (%dx),%al
c01018f8:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018fb:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018ff:	84 c0                	test   %al,%al
c0101901:	0f 84 f7 01 00 00    	je     c0101afe <ide_init+0x2e1>
c0101907:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010190b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101912:	00 
c0101913:	89 04 24             	mov    %eax,(%esp)
c0101916:	e8 a8 fe ff ff       	call   c01017c3 <ide_wait_ready>
c010191b:	85 c0                	test   %eax,%eax
c010191d:	0f 85 db 01 00 00    	jne    c0101afe <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101923:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101927:	c1 e0 03             	shl    $0x3,%eax
c010192a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101931:	29 c2                	sub    %eax,%edx
c0101933:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101939:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c010193c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101940:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101943:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101949:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010194c:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101953:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101956:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101959:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010195c:	89 cb                	mov    %ecx,%ebx
c010195e:	89 df                	mov    %ebx,%edi
c0101960:	89 c1                	mov    %eax,%ecx
c0101962:	fc                   	cld    
c0101963:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101965:	89 c8                	mov    %ecx,%eax
c0101967:	89 fb                	mov    %edi,%ebx
c0101969:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c010196c:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c010196f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101975:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101978:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010197b:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101981:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101984:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101987:	25 00 00 00 04       	and    $0x4000000,%eax
c010198c:	85 c0                	test   %eax,%eax
c010198e:	74 0e                	je     c010199e <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101990:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101993:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101999:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010199c:	eb 09                	jmp    c01019a7 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010199e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019a1:	8b 40 78             	mov    0x78(%eax),%eax
c01019a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c01019a7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019ab:	c1 e0 03             	shl    $0x3,%eax
c01019ae:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019b5:	29 c2                	sub    %eax,%edx
c01019b7:	81 c2 60 f4 1a c0    	add    $0xc01af460,%edx
c01019bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019c0:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019c3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019c7:	c1 e0 03             	shl    $0x3,%eax
c01019ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019d1:	29 c2                	sub    %eax,%edx
c01019d3:	81 c2 60 f4 1a c0    	add    $0xc01af460,%edx
c01019d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019dc:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019e2:	83 c0 62             	add    $0x62,%eax
c01019e5:	0f b7 00             	movzwl (%eax),%eax
c01019e8:	0f b7 c0             	movzwl %ax,%eax
c01019eb:	25 00 02 00 00       	and    $0x200,%eax
c01019f0:	85 c0                	test   %eax,%eax
c01019f2:	75 24                	jne    c0101a18 <ide_init+0x1fb>
c01019f4:	c7 44 24 0c 70 c9 10 	movl   $0xc010c970,0xc(%esp)
c01019fb:	c0 
c01019fc:	c7 44 24 08 b3 c9 10 	movl   $0xc010c9b3,0x8(%esp)
c0101a03:	c0 
c0101a04:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101a0b:	00 
c0101a0c:	c7 04 24 c8 c9 10 c0 	movl   $0xc010c9c8,(%esp)
c0101a13:	e8 ce f3 ff ff       	call   c0100de6 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a18:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a1c:	c1 e0 03             	shl    $0x3,%eax
c0101a1f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a26:	29 c2                	sub    %eax,%edx
c0101a28:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101a2e:	83 c0 0c             	add    $0xc,%eax
c0101a31:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a37:	83 c0 36             	add    $0x36,%eax
c0101a3a:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a3d:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a44:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a4b:	eb 34                	jmp    c0101a81 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a50:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a53:	01 c2                	add    %eax,%edx
c0101a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a58:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a5e:	01 c8                	add    %ecx,%eax
c0101a60:	0f b6 00             	movzbl (%eax),%eax
c0101a63:	88 02                	mov    %al,(%edx)
c0101a65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a68:	8d 50 01             	lea    0x1(%eax),%edx
c0101a6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a6e:	01 c2                	add    %eax,%edx
c0101a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a73:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a76:	01 c8                	add    %ecx,%eax
c0101a78:	0f b6 00             	movzbl (%eax),%eax
c0101a7b:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a7d:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a84:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a87:	72 c4                	jb     c0101a4d <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a8c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a8f:	01 d0                	add    %edx,%eax
c0101a91:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a97:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a9a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a9d:	85 c0                	test   %eax,%eax
c0101a9f:	74 0f                	je     c0101ab0 <ide_init+0x293>
c0101aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101aa4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101aa7:	01 d0                	add    %edx,%eax
c0101aa9:	0f b6 00             	movzbl (%eax),%eax
c0101aac:	3c 20                	cmp    $0x20,%al
c0101aae:	74 d9                	je     c0101a89 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101ab0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab4:	c1 e0 03             	shl    $0x3,%eax
c0101ab7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abe:	29 c2                	sub    %eax,%edx
c0101ac0:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101ac6:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101ac9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101acd:	c1 e0 03             	shl    $0x3,%eax
c0101ad0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ad7:	29 c2                	sub    %eax,%edx
c0101ad9:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101adf:	8b 50 08             	mov    0x8(%eax),%edx
c0101ae2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ae6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101aea:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101aee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101af2:	c7 04 24 da c9 10 c0 	movl   $0xc010c9da,(%esp)
c0101af9:	e8 5a e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101afe:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b02:	83 c0 01             	add    $0x1,%eax
c0101b05:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101b09:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101b0e:	0f 86 1f fd ff ff    	jbe    c0101833 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b14:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b1b:	e8 7c 05 00 00       	call   c010209c <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b20:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b27:	e8 70 05 00 00       	call   c010209c <pic_enable>
}
c0101b2c:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b32:	5b                   	pop    %ebx
c0101b33:	5f                   	pop    %edi
c0101b34:	5d                   	pop    %ebp
c0101b35:	c3                   	ret    

c0101b36 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b36:	55                   	push   %ebp
c0101b37:	89 e5                	mov    %esp,%ebp
c0101b39:	83 ec 04             	sub    $0x4,%esp
c0101b3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b3f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b43:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b48:	77 24                	ja     c0101b6e <ide_device_valid+0x38>
c0101b4a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b4e:	c1 e0 03             	shl    $0x3,%eax
c0101b51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b58:	29 c2                	sub    %eax,%edx
c0101b5a:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101b60:	0f b6 00             	movzbl (%eax),%eax
c0101b63:	84 c0                	test   %al,%al
c0101b65:	74 07                	je     c0101b6e <ide_device_valid+0x38>
c0101b67:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b6c:	eb 05                	jmp    c0101b73 <ide_device_valid+0x3d>
c0101b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b73:	c9                   	leave  
c0101b74:	c3                   	ret    

c0101b75 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b75:	55                   	push   %ebp
c0101b76:	89 e5                	mov    %esp,%ebp
c0101b78:	83 ec 08             	sub    $0x8,%esp
c0101b7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b7e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b82:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b86:	89 04 24             	mov    %eax,(%esp)
c0101b89:	e8 a8 ff ff ff       	call   c0101b36 <ide_device_valid>
c0101b8e:	85 c0                	test   %eax,%eax
c0101b90:	74 1b                	je     c0101bad <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b92:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b96:	c1 e0 03             	shl    $0x3,%eax
c0101b99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ba0:	29 c2                	sub    %eax,%edx
c0101ba2:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101ba8:	8b 40 08             	mov    0x8(%eax),%eax
c0101bab:	eb 05                	jmp    c0101bb2 <ide_device_size+0x3d>
    }
    return 0;
c0101bad:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101bb2:	c9                   	leave  
c0101bb3:	c3                   	ret    

c0101bb4 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101bb4:	55                   	push   %ebp
c0101bb5:	89 e5                	mov    %esp,%ebp
c0101bb7:	57                   	push   %edi
c0101bb8:	53                   	push   %ebx
c0101bb9:	83 ec 50             	sub    $0x50,%esp
c0101bbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bbf:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bc3:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bca:	77 24                	ja     c0101bf0 <ide_read_secs+0x3c>
c0101bcc:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bd1:	77 1d                	ja     c0101bf0 <ide_read_secs+0x3c>
c0101bd3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bd7:	c1 e0 03             	shl    $0x3,%eax
c0101bda:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101be1:	29 c2                	sub    %eax,%edx
c0101be3:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101be9:	0f b6 00             	movzbl (%eax),%eax
c0101bec:	84 c0                	test   %al,%al
c0101bee:	75 24                	jne    c0101c14 <ide_read_secs+0x60>
c0101bf0:	c7 44 24 0c f8 c9 10 	movl   $0xc010c9f8,0xc(%esp)
c0101bf7:	c0 
c0101bf8:	c7 44 24 08 b3 c9 10 	movl   $0xc010c9b3,0x8(%esp)
c0101bff:	c0 
c0101c00:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101c07:	00 
c0101c08:	c7 04 24 c8 c9 10 c0 	movl   $0xc010c9c8,(%esp)
c0101c0f:	e8 d2 f1 ff ff       	call   c0100de6 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c14:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c1b:	77 0f                	ja     c0101c2c <ide_read_secs+0x78>
c0101c1d:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c20:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c23:	01 d0                	add    %edx,%eax
c0101c25:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c2a:	76 24                	jbe    c0101c50 <ide_read_secs+0x9c>
c0101c2c:	c7 44 24 0c 20 ca 10 	movl   $0xc010ca20,0xc(%esp)
c0101c33:	c0 
c0101c34:	c7 44 24 08 b3 c9 10 	movl   $0xc010c9b3,0x8(%esp)
c0101c3b:	c0 
c0101c3c:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c43:	00 
c0101c44:	c7 04 24 c8 c9 10 c0 	movl   $0xc010c9c8,(%esp)
c0101c4b:	e8 96 f1 ff ff       	call   c0100de6 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c50:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c54:	66 d1 e8             	shr    %ax
c0101c57:	0f b7 c0             	movzwl %ax,%eax
c0101c5a:	0f b7 04 85 68 c9 10 	movzwl -0x3fef3698(,%eax,4),%eax
c0101c61:	c0 
c0101c62:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c66:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c6a:	66 d1 e8             	shr    %ax
c0101c6d:	0f b7 c0             	movzwl %ax,%eax
c0101c70:	0f b7 04 85 6a c9 10 	movzwl -0x3fef3696(,%eax,4),%eax
c0101c77:	c0 
c0101c78:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c7c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c80:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c87:	00 
c0101c88:	89 04 24             	mov    %eax,(%esp)
c0101c8b:	e8 33 fb ff ff       	call   c01017c3 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c90:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c94:	83 c0 02             	add    $0x2,%eax
c0101c97:	0f b7 c0             	movzwl %ax,%eax
c0101c9a:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c9e:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ca2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101ca6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101caa:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101cab:	8b 45 14             	mov    0x14(%ebp),%eax
c0101cae:	0f b6 c0             	movzbl %al,%eax
c0101cb1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cb5:	83 c2 02             	add    $0x2,%edx
c0101cb8:	0f b7 d2             	movzwl %dx,%edx
c0101cbb:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cbf:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cc2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cc6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cca:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cce:	0f b6 c0             	movzbl %al,%eax
c0101cd1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cd5:	83 c2 03             	add    $0x3,%edx
c0101cd8:	0f b7 d2             	movzwl %dx,%edx
c0101cdb:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101cdf:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101ce2:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101ce6:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cea:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cee:	c1 e8 08             	shr    $0x8,%eax
c0101cf1:	0f b6 c0             	movzbl %al,%eax
c0101cf4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cf8:	83 c2 04             	add    $0x4,%edx
c0101cfb:	0f b7 d2             	movzwl %dx,%edx
c0101cfe:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101d02:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101d05:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101d09:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d0d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d11:	c1 e8 10             	shr    $0x10,%eax
c0101d14:	0f b6 c0             	movzbl %al,%eax
c0101d17:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d1b:	83 c2 05             	add    $0x5,%edx
c0101d1e:	0f b7 d2             	movzwl %dx,%edx
c0101d21:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d25:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d28:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d2c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d30:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d31:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d35:	83 e0 01             	and    $0x1,%eax
c0101d38:	c1 e0 04             	shl    $0x4,%eax
c0101d3b:	89 c2                	mov    %eax,%edx
c0101d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d40:	c1 e8 18             	shr    $0x18,%eax
c0101d43:	83 e0 0f             	and    $0xf,%eax
c0101d46:	09 d0                	or     %edx,%eax
c0101d48:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d4b:	0f b6 c0             	movzbl %al,%eax
c0101d4e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d52:	83 c2 06             	add    $0x6,%edx
c0101d55:	0f b7 d2             	movzwl %dx,%edx
c0101d58:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d5c:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d5f:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d63:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d67:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d68:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d6c:	83 c0 07             	add    $0x7,%eax
c0101d6f:	0f b7 c0             	movzwl %ax,%eax
c0101d72:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d76:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d7a:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d7e:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d82:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d8a:	eb 5a                	jmp    c0101de6 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d8c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d90:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d97:	00 
c0101d98:	89 04 24             	mov    %eax,(%esp)
c0101d9b:	e8 23 fa ff ff       	call   c01017c3 <ide_wait_ready>
c0101da0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101da3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101da7:	74 02                	je     c0101dab <ide_read_secs+0x1f7>
            goto out;
c0101da9:	eb 41                	jmp    c0101dec <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101dab:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101daf:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101db2:	8b 45 10             	mov    0x10(%ebp),%eax
c0101db5:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101db8:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101dbf:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101dc2:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101dc5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101dc8:	89 cb                	mov    %ecx,%ebx
c0101dca:	89 df                	mov    %ebx,%edi
c0101dcc:	89 c1                	mov    %eax,%ecx
c0101dce:	fc                   	cld    
c0101dcf:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dd1:	89 c8                	mov    %ecx,%eax
c0101dd3:	89 fb                	mov    %edi,%ebx
c0101dd5:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dd8:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ddb:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ddf:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101de6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dea:	75 a0                	jne    c0101d8c <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101def:	83 c4 50             	add    $0x50,%esp
c0101df2:	5b                   	pop    %ebx
c0101df3:	5f                   	pop    %edi
c0101df4:	5d                   	pop    %ebp
c0101df5:	c3                   	ret    

c0101df6 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101df6:	55                   	push   %ebp
c0101df7:	89 e5                	mov    %esp,%ebp
c0101df9:	56                   	push   %esi
c0101dfa:	53                   	push   %ebx
c0101dfb:	83 ec 50             	sub    $0x50,%esp
c0101dfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e01:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101e05:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e0c:	77 24                	ja     c0101e32 <ide_write_secs+0x3c>
c0101e0e:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e13:	77 1d                	ja     c0101e32 <ide_write_secs+0x3c>
c0101e15:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e19:	c1 e0 03             	shl    $0x3,%eax
c0101e1c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e23:	29 c2                	sub    %eax,%edx
c0101e25:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101e2b:	0f b6 00             	movzbl (%eax),%eax
c0101e2e:	84 c0                	test   %al,%al
c0101e30:	75 24                	jne    c0101e56 <ide_write_secs+0x60>
c0101e32:	c7 44 24 0c f8 c9 10 	movl   $0xc010c9f8,0xc(%esp)
c0101e39:	c0 
c0101e3a:	c7 44 24 08 b3 c9 10 	movl   $0xc010c9b3,0x8(%esp)
c0101e41:	c0 
c0101e42:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e49:	00 
c0101e4a:	c7 04 24 c8 c9 10 c0 	movl   $0xc010c9c8,(%esp)
c0101e51:	e8 90 ef ff ff       	call   c0100de6 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e56:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e5d:	77 0f                	ja     c0101e6e <ide_write_secs+0x78>
c0101e5f:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e62:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e65:	01 d0                	add    %edx,%eax
c0101e67:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e6c:	76 24                	jbe    c0101e92 <ide_write_secs+0x9c>
c0101e6e:	c7 44 24 0c 20 ca 10 	movl   $0xc010ca20,0xc(%esp)
c0101e75:	c0 
c0101e76:	c7 44 24 08 b3 c9 10 	movl   $0xc010c9b3,0x8(%esp)
c0101e7d:	c0 
c0101e7e:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e85:	00 
c0101e86:	c7 04 24 c8 c9 10 c0 	movl   $0xc010c9c8,(%esp)
c0101e8d:	e8 54 ef ff ff       	call   c0100de6 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e92:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e96:	66 d1 e8             	shr    %ax
c0101e99:	0f b7 c0             	movzwl %ax,%eax
c0101e9c:	0f b7 04 85 68 c9 10 	movzwl -0x3fef3698(,%eax,4),%eax
c0101ea3:	c0 
c0101ea4:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101ea8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101eac:	66 d1 e8             	shr    %ax
c0101eaf:	0f b7 c0             	movzwl %ax,%eax
c0101eb2:	0f b7 04 85 6a c9 10 	movzwl -0x3fef3696(,%eax,4),%eax
c0101eb9:	c0 
c0101eba:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101ebe:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101ec2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ec9:	00 
c0101eca:	89 04 24             	mov    %eax,(%esp)
c0101ecd:	e8 f1 f8 ff ff       	call   c01017c3 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ed2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101ed6:	83 c0 02             	add    $0x2,%eax
c0101ed9:	0f b7 c0             	movzwl %ax,%eax
c0101edc:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ee0:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ee4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101ee8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101eec:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101eed:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ef0:	0f b6 c0             	movzbl %al,%eax
c0101ef3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ef7:	83 c2 02             	add    $0x2,%edx
c0101efa:	0f b7 d2             	movzwl %dx,%edx
c0101efd:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101f01:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101f04:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101f08:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101f0c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f10:	0f b6 c0             	movzbl %al,%eax
c0101f13:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f17:	83 c2 03             	add    $0x3,%edx
c0101f1a:	0f b7 d2             	movzwl %dx,%edx
c0101f1d:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f21:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f24:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f28:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f2c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f30:	c1 e8 08             	shr    $0x8,%eax
c0101f33:	0f b6 c0             	movzbl %al,%eax
c0101f36:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f3a:	83 c2 04             	add    $0x4,%edx
c0101f3d:	0f b7 d2             	movzwl %dx,%edx
c0101f40:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f44:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f47:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f4b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f4f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f53:	c1 e8 10             	shr    $0x10,%eax
c0101f56:	0f b6 c0             	movzbl %al,%eax
c0101f59:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f5d:	83 c2 05             	add    $0x5,%edx
c0101f60:	0f b7 d2             	movzwl %dx,%edx
c0101f63:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f67:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f6a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f6e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f72:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f73:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f77:	83 e0 01             	and    $0x1,%eax
c0101f7a:	c1 e0 04             	shl    $0x4,%eax
c0101f7d:	89 c2                	mov    %eax,%edx
c0101f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f82:	c1 e8 18             	shr    $0x18,%eax
c0101f85:	83 e0 0f             	and    $0xf,%eax
c0101f88:	09 d0                	or     %edx,%eax
c0101f8a:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f8d:	0f b6 c0             	movzbl %al,%eax
c0101f90:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f94:	83 c2 06             	add    $0x6,%edx
c0101f97:	0f b7 d2             	movzwl %dx,%edx
c0101f9a:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f9e:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101fa1:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101fa5:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101fa9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101faa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fae:	83 c0 07             	add    $0x7,%eax
c0101fb1:	0f b7 c0             	movzwl %ax,%eax
c0101fb4:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fb8:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fbc:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fc0:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fc4:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fcc:	eb 5a                	jmp    c0102028 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fce:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fd2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fd9:	00 
c0101fda:	89 04 24             	mov    %eax,(%esp)
c0101fdd:	e8 e1 f7 ff ff       	call   c01017c3 <ide_wait_ready>
c0101fe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fe5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fe9:	74 02                	je     c0101fed <ide_write_secs+0x1f7>
            goto out;
c0101feb:	eb 41                	jmp    c010202e <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fed:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101ff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101ff4:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ff7:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ffa:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0102001:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102004:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0102007:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010200a:	89 cb                	mov    %ecx,%ebx
c010200c:	89 de                	mov    %ebx,%esi
c010200e:	89 c1                	mov    %eax,%ecx
c0102010:	fc                   	cld    
c0102011:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102013:	89 c8                	mov    %ecx,%eax
c0102015:	89 f3                	mov    %esi,%ebx
c0102017:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010201a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010201d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102021:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102028:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010202c:	75 a0                	jne    c0101fce <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010202e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102031:	83 c4 50             	add    $0x50,%esp
c0102034:	5b                   	pop    %ebx
c0102035:	5e                   	pop    %esi
c0102036:	5d                   	pop    %ebp
c0102037:	c3                   	ret    

c0102038 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102038:	55                   	push   %ebp
c0102039:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010203b:	fb                   	sti    
    sti();
}
c010203c:	5d                   	pop    %ebp
c010203d:	c3                   	ret    

c010203e <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010203e:	55                   	push   %ebp
c010203f:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102041:	fa                   	cli    
    cli();
}
c0102042:	5d                   	pop    %ebp
c0102043:	c3                   	ret    

c0102044 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102044:	55                   	push   %ebp
c0102045:	89 e5                	mov    %esp,%ebp
c0102047:	83 ec 14             	sub    $0x14,%esp
c010204a:	8b 45 08             	mov    0x8(%ebp),%eax
c010204d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102051:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102055:	66 a3 70 d5 12 c0    	mov    %ax,0xc012d570
    if (did_init) {
c010205b:	a1 40 f5 1a c0       	mov    0xc01af540,%eax
c0102060:	85 c0                	test   %eax,%eax
c0102062:	74 36                	je     c010209a <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102064:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102068:	0f b6 c0             	movzbl %al,%eax
c010206b:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102071:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102074:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102078:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010207c:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010207d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102081:	66 c1 e8 08          	shr    $0x8,%ax
c0102085:	0f b6 c0             	movzbl %al,%eax
c0102088:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010208e:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102091:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102095:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102099:	ee                   	out    %al,(%dx)
    }
}
c010209a:	c9                   	leave  
c010209b:	c3                   	ret    

c010209c <pic_enable>:

void
pic_enable(unsigned int irq) {
c010209c:	55                   	push   %ebp
c010209d:	89 e5                	mov    %esp,%ebp
c010209f:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c01020a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01020a5:	ba 01 00 00 00       	mov    $0x1,%edx
c01020aa:	89 c1                	mov    %eax,%ecx
c01020ac:	d3 e2                	shl    %cl,%edx
c01020ae:	89 d0                	mov    %edx,%eax
c01020b0:	f7 d0                	not    %eax
c01020b2:	89 c2                	mov    %eax,%edx
c01020b4:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01020bb:	21 d0                	and    %edx,%eax
c01020bd:	0f b7 c0             	movzwl %ax,%eax
c01020c0:	89 04 24             	mov    %eax,(%esp)
c01020c3:	e8 7c ff ff ff       	call   c0102044 <pic_setmask>
}
c01020c8:	c9                   	leave  
c01020c9:	c3                   	ret    

c01020ca <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020ca:	55                   	push   %ebp
c01020cb:	89 e5                	mov    %esp,%ebp
c01020cd:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020d0:	c7 05 40 f5 1a c0 01 	movl   $0x1,0xc01af540
c01020d7:	00 00 00 
c01020da:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020e0:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020e4:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020e8:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020ec:	ee                   	out    %al,(%dx)
c01020ed:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020f3:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020f7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020fb:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020ff:	ee                   	out    %al,(%dx)
c0102100:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102106:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c010210a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010210e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102112:	ee                   	out    %al,(%dx)
c0102113:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102119:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010211d:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102121:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102125:	ee                   	out    %al,(%dx)
c0102126:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010212c:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102130:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102134:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102138:	ee                   	out    %al,(%dx)
c0102139:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010213f:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102143:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102147:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010214b:	ee                   	out    %al,(%dx)
c010214c:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102152:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102156:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010215a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010215e:	ee                   	out    %al,(%dx)
c010215f:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102165:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102169:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010216d:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102171:	ee                   	out    %al,(%dx)
c0102172:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102178:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010217c:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102180:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102184:	ee                   	out    %al,(%dx)
c0102185:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010218b:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010218f:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102193:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102197:	ee                   	out    %al,(%dx)
c0102198:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010219e:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c01021a2:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01021a6:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01021aa:	ee                   	out    %al,(%dx)
c01021ab:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021b1:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021b5:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021b9:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021bd:	ee                   	out    %al,(%dx)
c01021be:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021c4:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021c8:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021cc:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021d0:	ee                   	out    %al,(%dx)
c01021d1:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021d7:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021db:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021df:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021e3:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021e4:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01021eb:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021ef:	74 12                	je     c0102203 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021f1:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01021f8:	0f b7 c0             	movzwl %ax,%eax
c01021fb:	89 04 24             	mov    %eax,(%esp)
c01021fe:	e8 41 fe ff ff       	call   c0102044 <pic_setmask>
    }
}
c0102203:	c9                   	leave  
c0102204:	c3                   	ret    

c0102205 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c0102205:	55                   	push   %ebp
c0102206:	89 e5                	mov    %esp,%ebp
c0102208:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c010220b:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102212:	00 
c0102213:	c7 04 24 60 ca 10 c0 	movl   $0xc010ca60,(%esp)
c010221a:	e8 39 e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010221f:	c7 04 24 6a ca 10 c0 	movl   $0xc010ca6a,(%esp)
c0102226:	e8 2d e1 ff ff       	call   c0100358 <cprintf>
    panic("EOT: kernel seems ok.");
c010222b:	c7 44 24 08 78 ca 10 	movl   $0xc010ca78,0x8(%esp)
c0102232:	c0 
c0102233:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010223a:	00 
c010223b:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c0102242:	e8 9f eb ff ff       	call   c0100de6 <__panic>

c0102247 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102247:	55                   	push   %ebp
c0102248:	89 e5                	mov    %esp,%ebp
c010224a:	83 ec 10             	sub    $0x10,%esp
      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
	extern uintptr_t __vectors[];
    int i, n = sizeof(idt) / sizeof(struct gatedesc);
c010224d:	c7 45 f8 00 01 00 00 	movl   $0x100,-0x8(%ebp)
    for (i = 0; i < n; i ++) {
c0102254:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010225b:	e9 c3 00 00 00       	jmp    c0102323 <idt_init+0xdc>
    	SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102260:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102263:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c010226a:	89 c2                	mov    %eax,%edx
c010226c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010226f:	66 89 14 c5 60 f5 1a 	mov    %dx,-0x3fe50aa0(,%eax,8)
c0102276:	c0 
c0102277:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010227a:	66 c7 04 c5 62 f5 1a 	movw   $0x8,-0x3fe50a9e(,%eax,8)
c0102281:	c0 08 00 
c0102284:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102287:	0f b6 14 c5 64 f5 1a 	movzbl -0x3fe50a9c(,%eax,8),%edx
c010228e:	c0 
c010228f:	83 e2 e0             	and    $0xffffffe0,%edx
c0102292:	88 14 c5 64 f5 1a c0 	mov    %dl,-0x3fe50a9c(,%eax,8)
c0102299:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229c:	0f b6 14 c5 64 f5 1a 	movzbl -0x3fe50a9c(,%eax,8),%edx
c01022a3:	c0 
c01022a4:	83 e2 1f             	and    $0x1f,%edx
c01022a7:	88 14 c5 64 f5 1a c0 	mov    %dl,-0x3fe50a9c(,%eax,8)
c01022ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b1:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022b8:	c0 
c01022b9:	83 e2 f0             	and    $0xfffffff0,%edx
c01022bc:	83 ca 0e             	or     $0xe,%edx
c01022bf:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c01022c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c9:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022d0:	c0 
c01022d1:	83 e2 ef             	and    $0xffffffef,%edx
c01022d4:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c01022db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022de:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022e5:	c0 
c01022e6:	83 e2 9f             	and    $0xffffff9f,%edx
c01022e9:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c01022f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f3:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022fa:	c0 
c01022fb:	83 ca 80             	or     $0xffffff80,%edx
c01022fe:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c0102305:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102308:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c010230f:	c1 e8 10             	shr    $0x10,%eax
c0102312:	89 c2                	mov    %eax,%edx
c0102314:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102317:	66 89 14 c5 66 f5 1a 	mov    %dx,-0x3fe50a9a(,%eax,8)
c010231e:	c0 
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
	extern uintptr_t __vectors[];
    int i, n = sizeof(idt) / sizeof(struct gatedesc);
    for (i = 0; i < n; i ++) {
c010231f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102323:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102326:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0102329:	0f 8c 31 ff ff ff    	jl     c0102260 <idt_init+0x19>
    	SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010232f:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c0102334:	66 a3 60 f9 1a c0    	mov    %ax,0xc01af960
c010233a:	66 c7 05 62 f9 1a c0 	movw   $0x8,0xc01af962
c0102341:	08 00 
c0102343:	0f b6 05 64 f9 1a c0 	movzbl 0xc01af964,%eax
c010234a:	83 e0 e0             	and    $0xffffffe0,%eax
c010234d:	a2 64 f9 1a c0       	mov    %al,0xc01af964
c0102352:	0f b6 05 64 f9 1a c0 	movzbl 0xc01af964,%eax
c0102359:	83 e0 1f             	and    $0x1f,%eax
c010235c:	a2 64 f9 1a c0       	mov    %al,0xc01af964
c0102361:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c0102368:	83 c8 0f             	or     $0xf,%eax
c010236b:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c0102370:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c0102377:	83 e0 ef             	and    $0xffffffef,%eax
c010237a:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c010237f:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c0102386:	83 c8 60             	or     $0x60,%eax
c0102389:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c010238e:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c0102395:	83 c8 80             	or     $0xffffff80,%eax
c0102398:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c010239d:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c01023a2:	c1 e8 10             	shr    $0x10,%eax
c01023a5:	66 a3 66 f9 1a c0    	mov    %ax,0xc01af966
c01023ab:	c7 45 f4 80 d5 12 c0 	movl   $0xc012d580,-0xc(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023b5:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
     /* LAB5 2012011270 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
}
c01023b8:	c9                   	leave  
c01023b9:	c3                   	ret    

c01023ba <trapname>:

static const char *
trapname(int trapno) {
c01023ba:	55                   	push   %ebp
c01023bb:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01023c0:	83 f8 13             	cmp    $0x13,%eax
c01023c3:	77 0c                	ja     c01023d1 <trapname+0x17>
        return excnames[trapno];
c01023c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01023c8:	8b 04 85 00 cf 10 c0 	mov    -0x3fef3100(,%eax,4),%eax
c01023cf:	eb 18                	jmp    c01023e9 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023d1:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023d5:	7e 0d                	jle    c01023e4 <trapname+0x2a>
c01023d7:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023db:	7f 07                	jg     c01023e4 <trapname+0x2a>
        return "Hardware Interrupt";
c01023dd:	b8 9f ca 10 c0       	mov    $0xc010ca9f,%eax
c01023e2:	eb 05                	jmp    c01023e9 <trapname+0x2f>
    }
    return "(unknown trap)";
c01023e4:	b8 b2 ca 10 c0       	mov    $0xc010cab2,%eax
}
c01023e9:	5d                   	pop    %ebp
c01023ea:	c3                   	ret    

c01023eb <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023eb:	55                   	push   %ebp
c01023ec:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f1:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01023f5:	66 83 f8 08          	cmp    $0x8,%ax
c01023f9:	0f 94 c0             	sete   %al
c01023fc:	0f b6 c0             	movzbl %al,%eax
}
c01023ff:	5d                   	pop    %ebp
c0102400:	c3                   	ret    

c0102401 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102401:	55                   	push   %ebp
c0102402:	89 e5                	mov    %esp,%ebp
c0102404:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c0102407:	8b 45 08             	mov    0x8(%ebp),%eax
c010240a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010240e:	c7 04 24 f3 ca 10 c0 	movl   $0xc010caf3,(%esp)
c0102415:	e8 3e df ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c010241a:	8b 45 08             	mov    0x8(%ebp),%eax
c010241d:	89 04 24             	mov    %eax,(%esp)
c0102420:	e8 a1 01 00 00       	call   c01025c6 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102425:	8b 45 08             	mov    0x8(%ebp),%eax
c0102428:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010242c:	0f b7 c0             	movzwl %ax,%eax
c010242f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102433:	c7 04 24 04 cb 10 c0 	movl   $0xc010cb04,(%esp)
c010243a:	e8 19 df ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010243f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102442:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102446:	0f b7 c0             	movzwl %ax,%eax
c0102449:	89 44 24 04          	mov    %eax,0x4(%esp)
c010244d:	c7 04 24 17 cb 10 c0 	movl   $0xc010cb17,(%esp)
c0102454:	e8 ff de ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102459:	8b 45 08             	mov    0x8(%ebp),%eax
c010245c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102460:	0f b7 c0             	movzwl %ax,%eax
c0102463:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102467:	c7 04 24 2a cb 10 c0 	movl   $0xc010cb2a,(%esp)
c010246e:	e8 e5 de ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102473:	8b 45 08             	mov    0x8(%ebp),%eax
c0102476:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010247a:	0f b7 c0             	movzwl %ax,%eax
c010247d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102481:	c7 04 24 3d cb 10 c0 	movl   $0xc010cb3d,(%esp)
c0102488:	e8 cb de ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010248d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102490:	8b 40 30             	mov    0x30(%eax),%eax
c0102493:	89 04 24             	mov    %eax,(%esp)
c0102496:	e8 1f ff ff ff       	call   c01023ba <trapname>
c010249b:	8b 55 08             	mov    0x8(%ebp),%edx
c010249e:	8b 52 30             	mov    0x30(%edx),%edx
c01024a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01024a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01024a9:	c7 04 24 50 cb 10 c0 	movl   $0xc010cb50,(%esp)
c01024b0:	e8 a3 de ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b8:	8b 40 34             	mov    0x34(%eax),%eax
c01024bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024bf:	c7 04 24 62 cb 10 c0 	movl   $0xc010cb62,(%esp)
c01024c6:	e8 8d de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ce:	8b 40 38             	mov    0x38(%eax),%eax
c01024d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024d5:	c7 04 24 71 cb 10 c0 	movl   $0xc010cb71,(%esp)
c01024dc:	e8 77 de ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e4:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024e8:	0f b7 c0             	movzwl %ax,%eax
c01024eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024ef:	c7 04 24 80 cb 10 c0 	movl   $0xc010cb80,(%esp)
c01024f6:	e8 5d de ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01024fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fe:	8b 40 40             	mov    0x40(%eax),%eax
c0102501:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102505:	c7 04 24 93 cb 10 c0 	movl   $0xc010cb93,(%esp)
c010250c:	e8 47 de ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102511:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102518:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010251f:	eb 3e                	jmp    c010255f <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102521:	8b 45 08             	mov    0x8(%ebp),%eax
c0102524:	8b 50 40             	mov    0x40(%eax),%edx
c0102527:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010252a:	21 d0                	and    %edx,%eax
c010252c:	85 c0                	test   %eax,%eax
c010252e:	74 28                	je     c0102558 <print_trapframe+0x157>
c0102530:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102533:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c010253a:	85 c0                	test   %eax,%eax
c010253c:	74 1a                	je     c0102558 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c010253e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102541:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c0102548:	89 44 24 04          	mov    %eax,0x4(%esp)
c010254c:	c7 04 24 a2 cb 10 c0 	movl   $0xc010cba2,(%esp)
c0102553:	e8 00 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102558:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010255c:	d1 65 f0             	shll   -0x10(%ebp)
c010255f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102562:	83 f8 17             	cmp    $0x17,%eax
c0102565:	76 ba                	jbe    c0102521 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102567:	8b 45 08             	mov    0x8(%ebp),%eax
c010256a:	8b 40 40             	mov    0x40(%eax),%eax
c010256d:	25 00 30 00 00       	and    $0x3000,%eax
c0102572:	c1 e8 0c             	shr    $0xc,%eax
c0102575:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102579:	c7 04 24 a6 cb 10 c0 	movl   $0xc010cba6,(%esp)
c0102580:	e8 d3 dd ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102585:	8b 45 08             	mov    0x8(%ebp),%eax
c0102588:	89 04 24             	mov    %eax,(%esp)
c010258b:	e8 5b fe ff ff       	call   c01023eb <trap_in_kernel>
c0102590:	85 c0                	test   %eax,%eax
c0102592:	75 30                	jne    c01025c4 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102594:	8b 45 08             	mov    0x8(%ebp),%eax
c0102597:	8b 40 44             	mov    0x44(%eax),%eax
c010259a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010259e:	c7 04 24 af cb 10 c0 	movl   $0xc010cbaf,(%esp)
c01025a5:	e8 ae dd ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025b1:	0f b7 c0             	movzwl %ax,%eax
c01025b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b8:	c7 04 24 be cb 10 c0 	movl   $0xc010cbbe,(%esp)
c01025bf:	e8 94 dd ff ff       	call   c0100358 <cprintf>
    }
}
c01025c4:	c9                   	leave  
c01025c5:	c3                   	ret    

c01025c6 <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025c6:	55                   	push   %ebp
c01025c7:	89 e5                	mov    %esp,%ebp
c01025c9:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025cf:	8b 00                	mov    (%eax),%eax
c01025d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d5:	c7 04 24 d1 cb 10 c0 	movl   $0xc010cbd1,(%esp)
c01025dc:	e8 77 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e4:	8b 40 04             	mov    0x4(%eax),%eax
c01025e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025eb:	c7 04 24 e0 cb 10 c0 	movl   $0xc010cbe0,(%esp)
c01025f2:	e8 61 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01025f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fa:	8b 40 08             	mov    0x8(%eax),%eax
c01025fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102601:	c7 04 24 ef cb 10 c0 	movl   $0xc010cbef,(%esp)
c0102608:	e8 4b dd ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c010260d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102610:	8b 40 0c             	mov    0xc(%eax),%eax
c0102613:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102617:	c7 04 24 fe cb 10 c0 	movl   $0xc010cbfe,(%esp)
c010261e:	e8 35 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102623:	8b 45 08             	mov    0x8(%ebp),%eax
c0102626:	8b 40 10             	mov    0x10(%eax),%eax
c0102629:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262d:	c7 04 24 0d cc 10 c0 	movl   $0xc010cc0d,(%esp)
c0102634:	e8 1f dd ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 40 14             	mov    0x14(%eax),%eax
c010263f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102643:	c7 04 24 1c cc 10 c0 	movl   $0xc010cc1c,(%esp)
c010264a:	e8 09 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010264f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102652:	8b 40 18             	mov    0x18(%eax),%eax
c0102655:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102659:	c7 04 24 2b cc 10 c0 	movl   $0xc010cc2b,(%esp)
c0102660:	e8 f3 dc ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102665:	8b 45 08             	mov    0x8(%ebp),%eax
c0102668:	8b 40 1c             	mov    0x1c(%eax),%eax
c010266b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010266f:	c7 04 24 3a cc 10 c0 	movl   $0xc010cc3a,(%esp)
c0102676:	e8 dd dc ff ff       	call   c0100358 <cprintf>
}
c010267b:	c9                   	leave  
c010267c:	c3                   	ret    

c010267d <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010267d:	55                   	push   %ebp
c010267e:	89 e5                	mov    %esp,%ebp
c0102680:	53                   	push   %ebx
c0102681:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102684:	8b 45 08             	mov    0x8(%ebp),%eax
c0102687:	8b 40 34             	mov    0x34(%eax),%eax
c010268a:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010268d:	85 c0                	test   %eax,%eax
c010268f:	74 07                	je     c0102698 <print_pgfault+0x1b>
c0102691:	b9 49 cc 10 c0       	mov    $0xc010cc49,%ecx
c0102696:	eb 05                	jmp    c010269d <print_pgfault+0x20>
c0102698:	b9 5a cc 10 c0       	mov    $0xc010cc5a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010269d:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a0:	8b 40 34             	mov    0x34(%eax),%eax
c01026a3:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026a6:	85 c0                	test   %eax,%eax
c01026a8:	74 07                	je     c01026b1 <print_pgfault+0x34>
c01026aa:	ba 57 00 00 00       	mov    $0x57,%edx
c01026af:	eb 05                	jmp    c01026b6 <print_pgfault+0x39>
c01026b1:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b9:	8b 40 34             	mov    0x34(%eax),%eax
c01026bc:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026bf:	85 c0                	test   %eax,%eax
c01026c1:	74 07                	je     c01026ca <print_pgfault+0x4d>
c01026c3:	b8 55 00 00 00       	mov    $0x55,%eax
c01026c8:	eb 05                	jmp    c01026cf <print_pgfault+0x52>
c01026ca:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026cf:	0f 20 d3             	mov    %cr2,%ebx
c01026d2:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01026d5:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026d8:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026dc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026e4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026e8:	c7 04 24 68 cc 10 c0 	movl   $0xc010cc68,(%esp)
c01026ef:	e8 64 dc ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01026f4:	83 c4 34             	add    $0x34,%esp
c01026f7:	5b                   	pop    %ebx
c01026f8:	5d                   	pop    %ebp
c01026f9:	c3                   	ret    

c01026fa <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01026fa:	55                   	push   %ebp
c01026fb:	89 e5                	mov    %esp,%ebp
c01026fd:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102700:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0102705:	85 c0                	test   %eax,%eax
c0102707:	74 0b                	je     c0102714 <pgfault_handler+0x1a>
            print_pgfault(tf);
c0102709:	8b 45 08             	mov    0x8(%ebp),%eax
c010270c:	89 04 24             	mov    %eax,(%esp)
c010270f:	e8 69 ff ff ff       	call   c010267d <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102714:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0102719:	85 c0                	test   %eax,%eax
c010271b:	74 3d                	je     c010275a <pgfault_handler+0x60>
        assert(current == idleproc);
c010271d:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0102723:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c0102728:	39 c2                	cmp    %eax,%edx
c010272a:	74 24                	je     c0102750 <pgfault_handler+0x56>
c010272c:	c7 44 24 0c 8b cc 10 	movl   $0xc010cc8b,0xc(%esp)
c0102733:	c0 
c0102734:	c7 44 24 08 9f cc 10 	movl   $0xc010cc9f,0x8(%esp)
c010273b:	c0 
c010273c:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102743:	00 
c0102744:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c010274b:	e8 96 e6 ff ff       	call   c0100de6 <__panic>
        mm = check_mm_struct;
c0102750:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0102755:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102758:	eb 46                	jmp    c01027a0 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010275a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010275f:	85 c0                	test   %eax,%eax
c0102761:	75 32                	jne    c0102795 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102763:	8b 45 08             	mov    0x8(%ebp),%eax
c0102766:	89 04 24             	mov    %eax,(%esp)
c0102769:	e8 93 fc ff ff       	call   c0102401 <print_trapframe>
            print_pgfault(tf);
c010276e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102771:	89 04 24             	mov    %eax,(%esp)
c0102774:	e8 04 ff ff ff       	call   c010267d <print_pgfault>
            panic("unhandled page fault.\n");
c0102779:	c7 44 24 08 b4 cc 10 	movl   $0xc010ccb4,0x8(%esp)
c0102780:	c0 
c0102781:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102788:	00 
c0102789:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c0102790:	e8 51 e6 ff ff       	call   c0100de6 <__panic>
        }
        mm = current->mm;
c0102795:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010279a:	8b 40 18             	mov    0x18(%eax),%eax
c010279d:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027a0:	0f 20 d0             	mov    %cr2,%eax
c01027a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027a9:	89 c2                	mov    %eax,%edx
c01027ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ae:	8b 40 34             	mov    0x34(%eax),%eax
c01027b1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01027b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027bc:	89 04 24             	mov    %eax,(%esp)
c01027bf:	e8 57 65 00 00       	call   c0108d1b <do_pgfault>
}
c01027c4:	c9                   	leave  
c01027c5:	c3                   	ret    

c01027c6 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027c6:	55                   	push   %ebp
c01027c7:	89 e5                	mov    %esp,%ebp
c01027c9:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01027cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01027d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d6:	8b 40 30             	mov    0x30(%eax),%eax
c01027d9:	83 f8 2f             	cmp    $0x2f,%eax
c01027dc:	77 38                	ja     c0102816 <trap_dispatch+0x50>
c01027de:	83 f8 2e             	cmp    $0x2e,%eax
c01027e1:	0f 83 e2 01 00 00    	jae    c01029c9 <trap_dispatch+0x203>
c01027e7:	83 f8 20             	cmp    $0x20,%eax
c01027ea:	0f 84 07 01 00 00    	je     c01028f7 <trap_dispatch+0x131>
c01027f0:	83 f8 20             	cmp    $0x20,%eax
c01027f3:	77 0a                	ja     c01027ff <trap_dispatch+0x39>
c01027f5:	83 f8 0e             	cmp    $0xe,%eax
c01027f8:	74 3e                	je     c0102838 <trap_dispatch+0x72>
c01027fa:	e9 82 01 00 00       	jmp    c0102981 <trap_dispatch+0x1bb>
c01027ff:	83 f8 21             	cmp    $0x21,%eax
c0102802:	0f 84 37 01 00 00    	je     c010293f <trap_dispatch+0x179>
c0102808:	83 f8 24             	cmp    $0x24,%eax
c010280b:	0f 84 05 01 00 00    	je     c0102916 <trap_dispatch+0x150>
c0102811:	e9 6b 01 00 00       	jmp    c0102981 <trap_dispatch+0x1bb>
c0102816:	83 f8 78             	cmp    $0x78,%eax
c0102819:	0f 82 62 01 00 00    	jb     c0102981 <trap_dispatch+0x1bb>
c010281f:	83 f8 79             	cmp    $0x79,%eax
c0102822:	0f 86 3d 01 00 00    	jbe    c0102965 <trap_dispatch+0x19f>
c0102828:	3d 80 00 00 00       	cmp    $0x80,%eax
c010282d:	0f 84 ba 00 00 00    	je     c01028ed <trap_dispatch+0x127>
c0102833:	e9 49 01 00 00       	jmp    c0102981 <trap_dispatch+0x1bb>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102838:	8b 45 08             	mov    0x8(%ebp),%eax
c010283b:	89 04 24             	mov    %eax,(%esp)
c010283e:	e8 b7 fe ff ff       	call   c01026fa <pgfault_handler>
c0102843:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102846:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010284a:	0f 84 98 00 00 00    	je     c01028e8 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102850:	8b 45 08             	mov    0x8(%ebp),%eax
c0102853:	89 04 24             	mov    %eax,(%esp)
c0102856:	e8 a6 fb ff ff       	call   c0102401 <print_trapframe>
            if (current == NULL) {
c010285b:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102860:	85 c0                	test   %eax,%eax
c0102862:	75 23                	jne    c0102887 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102867:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010286b:	c7 44 24 08 cc cc 10 	movl   $0xc010cccc,0x8(%esp)
c0102872:	c0 
c0102873:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010287a:	00 
c010287b:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c0102882:	e8 5f e5 ff ff       	call   c0100de6 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102887:	8b 45 08             	mov    0x8(%ebp),%eax
c010288a:	89 04 24             	mov    %eax,(%esp)
c010288d:	e8 59 fb ff ff       	call   c01023eb <trap_in_kernel>
c0102892:	85 c0                	test   %eax,%eax
c0102894:	74 23                	je     c01028b9 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102896:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102899:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010289d:	c7 44 24 08 ec cc 10 	movl   $0xc010ccec,0x8(%esp)
c01028a4:	c0 
c01028a5:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c01028ac:	00 
c01028ad:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c01028b4:	e8 2d e5 ff ff       	call   c0100de6 <__panic>
                }
                cprintf("killed by kernel.\n");
c01028b9:	c7 04 24 1a cd 10 c0 	movl   $0xc010cd1a,(%esp)
c01028c0:	e8 93 da ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028cc:	c7 44 24 08 30 cd 10 	movl   $0xc010cd30,0x8(%esp)
c01028d3:	c0 
c01028d4:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01028db:	00 
c01028dc:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c01028e3:	e8 fe e4 ff ff       	call   c0100de6 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028e8:	e9 dd 00 00 00       	jmp    c01029ca <trap_dispatch+0x204>
    case T_SYSCALL:
        syscall();
c01028ed:	e8 15 90 00 00       	call   c010b907 <syscall>
        break;
c01028f2:	e9 d3 00 00 00       	jmp    c01029ca <trap_dispatch+0x204>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
    	ticks ++;
c01028f7:	a1 78 1e 1b c0       	mov    0xc01b1e78,%eax
c01028fc:	83 c0 01             	add    $0x1,%eax
c01028ff:	a3 78 1e 1b c0       	mov    %eax,0xc01b1e78
    	sched_class_proc_tick(current);
c0102904:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102909:	89 04 24             	mov    %eax,(%esp)
c010290c:	e8 95 89 00 00       	call   c010b2a6 <sched_class_proc_tick>
        break;
c0102911:	e9 b4 00 00 00       	jmp    c01029ca <trap_dispatch+0x204>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102916:	e8 39 ee ff ff       	call   c0101754 <cons_getc>
c010291b:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010291e:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102922:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102926:	89 54 24 08          	mov    %edx,0x8(%esp)
c010292a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010292e:	c7 04 24 59 cd 10 c0 	movl   $0xc010cd59,(%esp)
c0102935:	e8 1e da ff ff       	call   c0100358 <cprintf>
        break;
c010293a:	e9 8b 00 00 00       	jmp    c01029ca <trap_dispatch+0x204>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c010293f:	e8 10 ee ff ff       	call   c0101754 <cons_getc>
c0102944:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102947:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c010294b:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c010294f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102953:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102957:	c7 04 24 6b cd 10 c0 	movl   $0xc010cd6b,(%esp)
c010295e:	e8 f5 d9 ff ff       	call   c0100358 <cprintf>
        break;
c0102963:	eb 65                	jmp    c01029ca <trap_dispatch+0x204>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102965:	c7 44 24 08 7a cd 10 	movl   $0xc010cd7a,0x8(%esp)
c010296c:	c0 
c010296d:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0102974:	00 
c0102975:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c010297c:	e8 65 e4 ff ff       	call   c0100de6 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102981:	8b 45 08             	mov    0x8(%ebp),%eax
c0102984:	89 04 24             	mov    %eax,(%esp)
c0102987:	e8 75 fa ff ff       	call   c0102401 <print_trapframe>
        if (current != NULL) {
c010298c:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102991:	85 c0                	test   %eax,%eax
c0102993:	74 18                	je     c01029ad <trap_dispatch+0x1e7>
            cprintf("unhandled trap.\n");
c0102995:	c7 04 24 8a cd 10 c0 	movl   $0xc010cd8a,(%esp)
c010299c:	e8 b7 d9 ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c01029a1:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029a8:	e8 16 75 00 00       	call   c0109ec3 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029ad:	c7 44 24 08 9b cd 10 	movl   $0xc010cd9b,0x8(%esp)
c01029b4:	c0 
c01029b5:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c01029bc:	00 
c01029bd:	c7 04 24 8e ca 10 c0 	movl   $0xc010ca8e,(%esp)
c01029c4:	e8 1d e4 ff ff       	call   c0100de6 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c01029c9:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c01029ca:	c9                   	leave  
c01029cb:	c3                   	ret    

c01029cc <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01029cc:	55                   	push   %ebp
c01029cd:	89 e5                	mov    %esp,%ebp
c01029cf:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c01029d2:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01029d7:	85 c0                	test   %eax,%eax
c01029d9:	75 0d                	jne    c01029e8 <trap+0x1c>
        trap_dispatch(tf);
c01029db:	8b 45 08             	mov    0x8(%ebp),%eax
c01029de:	89 04 24             	mov    %eax,(%esp)
c01029e1:	e8 e0 fd ff ff       	call   c01027c6 <trap_dispatch>
c01029e6:	eb 6c                	jmp    c0102a54 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01029e8:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01029ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c01029f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c01029f3:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01029f8:	8b 55 08             	mov    0x8(%ebp),%edx
c01029fb:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c01029fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a01:	89 04 24             	mov    %eax,(%esp)
c0102a04:	e8 e2 f9 ff ff       	call   c01023eb <trap_in_kernel>
c0102a09:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a0f:	89 04 24             	mov    %eax,(%esp)
c0102a12:	e8 af fd ff ff       	call   c01027c6 <trap_dispatch>
    
        current->tf = otf;
c0102a17:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102a1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a1f:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a22:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a26:	75 2c                	jne    c0102a54 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a28:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102a2d:	8b 40 44             	mov    0x44(%eax),%eax
c0102a30:	83 e0 01             	and    $0x1,%eax
c0102a33:	85 c0                	test   %eax,%eax
c0102a35:	74 0c                	je     c0102a43 <trap+0x77>
                do_exit(-E_KILLED);
c0102a37:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a3e:	e8 80 74 00 00       	call   c0109ec3 <do_exit>
            }
            if (current->need_resched) {
c0102a43:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102a48:	8b 40 10             	mov    0x10(%eax),%eax
c0102a4b:	85 c0                	test   %eax,%eax
c0102a4d:	74 05                	je     c0102a54 <trap+0x88>
                schedule();
c0102a4f:	e8 90 89 00 00       	call   c010b3e4 <schedule>
            }
        }
    }
}
c0102a54:	c9                   	leave  
c0102a55:	c3                   	ret    

c0102a56 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a56:	1e                   	push   %ds
    pushl %es
c0102a57:	06                   	push   %es
    pushl %fs
c0102a58:	0f a0                	push   %fs
    pushl %gs
c0102a5a:	0f a8                	push   %gs
    pushal
c0102a5c:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a5d:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102a62:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102a64:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a66:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a67:	e8 60 ff ff ff       	call   c01029cc <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a6c:	5c                   	pop    %esp

c0102a6d <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102a6d:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a6e:	0f a9                	pop    %gs
    popl %fs
c0102a70:	0f a1                	pop    %fs
    popl %es
c0102a72:	07                   	pop    %es
    popl %ds
c0102a73:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a74:	83 c4 08             	add    $0x8,%esp
    iret
c0102a77:	cf                   	iret   

c0102a78 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a78:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a7c:	e9 ec ff ff ff       	jmp    c0102a6d <__trapret>

c0102a81 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a81:	6a 00                	push   $0x0
  pushl $0
c0102a83:	6a 00                	push   $0x0
  jmp __alltraps
c0102a85:	e9 cc ff ff ff       	jmp    c0102a56 <__alltraps>

c0102a8a <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a8a:	6a 00                	push   $0x0
  pushl $1
c0102a8c:	6a 01                	push   $0x1
  jmp __alltraps
c0102a8e:	e9 c3 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102a93 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102a93:	6a 00                	push   $0x0
  pushl $2
c0102a95:	6a 02                	push   $0x2
  jmp __alltraps
c0102a97:	e9 ba ff ff ff       	jmp    c0102a56 <__alltraps>

c0102a9c <vector3>:
.globl vector3
vector3:
  pushl $0
c0102a9c:	6a 00                	push   $0x0
  pushl $3
c0102a9e:	6a 03                	push   $0x3
  jmp __alltraps
c0102aa0:	e9 b1 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102aa5 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102aa5:	6a 00                	push   $0x0
  pushl $4
c0102aa7:	6a 04                	push   $0x4
  jmp __alltraps
c0102aa9:	e9 a8 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102aae <vector5>:
.globl vector5
vector5:
  pushl $0
c0102aae:	6a 00                	push   $0x0
  pushl $5
c0102ab0:	6a 05                	push   $0x5
  jmp __alltraps
c0102ab2:	e9 9f ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ab7 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102ab7:	6a 00                	push   $0x0
  pushl $6
c0102ab9:	6a 06                	push   $0x6
  jmp __alltraps
c0102abb:	e9 96 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ac0 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ac0:	6a 00                	push   $0x0
  pushl $7
c0102ac2:	6a 07                	push   $0x7
  jmp __alltraps
c0102ac4:	e9 8d ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ac9 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102ac9:	6a 08                	push   $0x8
  jmp __alltraps
c0102acb:	e9 86 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ad0 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102ad0:	6a 09                	push   $0x9
  jmp __alltraps
c0102ad2:	e9 7f ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ad7 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102ad7:	6a 0a                	push   $0xa
  jmp __alltraps
c0102ad9:	e9 78 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ade <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ade:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ae0:	e9 71 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102ae5 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102ae5:	6a 0c                	push   $0xc
  jmp __alltraps
c0102ae7:	e9 6a ff ff ff       	jmp    c0102a56 <__alltraps>

c0102aec <vector13>:
.globl vector13
vector13:
  pushl $13
c0102aec:	6a 0d                	push   $0xd
  jmp __alltraps
c0102aee:	e9 63 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102af3 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102af3:	6a 0e                	push   $0xe
  jmp __alltraps
c0102af5:	e9 5c ff ff ff       	jmp    c0102a56 <__alltraps>

c0102afa <vector15>:
.globl vector15
vector15:
  pushl $0
c0102afa:	6a 00                	push   $0x0
  pushl $15
c0102afc:	6a 0f                	push   $0xf
  jmp __alltraps
c0102afe:	e9 53 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b03 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b03:	6a 00                	push   $0x0
  pushl $16
c0102b05:	6a 10                	push   $0x10
  jmp __alltraps
c0102b07:	e9 4a ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b0c <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b0c:	6a 11                	push   $0x11
  jmp __alltraps
c0102b0e:	e9 43 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b13 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b13:	6a 00                	push   $0x0
  pushl $18
c0102b15:	6a 12                	push   $0x12
  jmp __alltraps
c0102b17:	e9 3a ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b1c <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b1c:	6a 00                	push   $0x0
  pushl $19
c0102b1e:	6a 13                	push   $0x13
  jmp __alltraps
c0102b20:	e9 31 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b25 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b25:	6a 00                	push   $0x0
  pushl $20
c0102b27:	6a 14                	push   $0x14
  jmp __alltraps
c0102b29:	e9 28 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b2e <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b2e:	6a 00                	push   $0x0
  pushl $21
c0102b30:	6a 15                	push   $0x15
  jmp __alltraps
c0102b32:	e9 1f ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b37 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b37:	6a 00                	push   $0x0
  pushl $22
c0102b39:	6a 16                	push   $0x16
  jmp __alltraps
c0102b3b:	e9 16 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b40 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b40:	6a 00                	push   $0x0
  pushl $23
c0102b42:	6a 17                	push   $0x17
  jmp __alltraps
c0102b44:	e9 0d ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b49 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $24
c0102b4b:	6a 18                	push   $0x18
  jmp __alltraps
c0102b4d:	e9 04 ff ff ff       	jmp    c0102a56 <__alltraps>

c0102b52 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $25
c0102b54:	6a 19                	push   $0x19
  jmp __alltraps
c0102b56:	e9 fb fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b5b <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $26
c0102b5d:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b5f:	e9 f2 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b64 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $27
c0102b66:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b68:	e9 e9 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b6d <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $28
c0102b6f:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b71:	e9 e0 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b76 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $29
c0102b78:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b7a:	e9 d7 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b7f <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $30
c0102b81:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b83:	e9 ce fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b88 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $31
c0102b8a:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b8c:	e9 c5 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b91 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $32
c0102b93:	6a 20                	push   $0x20
  jmp __alltraps
c0102b95:	e9 bc fe ff ff       	jmp    c0102a56 <__alltraps>

c0102b9a <vector33>:
.globl vector33
vector33:
  pushl $0
c0102b9a:	6a 00                	push   $0x0
  pushl $33
c0102b9c:	6a 21                	push   $0x21
  jmp __alltraps
c0102b9e:	e9 b3 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102ba3 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102ba3:	6a 00                	push   $0x0
  pushl $34
c0102ba5:	6a 22                	push   $0x22
  jmp __alltraps
c0102ba7:	e9 aa fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bac <vector35>:
.globl vector35
vector35:
  pushl $0
c0102bac:	6a 00                	push   $0x0
  pushl $35
c0102bae:	6a 23                	push   $0x23
  jmp __alltraps
c0102bb0:	e9 a1 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bb5 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bb5:	6a 00                	push   $0x0
  pushl $36
c0102bb7:	6a 24                	push   $0x24
  jmp __alltraps
c0102bb9:	e9 98 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bbe <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bbe:	6a 00                	push   $0x0
  pushl $37
c0102bc0:	6a 25                	push   $0x25
  jmp __alltraps
c0102bc2:	e9 8f fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bc7 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bc7:	6a 00                	push   $0x0
  pushl $38
c0102bc9:	6a 26                	push   $0x26
  jmp __alltraps
c0102bcb:	e9 86 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bd0 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102bd0:	6a 00                	push   $0x0
  pushl $39
c0102bd2:	6a 27                	push   $0x27
  jmp __alltraps
c0102bd4:	e9 7d fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bd9 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102bd9:	6a 00                	push   $0x0
  pushl $40
c0102bdb:	6a 28                	push   $0x28
  jmp __alltraps
c0102bdd:	e9 74 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102be2 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102be2:	6a 00                	push   $0x0
  pushl $41
c0102be4:	6a 29                	push   $0x29
  jmp __alltraps
c0102be6:	e9 6b fe ff ff       	jmp    c0102a56 <__alltraps>

c0102beb <vector42>:
.globl vector42
vector42:
  pushl $0
c0102beb:	6a 00                	push   $0x0
  pushl $42
c0102bed:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102bef:	e9 62 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bf4 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102bf4:	6a 00                	push   $0x0
  pushl $43
c0102bf6:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102bf8:	e9 59 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102bfd <vector44>:
.globl vector44
vector44:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $44
c0102bff:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c01:	e9 50 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c06 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $45
c0102c08:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c0a:	e9 47 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c0f <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $46
c0102c11:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c13:	e9 3e fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c18 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $47
c0102c1a:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c1c:	e9 35 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c21 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $48
c0102c23:	6a 30                	push   $0x30
  jmp __alltraps
c0102c25:	e9 2c fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c2a <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $49
c0102c2c:	6a 31                	push   $0x31
  jmp __alltraps
c0102c2e:	e9 23 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c33 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $50
c0102c35:	6a 32                	push   $0x32
  jmp __alltraps
c0102c37:	e9 1a fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c3c <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $51
c0102c3e:	6a 33                	push   $0x33
  jmp __alltraps
c0102c40:	e9 11 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c45 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c45:	6a 00                	push   $0x0
  pushl $52
c0102c47:	6a 34                	push   $0x34
  jmp __alltraps
c0102c49:	e9 08 fe ff ff       	jmp    c0102a56 <__alltraps>

c0102c4e <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c4e:	6a 00                	push   $0x0
  pushl $53
c0102c50:	6a 35                	push   $0x35
  jmp __alltraps
c0102c52:	e9 ff fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c57 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c57:	6a 00                	push   $0x0
  pushl $54
c0102c59:	6a 36                	push   $0x36
  jmp __alltraps
c0102c5b:	e9 f6 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c60 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c60:	6a 00                	push   $0x0
  pushl $55
c0102c62:	6a 37                	push   $0x37
  jmp __alltraps
c0102c64:	e9 ed fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c69 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c69:	6a 00                	push   $0x0
  pushl $56
c0102c6b:	6a 38                	push   $0x38
  jmp __alltraps
c0102c6d:	e9 e4 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c72 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c72:	6a 00                	push   $0x0
  pushl $57
c0102c74:	6a 39                	push   $0x39
  jmp __alltraps
c0102c76:	e9 db fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c7b <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c7b:	6a 00                	push   $0x0
  pushl $58
c0102c7d:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c7f:	e9 d2 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c84 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c84:	6a 00                	push   $0x0
  pushl $59
c0102c86:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c88:	e9 c9 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c8d <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c8d:	6a 00                	push   $0x0
  pushl $60
c0102c8f:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102c91:	e9 c0 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c96 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102c96:	6a 00                	push   $0x0
  pushl $61
c0102c98:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102c9a:	e9 b7 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102c9f <vector62>:
.globl vector62
vector62:
  pushl $0
c0102c9f:	6a 00                	push   $0x0
  pushl $62
c0102ca1:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102ca3:	e9 ae fd ff ff       	jmp    c0102a56 <__alltraps>

c0102ca8 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102ca8:	6a 00                	push   $0x0
  pushl $63
c0102caa:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102cac:	e9 a5 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cb1 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cb1:	6a 00                	push   $0x0
  pushl $64
c0102cb3:	6a 40                	push   $0x40
  jmp __alltraps
c0102cb5:	e9 9c fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cba <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cba:	6a 00                	push   $0x0
  pushl $65
c0102cbc:	6a 41                	push   $0x41
  jmp __alltraps
c0102cbe:	e9 93 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cc3 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cc3:	6a 00                	push   $0x0
  pushl $66
c0102cc5:	6a 42                	push   $0x42
  jmp __alltraps
c0102cc7:	e9 8a fd ff ff       	jmp    c0102a56 <__alltraps>

c0102ccc <vector67>:
.globl vector67
vector67:
  pushl $0
c0102ccc:	6a 00                	push   $0x0
  pushl $67
c0102cce:	6a 43                	push   $0x43
  jmp __alltraps
c0102cd0:	e9 81 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cd5 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102cd5:	6a 00                	push   $0x0
  pushl $68
c0102cd7:	6a 44                	push   $0x44
  jmp __alltraps
c0102cd9:	e9 78 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cde <vector69>:
.globl vector69
vector69:
  pushl $0
c0102cde:	6a 00                	push   $0x0
  pushl $69
c0102ce0:	6a 45                	push   $0x45
  jmp __alltraps
c0102ce2:	e9 6f fd ff ff       	jmp    c0102a56 <__alltraps>

c0102ce7 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102ce7:	6a 00                	push   $0x0
  pushl $70
c0102ce9:	6a 46                	push   $0x46
  jmp __alltraps
c0102ceb:	e9 66 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cf0 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102cf0:	6a 00                	push   $0x0
  pushl $71
c0102cf2:	6a 47                	push   $0x47
  jmp __alltraps
c0102cf4:	e9 5d fd ff ff       	jmp    c0102a56 <__alltraps>

c0102cf9 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102cf9:	6a 00                	push   $0x0
  pushl $72
c0102cfb:	6a 48                	push   $0x48
  jmp __alltraps
c0102cfd:	e9 54 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d02 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d02:	6a 00                	push   $0x0
  pushl $73
c0102d04:	6a 49                	push   $0x49
  jmp __alltraps
c0102d06:	e9 4b fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d0b <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d0b:	6a 00                	push   $0x0
  pushl $74
c0102d0d:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d0f:	e9 42 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d14 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d14:	6a 00                	push   $0x0
  pushl $75
c0102d16:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d18:	e9 39 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d1d <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d1d:	6a 00                	push   $0x0
  pushl $76
c0102d1f:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d21:	e9 30 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d26 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d26:	6a 00                	push   $0x0
  pushl $77
c0102d28:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d2a:	e9 27 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d2f <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d2f:	6a 00                	push   $0x0
  pushl $78
c0102d31:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d33:	e9 1e fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d38 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d38:	6a 00                	push   $0x0
  pushl $79
c0102d3a:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d3c:	e9 15 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d41 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d41:	6a 00                	push   $0x0
  pushl $80
c0102d43:	6a 50                	push   $0x50
  jmp __alltraps
c0102d45:	e9 0c fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d4a <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d4a:	6a 00                	push   $0x0
  pushl $81
c0102d4c:	6a 51                	push   $0x51
  jmp __alltraps
c0102d4e:	e9 03 fd ff ff       	jmp    c0102a56 <__alltraps>

c0102d53 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d53:	6a 00                	push   $0x0
  pushl $82
c0102d55:	6a 52                	push   $0x52
  jmp __alltraps
c0102d57:	e9 fa fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d5c <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d5c:	6a 00                	push   $0x0
  pushl $83
c0102d5e:	6a 53                	push   $0x53
  jmp __alltraps
c0102d60:	e9 f1 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d65 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d65:	6a 00                	push   $0x0
  pushl $84
c0102d67:	6a 54                	push   $0x54
  jmp __alltraps
c0102d69:	e9 e8 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d6e <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d6e:	6a 00                	push   $0x0
  pushl $85
c0102d70:	6a 55                	push   $0x55
  jmp __alltraps
c0102d72:	e9 df fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d77 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d77:	6a 00                	push   $0x0
  pushl $86
c0102d79:	6a 56                	push   $0x56
  jmp __alltraps
c0102d7b:	e9 d6 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d80 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d80:	6a 00                	push   $0x0
  pushl $87
c0102d82:	6a 57                	push   $0x57
  jmp __alltraps
c0102d84:	e9 cd fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d89 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d89:	6a 00                	push   $0x0
  pushl $88
c0102d8b:	6a 58                	push   $0x58
  jmp __alltraps
c0102d8d:	e9 c4 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d92 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102d92:	6a 00                	push   $0x0
  pushl $89
c0102d94:	6a 59                	push   $0x59
  jmp __alltraps
c0102d96:	e9 bb fc ff ff       	jmp    c0102a56 <__alltraps>

c0102d9b <vector90>:
.globl vector90
vector90:
  pushl $0
c0102d9b:	6a 00                	push   $0x0
  pushl $90
c0102d9d:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102d9f:	e9 b2 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102da4 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102da4:	6a 00                	push   $0x0
  pushl $91
c0102da6:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102da8:	e9 a9 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dad <vector92>:
.globl vector92
vector92:
  pushl $0
c0102dad:	6a 00                	push   $0x0
  pushl $92
c0102daf:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102db1:	e9 a0 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102db6 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102db6:	6a 00                	push   $0x0
  pushl $93
c0102db8:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102dba:	e9 97 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dbf <vector94>:
.globl vector94
vector94:
  pushl $0
c0102dbf:	6a 00                	push   $0x0
  pushl $94
c0102dc1:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dc3:	e9 8e fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dc8 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102dc8:	6a 00                	push   $0x0
  pushl $95
c0102dca:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102dcc:	e9 85 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dd1 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102dd1:	6a 00                	push   $0x0
  pushl $96
c0102dd3:	6a 60                	push   $0x60
  jmp __alltraps
c0102dd5:	e9 7c fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dda <vector97>:
.globl vector97
vector97:
  pushl $0
c0102dda:	6a 00                	push   $0x0
  pushl $97
c0102ddc:	6a 61                	push   $0x61
  jmp __alltraps
c0102dde:	e9 73 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102de3 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102de3:	6a 00                	push   $0x0
  pushl $98
c0102de5:	6a 62                	push   $0x62
  jmp __alltraps
c0102de7:	e9 6a fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dec <vector99>:
.globl vector99
vector99:
  pushl $0
c0102dec:	6a 00                	push   $0x0
  pushl $99
c0102dee:	6a 63                	push   $0x63
  jmp __alltraps
c0102df0:	e9 61 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102df5 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102df5:	6a 00                	push   $0x0
  pushl $100
c0102df7:	6a 64                	push   $0x64
  jmp __alltraps
c0102df9:	e9 58 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102dfe <vector101>:
.globl vector101
vector101:
  pushl $0
c0102dfe:	6a 00                	push   $0x0
  pushl $101
c0102e00:	6a 65                	push   $0x65
  jmp __alltraps
c0102e02:	e9 4f fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e07 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e07:	6a 00                	push   $0x0
  pushl $102
c0102e09:	6a 66                	push   $0x66
  jmp __alltraps
c0102e0b:	e9 46 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e10 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e10:	6a 00                	push   $0x0
  pushl $103
c0102e12:	6a 67                	push   $0x67
  jmp __alltraps
c0102e14:	e9 3d fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e19 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e19:	6a 00                	push   $0x0
  pushl $104
c0102e1b:	6a 68                	push   $0x68
  jmp __alltraps
c0102e1d:	e9 34 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e22 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e22:	6a 00                	push   $0x0
  pushl $105
c0102e24:	6a 69                	push   $0x69
  jmp __alltraps
c0102e26:	e9 2b fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e2b <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e2b:	6a 00                	push   $0x0
  pushl $106
c0102e2d:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e2f:	e9 22 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e34 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e34:	6a 00                	push   $0x0
  pushl $107
c0102e36:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e38:	e9 19 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e3d <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e3d:	6a 00                	push   $0x0
  pushl $108
c0102e3f:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e41:	e9 10 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e46 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e46:	6a 00                	push   $0x0
  pushl $109
c0102e48:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e4a:	e9 07 fc ff ff       	jmp    c0102a56 <__alltraps>

c0102e4f <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e4f:	6a 00                	push   $0x0
  pushl $110
c0102e51:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e53:	e9 fe fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e58 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e58:	6a 00                	push   $0x0
  pushl $111
c0102e5a:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e5c:	e9 f5 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e61 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e61:	6a 00                	push   $0x0
  pushl $112
c0102e63:	6a 70                	push   $0x70
  jmp __alltraps
c0102e65:	e9 ec fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e6a <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e6a:	6a 00                	push   $0x0
  pushl $113
c0102e6c:	6a 71                	push   $0x71
  jmp __alltraps
c0102e6e:	e9 e3 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e73 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e73:	6a 00                	push   $0x0
  pushl $114
c0102e75:	6a 72                	push   $0x72
  jmp __alltraps
c0102e77:	e9 da fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e7c <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e7c:	6a 00                	push   $0x0
  pushl $115
c0102e7e:	6a 73                	push   $0x73
  jmp __alltraps
c0102e80:	e9 d1 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e85 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e85:	6a 00                	push   $0x0
  pushl $116
c0102e87:	6a 74                	push   $0x74
  jmp __alltraps
c0102e89:	e9 c8 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e8e <vector117>:
.globl vector117
vector117:
  pushl $0
c0102e8e:	6a 00                	push   $0x0
  pushl $117
c0102e90:	6a 75                	push   $0x75
  jmp __alltraps
c0102e92:	e9 bf fb ff ff       	jmp    c0102a56 <__alltraps>

c0102e97 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102e97:	6a 00                	push   $0x0
  pushl $118
c0102e99:	6a 76                	push   $0x76
  jmp __alltraps
c0102e9b:	e9 b6 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ea0 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102ea0:	6a 00                	push   $0x0
  pushl $119
c0102ea2:	6a 77                	push   $0x77
  jmp __alltraps
c0102ea4:	e9 ad fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ea9 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102ea9:	6a 00                	push   $0x0
  pushl $120
c0102eab:	6a 78                	push   $0x78
  jmp __alltraps
c0102ead:	e9 a4 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102eb2 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102eb2:	6a 00                	push   $0x0
  pushl $121
c0102eb4:	6a 79                	push   $0x79
  jmp __alltraps
c0102eb6:	e9 9b fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ebb <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ebb:	6a 00                	push   $0x0
  pushl $122
c0102ebd:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102ebf:	e9 92 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ec4 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102ec4:	6a 00                	push   $0x0
  pushl $123
c0102ec6:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102ec8:	e9 89 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ecd <vector124>:
.globl vector124
vector124:
  pushl $0
c0102ecd:	6a 00                	push   $0x0
  pushl $124
c0102ecf:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102ed1:	e9 80 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ed6 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102ed6:	6a 00                	push   $0x0
  pushl $125
c0102ed8:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102eda:	e9 77 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102edf <vector126>:
.globl vector126
vector126:
  pushl $0
c0102edf:	6a 00                	push   $0x0
  pushl $126
c0102ee1:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102ee3:	e9 6e fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ee8 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102ee8:	6a 00                	push   $0x0
  pushl $127
c0102eea:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102eec:	e9 65 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102ef1 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102ef1:	6a 00                	push   $0x0
  pushl $128
c0102ef3:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102ef8:	e9 59 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102efd <vector129>:
.globl vector129
vector129:
  pushl $0
c0102efd:	6a 00                	push   $0x0
  pushl $129
c0102eff:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f04:	e9 4d fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f09 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f09:	6a 00                	push   $0x0
  pushl $130
c0102f0b:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f10:	e9 41 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f15 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f15:	6a 00                	push   $0x0
  pushl $131
c0102f17:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f1c:	e9 35 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f21 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f21:	6a 00                	push   $0x0
  pushl $132
c0102f23:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f28:	e9 29 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f2d <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f2d:	6a 00                	push   $0x0
  pushl $133
c0102f2f:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f34:	e9 1d fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f39 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f39:	6a 00                	push   $0x0
  pushl $134
c0102f3b:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f40:	e9 11 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f45 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f45:	6a 00                	push   $0x0
  pushl $135
c0102f47:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f4c:	e9 05 fb ff ff       	jmp    c0102a56 <__alltraps>

c0102f51 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f51:	6a 00                	push   $0x0
  pushl $136
c0102f53:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f58:	e9 f9 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102f5d <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f5d:	6a 00                	push   $0x0
  pushl $137
c0102f5f:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f64:	e9 ed fa ff ff       	jmp    c0102a56 <__alltraps>

c0102f69 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f69:	6a 00                	push   $0x0
  pushl $138
c0102f6b:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f70:	e9 e1 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102f75 <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f75:	6a 00                	push   $0x0
  pushl $139
c0102f77:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f7c:	e9 d5 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102f81 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f81:	6a 00                	push   $0x0
  pushl $140
c0102f83:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f88:	e9 c9 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102f8d <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f8d:	6a 00                	push   $0x0
  pushl $141
c0102f8f:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102f94:	e9 bd fa ff ff       	jmp    c0102a56 <__alltraps>

c0102f99 <vector142>:
.globl vector142
vector142:
  pushl $0
c0102f99:	6a 00                	push   $0x0
  pushl $142
c0102f9b:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fa0:	e9 b1 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fa5 <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fa5:	6a 00                	push   $0x0
  pushl $143
c0102fa7:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fac:	e9 a5 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fb1 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fb1:	6a 00                	push   $0x0
  pushl $144
c0102fb3:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fb8:	e9 99 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fbd <vector145>:
.globl vector145
vector145:
  pushl $0
c0102fbd:	6a 00                	push   $0x0
  pushl $145
c0102fbf:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fc4:	e9 8d fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fc9 <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fc9:	6a 00                	push   $0x0
  pushl $146
c0102fcb:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102fd0:	e9 81 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fd5 <vector147>:
.globl vector147
vector147:
  pushl $0
c0102fd5:	6a 00                	push   $0x0
  pushl $147
c0102fd7:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102fdc:	e9 75 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fe1 <vector148>:
.globl vector148
vector148:
  pushl $0
c0102fe1:	6a 00                	push   $0x0
  pushl $148
c0102fe3:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102fe8:	e9 69 fa ff ff       	jmp    c0102a56 <__alltraps>

c0102fed <vector149>:
.globl vector149
vector149:
  pushl $0
c0102fed:	6a 00                	push   $0x0
  pushl $149
c0102fef:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0102ff4:	e9 5d fa ff ff       	jmp    c0102a56 <__alltraps>

c0102ff9 <vector150>:
.globl vector150
vector150:
  pushl $0
c0102ff9:	6a 00                	push   $0x0
  pushl $150
c0102ffb:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103000:	e9 51 fa ff ff       	jmp    c0102a56 <__alltraps>

c0103005 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103005:	6a 00                	push   $0x0
  pushl $151
c0103007:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c010300c:	e9 45 fa ff ff       	jmp    c0102a56 <__alltraps>

c0103011 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103011:	6a 00                	push   $0x0
  pushl $152
c0103013:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103018:	e9 39 fa ff ff       	jmp    c0102a56 <__alltraps>

c010301d <vector153>:
.globl vector153
vector153:
  pushl $0
c010301d:	6a 00                	push   $0x0
  pushl $153
c010301f:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103024:	e9 2d fa ff ff       	jmp    c0102a56 <__alltraps>

c0103029 <vector154>:
.globl vector154
vector154:
  pushl $0
c0103029:	6a 00                	push   $0x0
  pushl $154
c010302b:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103030:	e9 21 fa ff ff       	jmp    c0102a56 <__alltraps>

c0103035 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103035:	6a 00                	push   $0x0
  pushl $155
c0103037:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010303c:	e9 15 fa ff ff       	jmp    c0102a56 <__alltraps>

c0103041 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103041:	6a 00                	push   $0x0
  pushl $156
c0103043:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103048:	e9 09 fa ff ff       	jmp    c0102a56 <__alltraps>

c010304d <vector157>:
.globl vector157
vector157:
  pushl $0
c010304d:	6a 00                	push   $0x0
  pushl $157
c010304f:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103054:	e9 fd f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103059 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103059:	6a 00                	push   $0x0
  pushl $158
c010305b:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103060:	e9 f1 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103065 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103065:	6a 00                	push   $0x0
  pushl $159
c0103067:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010306c:	e9 e5 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103071 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103071:	6a 00                	push   $0x0
  pushl $160
c0103073:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103078:	e9 d9 f9 ff ff       	jmp    c0102a56 <__alltraps>

c010307d <vector161>:
.globl vector161
vector161:
  pushl $0
c010307d:	6a 00                	push   $0x0
  pushl $161
c010307f:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103084:	e9 cd f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103089 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103089:	6a 00                	push   $0x0
  pushl $162
c010308b:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103090:	e9 c1 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103095 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103095:	6a 00                	push   $0x0
  pushl $163
c0103097:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010309c:	e9 b5 f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030a1 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030a1:	6a 00                	push   $0x0
  pushl $164
c01030a3:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030a8:	e9 a9 f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030ad <vector165>:
.globl vector165
vector165:
  pushl $0
c01030ad:	6a 00                	push   $0x0
  pushl $165
c01030af:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030b4:	e9 9d f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030b9 <vector166>:
.globl vector166
vector166:
  pushl $0
c01030b9:	6a 00                	push   $0x0
  pushl $166
c01030bb:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030c0:	e9 91 f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030c5 <vector167>:
.globl vector167
vector167:
  pushl $0
c01030c5:	6a 00                	push   $0x0
  pushl $167
c01030c7:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01030cc:	e9 85 f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030d1 <vector168>:
.globl vector168
vector168:
  pushl $0
c01030d1:	6a 00                	push   $0x0
  pushl $168
c01030d3:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01030d8:	e9 79 f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030dd <vector169>:
.globl vector169
vector169:
  pushl $0
c01030dd:	6a 00                	push   $0x0
  pushl $169
c01030df:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030e4:	e9 6d f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030e9 <vector170>:
.globl vector170
vector170:
  pushl $0
c01030e9:	6a 00                	push   $0x0
  pushl $170
c01030eb:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01030f0:	e9 61 f9 ff ff       	jmp    c0102a56 <__alltraps>

c01030f5 <vector171>:
.globl vector171
vector171:
  pushl $0
c01030f5:	6a 00                	push   $0x0
  pushl $171
c01030f7:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01030fc:	e9 55 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103101 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103101:	6a 00                	push   $0x0
  pushl $172
c0103103:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103108:	e9 49 f9 ff ff       	jmp    c0102a56 <__alltraps>

c010310d <vector173>:
.globl vector173
vector173:
  pushl $0
c010310d:	6a 00                	push   $0x0
  pushl $173
c010310f:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103114:	e9 3d f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103119 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103119:	6a 00                	push   $0x0
  pushl $174
c010311b:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103120:	e9 31 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103125 <vector175>:
.globl vector175
vector175:
  pushl $0
c0103125:	6a 00                	push   $0x0
  pushl $175
c0103127:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c010312c:	e9 25 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103131 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103131:	6a 00                	push   $0x0
  pushl $176
c0103133:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103138:	e9 19 f9 ff ff       	jmp    c0102a56 <__alltraps>

c010313d <vector177>:
.globl vector177
vector177:
  pushl $0
c010313d:	6a 00                	push   $0x0
  pushl $177
c010313f:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103144:	e9 0d f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103149 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103149:	6a 00                	push   $0x0
  pushl $178
c010314b:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103150:	e9 01 f9 ff ff       	jmp    c0102a56 <__alltraps>

c0103155 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103155:	6a 00                	push   $0x0
  pushl $179
c0103157:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010315c:	e9 f5 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103161 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103161:	6a 00                	push   $0x0
  pushl $180
c0103163:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103168:	e9 e9 f8 ff ff       	jmp    c0102a56 <__alltraps>

c010316d <vector181>:
.globl vector181
vector181:
  pushl $0
c010316d:	6a 00                	push   $0x0
  pushl $181
c010316f:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103174:	e9 dd f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103179 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103179:	6a 00                	push   $0x0
  pushl $182
c010317b:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103180:	e9 d1 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103185 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103185:	6a 00                	push   $0x0
  pushl $183
c0103187:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010318c:	e9 c5 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103191 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103191:	6a 00                	push   $0x0
  pushl $184
c0103193:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103198:	e9 b9 f8 ff ff       	jmp    c0102a56 <__alltraps>

c010319d <vector185>:
.globl vector185
vector185:
  pushl $0
c010319d:	6a 00                	push   $0x0
  pushl $185
c010319f:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031a4:	e9 ad f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031a9 <vector186>:
.globl vector186
vector186:
  pushl $0
c01031a9:	6a 00                	push   $0x0
  pushl $186
c01031ab:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031b0:	e9 a1 f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031b5 <vector187>:
.globl vector187
vector187:
  pushl $0
c01031b5:	6a 00                	push   $0x0
  pushl $187
c01031b7:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031bc:	e9 95 f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031c1 <vector188>:
.globl vector188
vector188:
  pushl $0
c01031c1:	6a 00                	push   $0x0
  pushl $188
c01031c3:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031c8:	e9 89 f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031cd <vector189>:
.globl vector189
vector189:
  pushl $0
c01031cd:	6a 00                	push   $0x0
  pushl $189
c01031cf:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01031d4:	e9 7d f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031d9 <vector190>:
.globl vector190
vector190:
  pushl $0
c01031d9:	6a 00                	push   $0x0
  pushl $190
c01031db:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031e0:	e9 71 f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031e5 <vector191>:
.globl vector191
vector191:
  pushl $0
c01031e5:	6a 00                	push   $0x0
  pushl $191
c01031e7:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01031ec:	e9 65 f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031f1 <vector192>:
.globl vector192
vector192:
  pushl $0
c01031f1:	6a 00                	push   $0x0
  pushl $192
c01031f3:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01031f8:	e9 59 f8 ff ff       	jmp    c0102a56 <__alltraps>

c01031fd <vector193>:
.globl vector193
vector193:
  pushl $0
c01031fd:	6a 00                	push   $0x0
  pushl $193
c01031ff:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103204:	e9 4d f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103209 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103209:	6a 00                	push   $0x0
  pushl $194
c010320b:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103210:	e9 41 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103215 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103215:	6a 00                	push   $0x0
  pushl $195
c0103217:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c010321c:	e9 35 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103221 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103221:	6a 00                	push   $0x0
  pushl $196
c0103223:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103228:	e9 29 f8 ff ff       	jmp    c0102a56 <__alltraps>

c010322d <vector197>:
.globl vector197
vector197:
  pushl $0
c010322d:	6a 00                	push   $0x0
  pushl $197
c010322f:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103234:	e9 1d f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103239 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103239:	6a 00                	push   $0x0
  pushl $198
c010323b:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103240:	e9 11 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103245 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103245:	6a 00                	push   $0x0
  pushl $199
c0103247:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010324c:	e9 05 f8 ff ff       	jmp    c0102a56 <__alltraps>

c0103251 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103251:	6a 00                	push   $0x0
  pushl $200
c0103253:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103258:	e9 f9 f7 ff ff       	jmp    c0102a56 <__alltraps>

c010325d <vector201>:
.globl vector201
vector201:
  pushl $0
c010325d:	6a 00                	push   $0x0
  pushl $201
c010325f:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103264:	e9 ed f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103269 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103269:	6a 00                	push   $0x0
  pushl $202
c010326b:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103270:	e9 e1 f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103275 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103275:	6a 00                	push   $0x0
  pushl $203
c0103277:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010327c:	e9 d5 f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103281 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103281:	6a 00                	push   $0x0
  pushl $204
c0103283:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103288:	e9 c9 f7 ff ff       	jmp    c0102a56 <__alltraps>

c010328d <vector205>:
.globl vector205
vector205:
  pushl $0
c010328d:	6a 00                	push   $0x0
  pushl $205
c010328f:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103294:	e9 bd f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103299 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103299:	6a 00                	push   $0x0
  pushl $206
c010329b:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032a0:	e9 b1 f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032a5 <vector207>:
.globl vector207
vector207:
  pushl $0
c01032a5:	6a 00                	push   $0x0
  pushl $207
c01032a7:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032ac:	e9 a5 f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032b1 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032b1:	6a 00                	push   $0x0
  pushl $208
c01032b3:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032b8:	e9 99 f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032bd <vector209>:
.globl vector209
vector209:
  pushl $0
c01032bd:	6a 00                	push   $0x0
  pushl $209
c01032bf:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032c4:	e9 8d f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032c9 <vector210>:
.globl vector210
vector210:
  pushl $0
c01032c9:	6a 00                	push   $0x0
  pushl $210
c01032cb:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01032d0:	e9 81 f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032d5 <vector211>:
.globl vector211
vector211:
  pushl $0
c01032d5:	6a 00                	push   $0x0
  pushl $211
c01032d7:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01032dc:	e9 75 f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032e1 <vector212>:
.globl vector212
vector212:
  pushl $0
c01032e1:	6a 00                	push   $0x0
  pushl $212
c01032e3:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032e8:	e9 69 f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032ed <vector213>:
.globl vector213
vector213:
  pushl $0
c01032ed:	6a 00                	push   $0x0
  pushl $213
c01032ef:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01032f4:	e9 5d f7 ff ff       	jmp    c0102a56 <__alltraps>

c01032f9 <vector214>:
.globl vector214
vector214:
  pushl $0
c01032f9:	6a 00                	push   $0x0
  pushl $214
c01032fb:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103300:	e9 51 f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103305 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103305:	6a 00                	push   $0x0
  pushl $215
c0103307:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c010330c:	e9 45 f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103311 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103311:	6a 00                	push   $0x0
  pushl $216
c0103313:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103318:	e9 39 f7 ff ff       	jmp    c0102a56 <__alltraps>

c010331d <vector217>:
.globl vector217
vector217:
  pushl $0
c010331d:	6a 00                	push   $0x0
  pushl $217
c010331f:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103324:	e9 2d f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103329 <vector218>:
.globl vector218
vector218:
  pushl $0
c0103329:	6a 00                	push   $0x0
  pushl $218
c010332b:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103330:	e9 21 f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103335 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103335:	6a 00                	push   $0x0
  pushl $219
c0103337:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010333c:	e9 15 f7 ff ff       	jmp    c0102a56 <__alltraps>

c0103341 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103341:	6a 00                	push   $0x0
  pushl $220
c0103343:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103348:	e9 09 f7 ff ff       	jmp    c0102a56 <__alltraps>

c010334d <vector221>:
.globl vector221
vector221:
  pushl $0
c010334d:	6a 00                	push   $0x0
  pushl $221
c010334f:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103354:	e9 fd f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103359 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103359:	6a 00                	push   $0x0
  pushl $222
c010335b:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103360:	e9 f1 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103365 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103365:	6a 00                	push   $0x0
  pushl $223
c0103367:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010336c:	e9 e5 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103371 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103371:	6a 00                	push   $0x0
  pushl $224
c0103373:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103378:	e9 d9 f6 ff ff       	jmp    c0102a56 <__alltraps>

c010337d <vector225>:
.globl vector225
vector225:
  pushl $0
c010337d:	6a 00                	push   $0x0
  pushl $225
c010337f:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103384:	e9 cd f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103389 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103389:	6a 00                	push   $0x0
  pushl $226
c010338b:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103390:	e9 c1 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103395 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103395:	6a 00                	push   $0x0
  pushl $227
c0103397:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010339c:	e9 b5 f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033a1 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033a1:	6a 00                	push   $0x0
  pushl $228
c01033a3:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033a8:	e9 a9 f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033ad <vector229>:
.globl vector229
vector229:
  pushl $0
c01033ad:	6a 00                	push   $0x0
  pushl $229
c01033af:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033b4:	e9 9d f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033b9 <vector230>:
.globl vector230
vector230:
  pushl $0
c01033b9:	6a 00                	push   $0x0
  pushl $230
c01033bb:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033c0:	e9 91 f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033c5 <vector231>:
.globl vector231
vector231:
  pushl $0
c01033c5:	6a 00                	push   $0x0
  pushl $231
c01033c7:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01033cc:	e9 85 f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033d1 <vector232>:
.globl vector232
vector232:
  pushl $0
c01033d1:	6a 00                	push   $0x0
  pushl $232
c01033d3:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01033d8:	e9 79 f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033dd <vector233>:
.globl vector233
vector233:
  pushl $0
c01033dd:	6a 00                	push   $0x0
  pushl $233
c01033df:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033e4:	e9 6d f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033e9 <vector234>:
.globl vector234
vector234:
  pushl $0
c01033e9:	6a 00                	push   $0x0
  pushl $234
c01033eb:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01033f0:	e9 61 f6 ff ff       	jmp    c0102a56 <__alltraps>

c01033f5 <vector235>:
.globl vector235
vector235:
  pushl $0
c01033f5:	6a 00                	push   $0x0
  pushl $235
c01033f7:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01033fc:	e9 55 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103401 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103401:	6a 00                	push   $0x0
  pushl $236
c0103403:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103408:	e9 49 f6 ff ff       	jmp    c0102a56 <__alltraps>

c010340d <vector237>:
.globl vector237
vector237:
  pushl $0
c010340d:	6a 00                	push   $0x0
  pushl $237
c010340f:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103414:	e9 3d f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103419 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103419:	6a 00                	push   $0x0
  pushl $238
c010341b:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103420:	e9 31 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103425 <vector239>:
.globl vector239
vector239:
  pushl $0
c0103425:	6a 00                	push   $0x0
  pushl $239
c0103427:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c010342c:	e9 25 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103431 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103431:	6a 00                	push   $0x0
  pushl $240
c0103433:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103438:	e9 19 f6 ff ff       	jmp    c0102a56 <__alltraps>

c010343d <vector241>:
.globl vector241
vector241:
  pushl $0
c010343d:	6a 00                	push   $0x0
  pushl $241
c010343f:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103444:	e9 0d f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103449 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103449:	6a 00                	push   $0x0
  pushl $242
c010344b:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103450:	e9 01 f6 ff ff       	jmp    c0102a56 <__alltraps>

c0103455 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103455:	6a 00                	push   $0x0
  pushl $243
c0103457:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010345c:	e9 f5 f5 ff ff       	jmp    c0102a56 <__alltraps>

c0103461 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103461:	6a 00                	push   $0x0
  pushl $244
c0103463:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103468:	e9 e9 f5 ff ff       	jmp    c0102a56 <__alltraps>

c010346d <vector245>:
.globl vector245
vector245:
  pushl $0
c010346d:	6a 00                	push   $0x0
  pushl $245
c010346f:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103474:	e9 dd f5 ff ff       	jmp    c0102a56 <__alltraps>

c0103479 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103479:	6a 00                	push   $0x0
  pushl $246
c010347b:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103480:	e9 d1 f5 ff ff       	jmp    c0102a56 <__alltraps>

c0103485 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103485:	6a 00                	push   $0x0
  pushl $247
c0103487:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010348c:	e9 c5 f5 ff ff       	jmp    c0102a56 <__alltraps>

c0103491 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103491:	6a 00                	push   $0x0
  pushl $248
c0103493:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103498:	e9 b9 f5 ff ff       	jmp    c0102a56 <__alltraps>

c010349d <vector249>:
.globl vector249
vector249:
  pushl $0
c010349d:	6a 00                	push   $0x0
  pushl $249
c010349f:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034a4:	e9 ad f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034a9 <vector250>:
.globl vector250
vector250:
  pushl $0
c01034a9:	6a 00                	push   $0x0
  pushl $250
c01034ab:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034b0:	e9 a1 f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034b5 <vector251>:
.globl vector251
vector251:
  pushl $0
c01034b5:	6a 00                	push   $0x0
  pushl $251
c01034b7:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034bc:	e9 95 f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034c1 <vector252>:
.globl vector252
vector252:
  pushl $0
c01034c1:	6a 00                	push   $0x0
  pushl $252
c01034c3:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034c8:	e9 89 f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034cd <vector253>:
.globl vector253
vector253:
  pushl $0
c01034cd:	6a 00                	push   $0x0
  pushl $253
c01034cf:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01034d4:	e9 7d f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034d9 <vector254>:
.globl vector254
vector254:
  pushl $0
c01034d9:	6a 00                	push   $0x0
  pushl $254
c01034db:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034e0:	e9 71 f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034e5 <vector255>:
.globl vector255
vector255:
  pushl $0
c01034e5:	6a 00                	push   $0x0
  pushl $255
c01034e7:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01034ec:	e9 65 f5 ff ff       	jmp    c0102a56 <__alltraps>

c01034f1 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01034f1:	55                   	push   %ebp
c01034f2:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01034f4:	8b 55 08             	mov    0x8(%ebp),%edx
c01034f7:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01034fc:	29 c2                	sub    %eax,%edx
c01034fe:	89 d0                	mov    %edx,%eax
c0103500:	c1 f8 05             	sar    $0x5,%eax
}
c0103503:	5d                   	pop    %ebp
c0103504:	c3                   	ret    

c0103505 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0103505:	55                   	push   %ebp
c0103506:	89 e5                	mov    %esp,%ebp
c0103508:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010350b:	8b 45 08             	mov    0x8(%ebp),%eax
c010350e:	89 04 24             	mov    %eax,(%esp)
c0103511:	e8 db ff ff ff       	call   c01034f1 <page2ppn>
c0103516:	c1 e0 0c             	shl    $0xc,%eax
}
c0103519:	c9                   	leave  
c010351a:	c3                   	ret    

c010351b <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c010351b:	55                   	push   %ebp
c010351c:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010351e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103521:	8b 00                	mov    (%eax),%eax
}
c0103523:	5d                   	pop    %ebp
c0103524:	c3                   	ret    

c0103525 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0103525:	55                   	push   %ebp
c0103526:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0103528:	8b 45 08             	mov    0x8(%ebp),%eax
c010352b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010352e:	89 10                	mov    %edx,(%eax)
}
c0103530:	5d                   	pop    %ebp
c0103531:	c3                   	ret    

c0103532 <default_init>:
//free_list 管理区描述符指针，指向page
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103532:	55                   	push   %ebp
c0103533:	89 e5                	mov    %esp,%ebp
c0103535:	83 ec 10             	sub    $0x10,%esp
c0103538:	c7 45 fc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010353f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103542:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103545:	89 50 04             	mov    %edx,0x4(%eax)
c0103548:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010354b:	8b 50 04             	mov    0x4(%eax),%edx
c010354e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103551:	89 10                	mov    %edx,(%eax)
    list_init(&free_list); //指向页框块的双向循环链表free_list初始化
    nr_free = 0; //开始时空闲页框块总数为 0（未形成双向循环链表）
c0103553:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c010355a:	00 00 00 
}
c010355d:	c9                   	leave  
c010355e:	c3                   	ret    

c010355f <default_init_memmap>:
//使用参数 每个连续地址空闲块到起始页, 页个数初始化双向循环链表
static void
default_init_memmap(struct Page *base, size_t n) {
c010355f:	55                   	push   %ebp
c0103560:	89 e5                	mov    %esp,%ebp
c0103562:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0103565:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103569:	75 24                	jne    c010358f <default_init_memmap+0x30>
c010356b:	c7 44 24 0c 50 cf 10 	movl   $0xc010cf50,0xc(%esp)
c0103572:	c0 
c0103573:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c010357a:	c0 
c010357b:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c0103582:	00 
c0103583:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c010358a:	e8 57 d8 ff ff       	call   c0100de6 <__panic>
    struct Page *p = base;
c010358f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103592:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //从base开始遍历所有页框块
    for (; p != base + n; p ++) {
c0103595:	eb 7d                	jmp    c0103614 <default_init_memmap+0xb5>
        assert(PageReserved(p));
c0103597:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010359a:	83 c0 04             	add    $0x4,%eax
c010359d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01035a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01035a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01035aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035ad:	0f a3 10             	bt     %edx,(%eax)
c01035b0:	19 c0                	sbb    %eax,%eax
c01035b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01035b5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01035b9:	0f 95 c0             	setne  %al
c01035bc:	0f b6 c0             	movzbl %al,%eax
c01035bf:	85 c0                	test   %eax,%eax
c01035c1:	75 24                	jne    c01035e7 <default_init_memmap+0x88>
c01035c3:	c7 44 24 0c 81 cf 10 	movl   $0xc010cf81,0xc(%esp)
c01035ca:	c0 
c01035cb:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01035d2:	c0 
c01035d3:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c01035da:	00 
c01035db:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c01035e2:	e8 ff d7 ff ff       	call   c0100de6 <__panic>
        p->flags = p->property = 0;
c01035e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035ea:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01035f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035f4:	8b 50 08             	mov    0x8(%eax),%edx
c01035f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035fa:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01035fd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103604:	00 
c0103605:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103608:	89 04 24             	mov    %eax,(%esp)
c010360b:	e8 15 ff ff ff       	call   c0103525 <set_page_ref>
static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    //从base开始遍历所有页框块
    for (; p != base + n; p ++) {
c0103610:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103614:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103617:	c1 e0 05             	shl    $0x5,%eax
c010361a:	89 c2                	mov    %eax,%edx
c010361c:	8b 45 08             	mov    0x8(%ebp),%eax
c010361f:	01 d0                	add    %edx,%eax
c0103621:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103624:	0f 85 6d ff ff ff    	jne    c0103597 <default_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010362a:	8b 45 08             	mov    0x8(%ebp),%eax
c010362d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103630:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103633:	8b 45 08             	mov    0x8(%ebp),%eax
c0103636:	83 c0 04             	add    $0x4,%eax
c0103639:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0103640:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103643:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103646:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103649:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c010364c:	8b 15 84 1e 1b c0    	mov    0xc01b1e84,%edx
c0103652:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103655:	01 d0                	add    %edx,%eax
c0103657:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
    list_add(&free_list, &(base->page_link));
c010365c:	8b 45 08             	mov    0x8(%ebp),%eax
c010365f:	83 c0 0c             	add    $0xc,%eax
c0103662:	c7 45 dc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x24(%ebp)
c0103669:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010366c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010366f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103672:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103675:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103678:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010367b:	8b 40 04             	mov    0x4(%eax),%eax
c010367e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103681:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103684:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103687:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010368a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010368d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103690:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103693:	89 10                	mov    %edx,(%eax)
c0103695:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103698:	8b 10                	mov    (%eax),%edx
c010369a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010369d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01036a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01036a3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01036a6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01036a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01036ac:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01036af:	89 10                	mov    %edx,(%eax)
}
c01036b1:	c9                   	leave  
c01036b2:	c3                   	ret    

c01036b3 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01036b3:	55                   	push   %ebp
c01036b4:	89 e5                	mov    %esp,%ebp
c01036b6:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01036b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01036bd:	75 24                	jne    c01036e3 <default_alloc_pages+0x30>
c01036bf:	c7 44 24 0c 50 cf 10 	movl   $0xc010cf50,0xc(%esp)
c01036c6:	c0 
c01036c7:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01036ce:	c0 
c01036cf:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c01036d6:	00 
c01036d7:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c01036de:	e8 03 d7 ff ff       	call   c0100de6 <__panic>
    if (n > nr_free) {
c01036e3:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01036e8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036eb:	73 0a                	jae    c01036f7 <default_alloc_pages+0x44>
        return NULL;
c01036ed:	b8 00 00 00 00       	mov    $0x0,%eax
c01036f2:	e9 62 01 00 00       	jmp    c0103859 <default_alloc_pages+0x1a6>
    }
    struct Page *page = NULL;
c01036f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01036fe:	c7 45 f0 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x10(%ebp)
    int flag = 0;
c0103705:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010370c:	eb 37                	jmp    c0103745 <default_alloc_pages+0x92>
        struct Page *p = le2page(le, page_link);
c010370e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103711:	83 e8 0c             	sub    $0xc,%eax
c0103714:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0103717:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010371a:	8b 40 08             	mov    0x8(%eax),%eax
c010371d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103720:	72 23                	jb     c0103745 <default_alloc_pages+0x92>
        	if (flag == 0) {
c0103722:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103726:	75 0f                	jne    c0103737 <default_alloc_pages+0x84>
        		page = p;
c0103728:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010372b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        		flag = 1;
c010372e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0103735:	eb 0e                	jmp    c0103745 <default_alloc_pages+0x92>
        	} else if (p < page) {
c0103737:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010373a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010373d:	73 06                	jae    c0103745 <default_alloc_pages+0x92>
        		page = p;
c010373f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103742:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103745:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103748:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010374b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010374e:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    int flag = 0;
    while ((le = list_next(le)) != &free_list) {
c0103751:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103754:	81 7d f0 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x10(%ebp)
c010375b:	75 b1                	jne    c010370e <default_alloc_pages+0x5b>
        	} else if (p < page) {
        		page = p;
        	}
        }
    }
    if (page != NULL) {
c010375d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103761:	0f 84 ef 00 00 00    	je     c0103856 <default_alloc_pages+0x1a3>
        list_del(&(page->page_link));
c0103767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010376a:	83 c0 0c             	add    $0xc,%eax
c010376d:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103770:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103773:	8b 40 04             	mov    0x4(%eax),%eax
c0103776:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103779:	8b 12                	mov    (%edx),%edx
c010377b:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010377e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103781:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103784:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103787:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010378a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010378d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103790:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c0103792:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103795:	8b 40 08             	mov    0x8(%eax),%eax
c0103798:	3b 45 08             	cmp    0x8(%ebp),%eax
c010379b:	0f 86 8f 00 00 00    	jbe    c0103830 <default_alloc_pages+0x17d>
            struct Page *p = page + n;
c01037a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01037a4:	c1 e0 05             	shl    $0x5,%eax
c01037a7:	89 c2                	mov    %eax,%edx
c01037a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ac:	01 d0                	add    %edx,%eax
c01037ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            p->property = page->property - n;
c01037b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037b4:	8b 40 08             	mov    0x8(%eax),%eax
c01037b7:	2b 45 08             	sub    0x8(%ebp),%eax
c01037ba:	89 c2                	mov    %eax,%edx
c01037bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037bf:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c01037c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037c5:	83 c0 04             	add    $0x4,%eax
c01037c8:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01037cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01037d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01037d5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01037d8:	0f ab 10             	bts    %edx,(%eax)
            list_add(&free_list, &(p->page_link));
c01037db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037de:	83 c0 0c             	add    $0xc,%eax
c01037e1:	c7 45 c8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x38(%ebp)
c01037e8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01037eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01037ee:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01037f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01037f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01037f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01037fa:	8b 40 04             	mov    0x4(%eax),%eax
c01037fd:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103800:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0103803:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103806:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c0103809:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010380c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010380f:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103812:	89 10                	mov    %edx,(%eax)
c0103814:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103817:	8b 10                	mov    (%eax),%edx
c0103819:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010381c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010381f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103822:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103825:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103828:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010382b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010382e:	89 10                	mov    %edx,(%eax)
    }
        nr_free -= n;
c0103830:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103835:	2b 45 08             	sub    0x8(%ebp),%eax
c0103838:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
        ClearPageProperty(page);
c010383d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103840:	83 c0 04             	add    $0x4,%eax
c0103843:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c010384a:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010384d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103850:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0103853:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c0103856:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103859:	c9                   	leave  
c010385a:	c3                   	ret    

c010385b <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010385b:	55                   	push   %ebp
c010385c:	89 e5                	mov    %esp,%ebp
c010385e:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c0103864:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103868:	75 24                	jne    c010388e <default_free_pages+0x33>
c010386a:	c7 44 24 0c 50 cf 10 	movl   $0xc010cf50,0xc(%esp)
c0103871:	c0 
c0103872:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103879:	c0 
c010387a:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0103881:	00 
c0103882:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103889:	e8 58 d5 ff ff       	call   c0100de6 <__panic>
    struct Page *p = base;
c010388e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103891:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103894:	e9 9d 00 00 00       	jmp    c0103936 <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c0103899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010389c:	83 c0 04             	add    $0x4,%eax
c010389f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01038a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01038a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01038af:	0f a3 10             	bt     %edx,(%eax)
c01038b2:	19 c0                	sbb    %eax,%eax
c01038b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c01038b7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01038bb:	0f 95 c0             	setne  %al
c01038be:	0f b6 c0             	movzbl %al,%eax
c01038c1:	85 c0                	test   %eax,%eax
c01038c3:	75 2c                	jne    c01038f1 <default_free_pages+0x96>
c01038c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038c8:	83 c0 04             	add    $0x4,%eax
c01038cb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01038d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01038d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038d8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01038db:	0f a3 10             	bt     %edx,(%eax)
c01038de:	19 c0                	sbb    %eax,%eax
c01038e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c01038e3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01038e7:	0f 95 c0             	setne  %al
c01038ea:	0f b6 c0             	movzbl %al,%eax
c01038ed:	85 c0                	test   %eax,%eax
c01038ef:	74 24                	je     c0103915 <default_free_pages+0xba>
c01038f1:	c7 44 24 0c 94 cf 10 	movl   $0xc010cf94,0xc(%esp)
c01038f8:	c0 
c01038f9:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103900:	c0 
c0103901:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c0103908:	00 
c0103909:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103910:	e8 d1 d4 ff ff       	call   c0100de6 <__panic>
        p->flags = 0;
c0103915:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103918:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c010391f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103926:	00 
c0103927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010392a:	89 04 24             	mov    %eax,(%esp)
c010392d:	e8 f3 fb ff ff       	call   c0103525 <set_page_ref>

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103932:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103936:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103939:	c1 e0 05             	shl    $0x5,%eax
c010393c:	89 c2                	mov    %eax,%edx
c010393e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103941:	01 d0                	add    %edx,%eax
c0103943:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103946:	0f 85 4d ff ff ff    	jne    c0103899 <default_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010394c:	8b 45 08             	mov    0x8(%ebp),%eax
c010394f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103952:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103955:	8b 45 08             	mov    0x8(%ebp),%eax
c0103958:	83 c0 04             	add    $0x4,%eax
c010395b:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103962:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103965:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103968:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010396b:	0f ab 10             	bts    %edx,(%eax)
c010396e:	c7 45 cc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103975:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103978:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c010397b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010397e:	e9 fa 00 00 00       	jmp    c0103a7d <default_free_pages+0x222>
        p = le2page(le, page_link);
c0103983:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103986:	83 e8 0c             	sub    $0xc,%eax
c0103989:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010398c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010398f:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0103992:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103995:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103998:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (base + base->property == p) {
c010399b:	8b 45 08             	mov    0x8(%ebp),%eax
c010399e:	8b 40 08             	mov    0x8(%eax),%eax
c01039a1:	c1 e0 05             	shl    $0x5,%eax
c01039a4:	89 c2                	mov    %eax,%edx
c01039a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039a9:	01 d0                	add    %edx,%eax
c01039ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039ae:	75 5a                	jne    c0103a0a <default_free_pages+0x1af>
            base->property += p->property;
c01039b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b3:	8b 50 08             	mov    0x8(%eax),%edx
c01039b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b9:	8b 40 08             	mov    0x8(%eax),%eax
c01039bc:	01 c2                	add    %eax,%edx
c01039be:	8b 45 08             	mov    0x8(%ebp),%eax
c01039c1:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c01039c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039c7:	83 c0 04             	add    $0x4,%eax
c01039ca:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01039d1:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01039d4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01039d7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01039da:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c01039dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039e0:	83 c0 0c             	add    $0xc,%eax
c01039e3:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01039e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01039e9:	8b 40 04             	mov    0x4(%eax),%eax
c01039ec:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01039ef:	8b 12                	mov    (%edx),%edx
c01039f1:	89 55 b8             	mov    %edx,-0x48(%ebp)
c01039f4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01039f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01039fa:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01039fd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103a03:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103a06:	89 10                	mov    %edx,(%eax)
c0103a08:	eb 73                	jmp    c0103a7d <default_free_pages+0x222>
        }
        else if (p + p->property == base) {
c0103a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a0d:	8b 40 08             	mov    0x8(%eax),%eax
c0103a10:	c1 e0 05             	shl    $0x5,%eax
c0103a13:	89 c2                	mov    %eax,%edx
c0103a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a18:	01 d0                	add    %edx,%eax
c0103a1a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103a1d:	75 5e                	jne    c0103a7d <default_free_pages+0x222>
            p->property += base->property;
c0103a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a22:	8b 50 08             	mov    0x8(%eax),%edx
c0103a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a28:	8b 40 08             	mov    0x8(%eax),%eax
c0103a2b:	01 c2                	add    %eax,%edx
c0103a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a30:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0103a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a36:	83 c0 04             	add    $0x4,%eax
c0103a39:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0103a40:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0103a43:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103a46:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103a49:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0103a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a4f:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0103a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a55:	83 c0 0c             	add    $0xc,%eax
c0103a58:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103a5b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103a5e:	8b 40 04             	mov    0x4(%eax),%eax
c0103a61:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0103a64:	8b 12                	mov    (%edx),%edx
c0103a66:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0103a69:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103a6c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103a6f:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103a72:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a75:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103a78:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103a7b:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0103a7d:	81 7d f0 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x10(%ebp)
c0103a84:	0f 85 f9 fe ff ff    	jne    c0103983 <default_free_pages+0x128>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c0103a8a:	8b 15 84 1e 1b c0    	mov    0xc01b1e84,%edx
c0103a90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a93:	01 d0                	add    %edx,%eax
c0103a95:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
    list_add(&free_list, &(base->page_link));
c0103a9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a9d:	83 c0 0c             	add    $0xc,%eax
c0103aa0:	c7 45 9c 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x64(%ebp)
c0103aa7:	89 45 98             	mov    %eax,-0x68(%ebp)
c0103aaa:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103aad:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0103ab0:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103ab3:	89 45 90             	mov    %eax,-0x70(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103ab6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103ab9:	8b 40 04             	mov    0x4(%eax),%eax
c0103abc:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103abf:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0103ac2:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0103ac5:	89 55 88             	mov    %edx,-0x78(%ebp)
c0103ac8:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103acb:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103ace:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0103ad1:	89 10                	mov    %edx,(%eax)
c0103ad3:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103ad6:	8b 10                	mov    (%eax),%edx
c0103ad8:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103adb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103ade:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103ae1:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103ae4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103ae7:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103aea:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103aed:	89 10                	mov    %edx,(%eax)
}
c0103aef:	c9                   	leave  
c0103af0:	c3                   	ret    

c0103af1 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103af1:	55                   	push   %ebp
c0103af2:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103af4:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
}
c0103af9:	5d                   	pop    %ebp
c0103afa:	c3                   	ret    

c0103afb <basic_check>:

static void
basic_check(void) {
c0103afb:	55                   	push   %ebp
c0103afc:	89 e5                	mov    %esp,%ebp
c0103afe:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b11:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b14:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b1b:	e8 dc 15 00 00       	call   c01050fc <alloc_pages>
c0103b20:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b27:	75 24                	jne    c0103b4d <basic_check+0x52>
c0103b29:	c7 44 24 0c b9 cf 10 	movl   $0xc010cfb9,0xc(%esp)
c0103b30:	c0 
c0103b31:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103b38:	c0 
c0103b39:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0103b40:	00 
c0103b41:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103b48:	e8 99 d2 ff ff       	call   c0100de6 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b4d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b54:	e8 a3 15 00 00       	call   c01050fc <alloc_pages>
c0103b59:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b5c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b60:	75 24                	jne    c0103b86 <basic_check+0x8b>
c0103b62:	c7 44 24 0c d5 cf 10 	movl   $0xc010cfd5,0xc(%esp)
c0103b69:	c0 
c0103b6a:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103b71:	c0 
c0103b72:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0103b79:	00 
c0103b7a:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103b81:	e8 60 d2 ff ff       	call   c0100de6 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103b86:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b8d:	e8 6a 15 00 00       	call   c01050fc <alloc_pages>
c0103b92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103b99:	75 24                	jne    c0103bbf <basic_check+0xc4>
c0103b9b:	c7 44 24 0c f1 cf 10 	movl   $0xc010cff1,0xc(%esp)
c0103ba2:	c0 
c0103ba3:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103baa:	c0 
c0103bab:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
c0103bb2:	00 
c0103bb3:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103bba:	e8 27 d2 ff ff       	call   c0100de6 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103bbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bc2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bc5:	74 10                	je     c0103bd7 <basic_check+0xdc>
c0103bc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bcd:	74 08                	je     c0103bd7 <basic_check+0xdc>
c0103bcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bd2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bd5:	75 24                	jne    c0103bfb <basic_check+0x100>
c0103bd7:	c7 44 24 0c 10 d0 10 	movl   $0xc010d010,0xc(%esp)
c0103bde:	c0 
c0103bdf:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103be6:	c0 
c0103be7:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0103bee:	00 
c0103bef:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103bf6:	e8 eb d1 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103bfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bfe:	89 04 24             	mov    %eax,(%esp)
c0103c01:	e8 15 f9 ff ff       	call   c010351b <page_ref>
c0103c06:	85 c0                	test   %eax,%eax
c0103c08:	75 1e                	jne    c0103c28 <basic_check+0x12d>
c0103c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c0d:	89 04 24             	mov    %eax,(%esp)
c0103c10:	e8 06 f9 ff ff       	call   c010351b <page_ref>
c0103c15:	85 c0                	test   %eax,%eax
c0103c17:	75 0f                	jne    c0103c28 <basic_check+0x12d>
c0103c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1c:	89 04 24             	mov    %eax,(%esp)
c0103c1f:	e8 f7 f8 ff ff       	call   c010351b <page_ref>
c0103c24:	85 c0                	test   %eax,%eax
c0103c26:	74 24                	je     c0103c4c <basic_check+0x151>
c0103c28:	c7 44 24 0c 34 d0 10 	movl   $0xc010d034,0xc(%esp)
c0103c2f:	c0 
c0103c30:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103c37:	c0 
c0103c38:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
c0103c3f:	00 
c0103c40:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103c47:	e8 9a d1 ff ff       	call   c0100de6 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c4f:	89 04 24             	mov    %eax,(%esp)
c0103c52:	e8 ae f8 ff ff       	call   c0103505 <page2pa>
c0103c57:	8b 15 80 fd 1a c0    	mov    0xc01afd80,%edx
c0103c5d:	c1 e2 0c             	shl    $0xc,%edx
c0103c60:	39 d0                	cmp    %edx,%eax
c0103c62:	72 24                	jb     c0103c88 <basic_check+0x18d>
c0103c64:	c7 44 24 0c 70 d0 10 	movl   $0xc010d070,0xc(%esp)
c0103c6b:	c0 
c0103c6c:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103c73:	c0 
c0103c74:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
c0103c7b:	00 
c0103c7c:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103c83:	e8 5e d1 ff ff       	call   c0100de6 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103c88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c8b:	89 04 24             	mov    %eax,(%esp)
c0103c8e:	e8 72 f8 ff ff       	call   c0103505 <page2pa>
c0103c93:	8b 15 80 fd 1a c0    	mov    0xc01afd80,%edx
c0103c99:	c1 e2 0c             	shl    $0xc,%edx
c0103c9c:	39 d0                	cmp    %edx,%eax
c0103c9e:	72 24                	jb     c0103cc4 <basic_check+0x1c9>
c0103ca0:	c7 44 24 0c 8d d0 10 	movl   $0xc010d08d,0xc(%esp)
c0103ca7:	c0 
c0103ca8:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103caf:	c0 
c0103cb0:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0103cb7:	00 
c0103cb8:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103cbf:	e8 22 d1 ff ff       	call   c0100de6 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103cc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cc7:	89 04 24             	mov    %eax,(%esp)
c0103cca:	e8 36 f8 ff ff       	call   c0103505 <page2pa>
c0103ccf:	8b 15 80 fd 1a c0    	mov    0xc01afd80,%edx
c0103cd5:	c1 e2 0c             	shl    $0xc,%edx
c0103cd8:	39 d0                	cmp    %edx,%eax
c0103cda:	72 24                	jb     c0103d00 <basic_check+0x205>
c0103cdc:	c7 44 24 0c aa d0 10 	movl   $0xc010d0aa,0xc(%esp)
c0103ce3:	c0 
c0103ce4:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103ceb:	c0 
c0103cec:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0103cf3:	00 
c0103cf4:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103cfb:	e8 e6 d0 ff ff       	call   c0100de6 <__panic>

    list_entry_t free_list_store = free_list;
c0103d00:	a1 7c 1e 1b c0       	mov    0xc01b1e7c,%eax
c0103d05:	8b 15 80 1e 1b c0    	mov    0xc01b1e80,%edx
c0103d0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d0e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d11:	c7 45 e0 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d1b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d1e:	89 50 04             	mov    %edx,0x4(%eax)
c0103d21:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d24:	8b 50 04             	mov    0x4(%eax),%edx
c0103d27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d2a:	89 10                	mov    %edx,(%eax)
c0103d2c:	c7 45 dc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d33:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d36:	8b 40 04             	mov    0x4(%eax),%eax
c0103d39:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d3c:	0f 94 c0             	sete   %al
c0103d3f:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d42:	85 c0                	test   %eax,%eax
c0103d44:	75 24                	jne    c0103d6a <basic_check+0x26f>
c0103d46:	c7 44 24 0c c7 d0 10 	movl   $0xc010d0c7,0xc(%esp)
c0103d4d:	c0 
c0103d4e:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103d55:	c0 
c0103d56:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c0103d5d:	00 
c0103d5e:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103d65:	e8 7c d0 ff ff       	call   c0100de6 <__panic>

    unsigned int nr_free_store = nr_free;
c0103d6a:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103d6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103d72:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c0103d79:	00 00 00 

    assert(alloc_page() == NULL);
c0103d7c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d83:	e8 74 13 00 00       	call   c01050fc <alloc_pages>
c0103d88:	85 c0                	test   %eax,%eax
c0103d8a:	74 24                	je     c0103db0 <basic_check+0x2b5>
c0103d8c:	c7 44 24 0c de d0 10 	movl   $0xc010d0de,0xc(%esp)
c0103d93:	c0 
c0103d94:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103d9b:	c0 
c0103d9c:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103da3:	00 
c0103da4:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103dab:	e8 36 d0 ff ff       	call   c0100de6 <__panic>

    free_page(p0);
c0103db0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103db7:	00 
c0103db8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103dbb:	89 04 24             	mov    %eax,(%esp)
c0103dbe:	e8 a4 13 00 00       	call   c0105167 <free_pages>
    free_page(p1);
c0103dc3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dca:	00 
c0103dcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dce:	89 04 24             	mov    %eax,(%esp)
c0103dd1:	e8 91 13 00 00       	call   c0105167 <free_pages>
    free_page(p2);
c0103dd6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ddd:	00 
c0103dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103de1:	89 04 24             	mov    %eax,(%esp)
c0103de4:	e8 7e 13 00 00       	call   c0105167 <free_pages>
    assert(nr_free == 3);
c0103de9:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103dee:	83 f8 03             	cmp    $0x3,%eax
c0103df1:	74 24                	je     c0103e17 <basic_check+0x31c>
c0103df3:	c7 44 24 0c f3 d0 10 	movl   $0xc010d0f3,0xc(%esp)
c0103dfa:	c0 
c0103dfb:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103e02:	c0 
c0103e03:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103e0a:	00 
c0103e0b:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103e12:	e8 cf cf ff ff       	call   c0100de6 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e17:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e1e:	e8 d9 12 00 00       	call   c01050fc <alloc_pages>
c0103e23:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e2a:	75 24                	jne    c0103e50 <basic_check+0x355>
c0103e2c:	c7 44 24 0c b9 cf 10 	movl   $0xc010cfb9,0xc(%esp)
c0103e33:	c0 
c0103e34:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103e3b:	c0 
c0103e3c:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103e43:	00 
c0103e44:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103e4b:	e8 96 cf ff ff       	call   c0100de6 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e50:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e57:	e8 a0 12 00 00       	call   c01050fc <alloc_pages>
c0103e5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e63:	75 24                	jne    c0103e89 <basic_check+0x38e>
c0103e65:	c7 44 24 0c d5 cf 10 	movl   $0xc010cfd5,0xc(%esp)
c0103e6c:	c0 
c0103e6d:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103e74:	c0 
c0103e75:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c0103e7c:	00 
c0103e7d:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103e84:	e8 5d cf ff ff       	call   c0100de6 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103e89:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e90:	e8 67 12 00 00       	call   c01050fc <alloc_pages>
c0103e95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e9c:	75 24                	jne    c0103ec2 <basic_check+0x3c7>
c0103e9e:	c7 44 24 0c f1 cf 10 	movl   $0xc010cff1,0xc(%esp)
c0103ea5:	c0 
c0103ea6:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103ead:	c0 
c0103eae:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103eb5:	00 
c0103eb6:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103ebd:	e8 24 cf ff ff       	call   c0100de6 <__panic>

    assert(alloc_page() == NULL);
c0103ec2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ec9:	e8 2e 12 00 00       	call   c01050fc <alloc_pages>
c0103ece:	85 c0                	test   %eax,%eax
c0103ed0:	74 24                	je     c0103ef6 <basic_check+0x3fb>
c0103ed2:	c7 44 24 0c de d0 10 	movl   $0xc010d0de,0xc(%esp)
c0103ed9:	c0 
c0103eda:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103ee1:	c0 
c0103ee2:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0103ee9:	00 
c0103eea:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103ef1:	e8 f0 ce ff ff       	call   c0100de6 <__panic>

    free_page(p0);
c0103ef6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103efd:	00 
c0103efe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f01:	89 04 24             	mov    %eax,(%esp)
c0103f04:	e8 5e 12 00 00       	call   c0105167 <free_pages>
c0103f09:	c7 45 d8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x28(%ebp)
c0103f10:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f13:	8b 40 04             	mov    0x4(%eax),%eax
c0103f16:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f19:	0f 94 c0             	sete   %al
c0103f1c:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f1f:	85 c0                	test   %eax,%eax
c0103f21:	74 24                	je     c0103f47 <basic_check+0x44c>
c0103f23:	c7 44 24 0c 00 d1 10 	movl   $0xc010d100,0xc(%esp)
c0103f2a:	c0 
c0103f2b:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103f32:	c0 
c0103f33:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103f3a:	00 
c0103f3b:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103f42:	e8 9f ce ff ff       	call   c0100de6 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f47:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f4e:	e8 a9 11 00 00       	call   c01050fc <alloc_pages>
c0103f53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f59:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f5c:	74 24                	je     c0103f82 <basic_check+0x487>
c0103f5e:	c7 44 24 0c 18 d1 10 	movl   $0xc010d118,0xc(%esp)
c0103f65:	c0 
c0103f66:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103f6d:	c0 
c0103f6e:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c0103f75:	00 
c0103f76:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103f7d:	e8 64 ce ff ff       	call   c0100de6 <__panic>
    assert(alloc_page() == NULL);
c0103f82:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f89:	e8 6e 11 00 00       	call   c01050fc <alloc_pages>
c0103f8e:	85 c0                	test   %eax,%eax
c0103f90:	74 24                	je     c0103fb6 <basic_check+0x4bb>
c0103f92:	c7 44 24 0c de d0 10 	movl   $0xc010d0de,0xc(%esp)
c0103f99:	c0 
c0103f9a:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103fa1:	c0 
c0103fa2:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0103fa9:	00 
c0103faa:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103fb1:	e8 30 ce ff ff       	call   c0100de6 <__panic>

    assert(nr_free == 0);
c0103fb6:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103fbb:	85 c0                	test   %eax,%eax
c0103fbd:	74 24                	je     c0103fe3 <basic_check+0x4e8>
c0103fbf:	c7 44 24 0c 31 d1 10 	movl   $0xc010d131,0xc(%esp)
c0103fc6:	c0 
c0103fc7:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0103fce:	c0 
c0103fcf:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
c0103fd6:	00 
c0103fd7:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0103fde:	e8 03 ce ff ff       	call   c0100de6 <__panic>
    free_list = free_list_store;
c0103fe3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103fe6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103fe9:	a3 7c 1e 1b c0       	mov    %eax,0xc01b1e7c
c0103fee:	89 15 80 1e 1b c0    	mov    %edx,0xc01b1e80
    nr_free = nr_free_store;
c0103ff4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ff7:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84

    free_page(p);
c0103ffc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104003:	00 
c0104004:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104007:	89 04 24             	mov    %eax,(%esp)
c010400a:	e8 58 11 00 00       	call   c0105167 <free_pages>
    free_page(p1);
c010400f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104016:	00 
c0104017:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010401a:	89 04 24             	mov    %eax,(%esp)
c010401d:	e8 45 11 00 00       	call   c0105167 <free_pages>
    free_page(p2);
c0104022:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104029:	00 
c010402a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010402d:	89 04 24             	mov    %eax,(%esp)
c0104030:	e8 32 11 00 00       	call   c0105167 <free_pages>
}
c0104035:	c9                   	leave  
c0104036:	c3                   	ret    

c0104037 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104037:	55                   	push   %ebp
c0104038:	89 e5                	mov    %esp,%ebp
c010403a:	53                   	push   %ebx
c010403b:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104041:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104048:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010404f:	c7 45 ec 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104056:	eb 6b                	jmp    c01040c3 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104058:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010405b:	83 e8 0c             	sub    $0xc,%eax
c010405e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104061:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104064:	83 c0 04             	add    $0x4,%eax
c0104067:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010406e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104071:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104074:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104077:	0f a3 10             	bt     %edx,(%eax)
c010407a:	19 c0                	sbb    %eax,%eax
c010407c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c010407f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104083:	0f 95 c0             	setne  %al
c0104086:	0f b6 c0             	movzbl %al,%eax
c0104089:	85 c0                	test   %eax,%eax
c010408b:	75 24                	jne    c01040b1 <default_check+0x7a>
c010408d:	c7 44 24 0c 3e d1 10 	movl   $0xc010d13e,0xc(%esp)
c0104094:	c0 
c0104095:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c010409c:	c0 
c010409d:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01040a4:	00 
c01040a5:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c01040ac:	e8 35 cd ff ff       	call   c0100de6 <__panic>
        count ++, total += p->property;
c01040b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040b8:	8b 50 08             	mov    0x8(%eax),%edx
c01040bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040be:	01 d0                	add    %edx,%eax
c01040c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040c6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01040c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01040cc:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01040cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01040d2:	81 7d ec 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x14(%ebp)
c01040d9:	0f 85 79 ff ff ff    	jne    c0104058 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01040df:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01040e2:	e8 b2 10 00 00       	call   c0105199 <nr_free_pages>
c01040e7:	39 c3                	cmp    %eax,%ebx
c01040e9:	74 24                	je     c010410f <default_check+0xd8>
c01040eb:	c7 44 24 0c 4e d1 10 	movl   $0xc010d14e,0xc(%esp)
c01040f2:	c0 
c01040f3:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01040fa:	c0 
c01040fb:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
c0104102:	00 
c0104103:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c010410a:	e8 d7 cc ff ff       	call   c0100de6 <__panic>

    basic_check();
c010410f:	e8 e7 f9 ff ff       	call   c0103afb <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104114:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010411b:	e8 dc 0f 00 00       	call   c01050fc <alloc_pages>
c0104120:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104123:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104127:	75 24                	jne    c010414d <default_check+0x116>
c0104129:	c7 44 24 0c 67 d1 10 	movl   $0xc010d167,0xc(%esp)
c0104130:	c0 
c0104131:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104138:	c0 
c0104139:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c0104140:	00 
c0104141:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104148:	e8 99 cc ff ff       	call   c0100de6 <__panic>
    assert(!PageProperty(p0));
c010414d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104150:	83 c0 04             	add    $0x4,%eax
c0104153:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010415a:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010415d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104160:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104163:	0f a3 10             	bt     %edx,(%eax)
c0104166:	19 c0                	sbb    %eax,%eax
c0104168:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010416b:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010416f:	0f 95 c0             	setne  %al
c0104172:	0f b6 c0             	movzbl %al,%eax
c0104175:	85 c0                	test   %eax,%eax
c0104177:	74 24                	je     c010419d <default_check+0x166>
c0104179:	c7 44 24 0c 72 d1 10 	movl   $0xc010d172,0xc(%esp)
c0104180:	c0 
c0104181:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104188:	c0 
c0104189:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c0104190:	00 
c0104191:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104198:	e8 49 cc ff ff       	call   c0100de6 <__panic>

    list_entry_t free_list_store = free_list;
c010419d:	a1 7c 1e 1b c0       	mov    0xc01b1e7c,%eax
c01041a2:	8b 15 80 1e 1b c0    	mov    0xc01b1e80,%edx
c01041a8:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041ab:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041ae:	c7 45 b4 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041b8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01041bb:	89 50 04             	mov    %edx,0x4(%eax)
c01041be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041c1:	8b 50 04             	mov    0x4(%eax),%edx
c01041c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041c7:	89 10                	mov    %edx,(%eax)
c01041c9:	c7 45 b0 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01041d0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01041d3:	8b 40 04             	mov    0x4(%eax),%eax
c01041d6:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01041d9:	0f 94 c0             	sete   %al
c01041dc:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01041df:	85 c0                	test   %eax,%eax
c01041e1:	75 24                	jne    c0104207 <default_check+0x1d0>
c01041e3:	c7 44 24 0c c7 d0 10 	movl   $0xc010d0c7,0xc(%esp)
c01041ea:	c0 
c01041eb:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01041f2:	c0 
c01041f3:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c01041fa:	00 
c01041fb:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104202:	e8 df cb ff ff       	call   c0100de6 <__panic>
    assert(alloc_page() == NULL);
c0104207:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010420e:	e8 e9 0e 00 00       	call   c01050fc <alloc_pages>
c0104213:	85 c0                	test   %eax,%eax
c0104215:	74 24                	je     c010423b <default_check+0x204>
c0104217:	c7 44 24 0c de d0 10 	movl   $0xc010d0de,0xc(%esp)
c010421e:	c0 
c010421f:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104226:	c0 
c0104227:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c010422e:	00 
c010422f:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104236:	e8 ab cb ff ff       	call   c0100de6 <__panic>

    unsigned int nr_free_store = nr_free;
c010423b:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0104240:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104243:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c010424a:	00 00 00 

    free_pages(p0 + 2, 3);
c010424d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104250:	83 c0 40             	add    $0x40,%eax
c0104253:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010425a:	00 
c010425b:	89 04 24             	mov    %eax,(%esp)
c010425e:	e8 04 0f 00 00       	call   c0105167 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104263:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010426a:	e8 8d 0e 00 00       	call   c01050fc <alloc_pages>
c010426f:	85 c0                	test   %eax,%eax
c0104271:	74 24                	je     c0104297 <default_check+0x260>
c0104273:	c7 44 24 0c 84 d1 10 	movl   $0xc010d184,0xc(%esp)
c010427a:	c0 
c010427b:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104282:	c0 
c0104283:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c010428a:	00 
c010428b:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104292:	e8 4f cb ff ff       	call   c0100de6 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0104297:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010429a:	83 c0 40             	add    $0x40,%eax
c010429d:	83 c0 04             	add    $0x4,%eax
c01042a0:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042a7:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042aa:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042ad:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042b0:	0f a3 10             	bt     %edx,(%eax)
c01042b3:	19 c0                	sbb    %eax,%eax
c01042b5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01042b8:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01042bc:	0f 95 c0             	setne  %al
c01042bf:	0f b6 c0             	movzbl %al,%eax
c01042c2:	85 c0                	test   %eax,%eax
c01042c4:	74 0e                	je     c01042d4 <default_check+0x29d>
c01042c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042c9:	83 c0 40             	add    $0x40,%eax
c01042cc:	8b 40 08             	mov    0x8(%eax),%eax
c01042cf:	83 f8 03             	cmp    $0x3,%eax
c01042d2:	74 24                	je     c01042f8 <default_check+0x2c1>
c01042d4:	c7 44 24 0c 9c d1 10 	movl   $0xc010d19c,0xc(%esp)
c01042db:	c0 
c01042dc:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01042e3:	c0 
c01042e4:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c01042eb:	00 
c01042ec:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c01042f3:	e8 ee ca ff ff       	call   c0100de6 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01042f8:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01042ff:	e8 f8 0d 00 00       	call   c01050fc <alloc_pages>
c0104304:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104307:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010430b:	75 24                	jne    c0104331 <default_check+0x2fa>
c010430d:	c7 44 24 0c c8 d1 10 	movl   $0xc010d1c8,0xc(%esp)
c0104314:	c0 
c0104315:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c010431c:	c0 
c010431d:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c0104324:	00 
c0104325:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c010432c:	e8 b5 ca ff ff       	call   c0100de6 <__panic>
    assert(alloc_page() == NULL);
c0104331:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104338:	e8 bf 0d 00 00       	call   c01050fc <alloc_pages>
c010433d:	85 c0                	test   %eax,%eax
c010433f:	74 24                	je     c0104365 <default_check+0x32e>
c0104341:	c7 44 24 0c de d0 10 	movl   $0xc010d0de,0xc(%esp)
c0104348:	c0 
c0104349:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104350:	c0 
c0104351:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c0104358:	00 
c0104359:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104360:	e8 81 ca ff ff       	call   c0100de6 <__panic>
    assert(p0 + 2 == p1);
c0104365:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104368:	83 c0 40             	add    $0x40,%eax
c010436b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010436e:	74 24                	je     c0104394 <default_check+0x35d>
c0104370:	c7 44 24 0c e6 d1 10 	movl   $0xc010d1e6,0xc(%esp)
c0104377:	c0 
c0104378:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c010437f:	c0 
c0104380:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c0104387:	00 
c0104388:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c010438f:	e8 52 ca ff ff       	call   c0100de6 <__panic>

    p2 = p0 + 1;
c0104394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104397:	83 c0 20             	add    $0x20,%eax
c010439a:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c010439d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043a4:	00 
c01043a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043a8:	89 04 24             	mov    %eax,(%esp)
c01043ab:	e8 b7 0d 00 00       	call   c0105167 <free_pages>
    free_pages(p1, 3);
c01043b0:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043b7:	00 
c01043b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043bb:	89 04 24             	mov    %eax,(%esp)
c01043be:	e8 a4 0d 00 00       	call   c0105167 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01043c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043c6:	83 c0 04             	add    $0x4,%eax
c01043c9:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01043d0:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01043d6:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01043d9:	0f a3 10             	bt     %edx,(%eax)
c01043dc:	19 c0                	sbb    %eax,%eax
c01043de:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01043e1:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01043e5:	0f 95 c0             	setne  %al
c01043e8:	0f b6 c0             	movzbl %al,%eax
c01043eb:	85 c0                	test   %eax,%eax
c01043ed:	74 0b                	je     c01043fa <default_check+0x3c3>
c01043ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043f2:	8b 40 08             	mov    0x8(%eax),%eax
c01043f5:	83 f8 01             	cmp    $0x1,%eax
c01043f8:	74 24                	je     c010441e <default_check+0x3e7>
c01043fa:	c7 44 24 0c f4 d1 10 	movl   $0xc010d1f4,0xc(%esp)
c0104401:	c0 
c0104402:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104409:	c0 
c010440a:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c0104411:	00 
c0104412:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104419:	e8 c8 c9 ff ff       	call   c0100de6 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010441e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104421:	83 c0 04             	add    $0x4,%eax
c0104424:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010442b:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010442e:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104431:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104434:	0f a3 10             	bt     %edx,(%eax)
c0104437:	19 c0                	sbb    %eax,%eax
c0104439:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010443c:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104440:	0f 95 c0             	setne  %al
c0104443:	0f b6 c0             	movzbl %al,%eax
c0104446:	85 c0                	test   %eax,%eax
c0104448:	74 0b                	je     c0104455 <default_check+0x41e>
c010444a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010444d:	8b 40 08             	mov    0x8(%eax),%eax
c0104450:	83 f8 03             	cmp    $0x3,%eax
c0104453:	74 24                	je     c0104479 <default_check+0x442>
c0104455:	c7 44 24 0c 1c d2 10 	movl   $0xc010d21c,0xc(%esp)
c010445c:	c0 
c010445d:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104464:	c0 
c0104465:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c010446c:	00 
c010446d:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104474:	e8 6d c9 ff ff       	call   c0100de6 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104479:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104480:	e8 77 0c 00 00       	call   c01050fc <alloc_pages>
c0104485:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104488:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010448b:	83 e8 20             	sub    $0x20,%eax
c010448e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104491:	74 24                	je     c01044b7 <default_check+0x480>
c0104493:	c7 44 24 0c 42 d2 10 	movl   $0xc010d242,0xc(%esp)
c010449a:	c0 
c010449b:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01044a2:	c0 
c01044a3:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c01044aa:	00 
c01044ab:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c01044b2:	e8 2f c9 ff ff       	call   c0100de6 <__panic>
    free_page(p0);
c01044b7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044be:	00 
c01044bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044c2:	89 04 24             	mov    %eax,(%esp)
c01044c5:	e8 9d 0c 00 00       	call   c0105167 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01044ca:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044d1:	e8 26 0c 00 00       	call   c01050fc <alloc_pages>
c01044d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044dc:	83 c0 20             	add    $0x20,%eax
c01044df:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044e2:	74 24                	je     c0104508 <default_check+0x4d1>
c01044e4:	c7 44 24 0c 60 d2 10 	movl   $0xc010d260,0xc(%esp)
c01044eb:	c0 
c01044ec:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01044f3:	c0 
c01044f4:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01044fb:	00 
c01044fc:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104503:	e8 de c8 ff ff       	call   c0100de6 <__panic>

    free_pages(p0, 2);
c0104508:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010450f:	00 
c0104510:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104513:	89 04 24             	mov    %eax,(%esp)
c0104516:	e8 4c 0c 00 00       	call   c0105167 <free_pages>
    free_page(p2);
c010451b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104522:	00 
c0104523:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104526:	89 04 24             	mov    %eax,(%esp)
c0104529:	e8 39 0c 00 00       	call   c0105167 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010452e:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104535:	e8 c2 0b 00 00       	call   c01050fc <alloc_pages>
c010453a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010453d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104541:	75 24                	jne    c0104567 <default_check+0x530>
c0104543:	c7 44 24 0c 80 d2 10 	movl   $0xc010d280,0xc(%esp)
c010454a:	c0 
c010454b:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104552:	c0 
c0104553:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c010455a:	00 
c010455b:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104562:	e8 7f c8 ff ff       	call   c0100de6 <__panic>
    assert(alloc_page() == NULL);
c0104567:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010456e:	e8 89 0b 00 00       	call   c01050fc <alloc_pages>
c0104573:	85 c0                	test   %eax,%eax
c0104575:	74 24                	je     c010459b <default_check+0x564>
c0104577:	c7 44 24 0c de d0 10 	movl   $0xc010d0de,0xc(%esp)
c010457e:	c0 
c010457f:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104586:	c0 
c0104587:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c010458e:	00 
c010458f:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104596:	e8 4b c8 ff ff       	call   c0100de6 <__panic>

    assert(nr_free == 0);
c010459b:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01045a0:	85 c0                	test   %eax,%eax
c01045a2:	74 24                	je     c01045c8 <default_check+0x591>
c01045a4:	c7 44 24 0c 31 d1 10 	movl   $0xc010d131,0xc(%esp)
c01045ab:	c0 
c01045ac:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c01045b3:	c0 
c01045b4:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c01045bb:	00 
c01045bc:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c01045c3:	e8 1e c8 ff ff       	call   c0100de6 <__panic>
    nr_free = nr_free_store;
c01045c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01045cb:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84

    free_list = free_list_store;
c01045d0:	8b 45 80             	mov    -0x80(%ebp),%eax
c01045d3:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01045d6:	a3 7c 1e 1b c0       	mov    %eax,0xc01b1e7c
c01045db:	89 15 80 1e 1b c0    	mov    %edx,0xc01b1e80
    free_pages(p0, 5);
c01045e1:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01045e8:	00 
c01045e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045ec:	89 04 24             	mov    %eax,(%esp)
c01045ef:	e8 73 0b 00 00       	call   c0105167 <free_pages>

    le = &free_list;
c01045f4:	c7 45 ec 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01045fb:	eb 1d                	jmp    c010461a <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c01045fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104600:	83 e8 0c             	sub    $0xc,%eax
c0104603:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104606:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010460a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010460d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104610:	8b 40 08             	mov    0x8(%eax),%eax
c0104613:	29 c2                	sub    %eax,%edx
c0104615:	89 d0                	mov    %edx,%eax
c0104617:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010461a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010461d:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104620:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104623:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104626:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104629:	81 7d ec 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x14(%ebp)
c0104630:	75 cb                	jne    c01045fd <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104632:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104636:	74 24                	je     c010465c <default_check+0x625>
c0104638:	c7 44 24 0c 9e d2 10 	movl   $0xc010d29e,0xc(%esp)
c010463f:	c0 
c0104640:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104647:	c0 
c0104648:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c010464f:	00 
c0104650:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104657:	e8 8a c7 ff ff       	call   c0100de6 <__panic>
    assert(total == 0);
c010465c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104660:	74 24                	je     c0104686 <default_check+0x64f>
c0104662:	c7 44 24 0c a9 d2 10 	movl   $0xc010d2a9,0xc(%esp)
c0104669:	c0 
c010466a:	c7 44 24 08 56 cf 10 	movl   $0xc010cf56,0x8(%esp)
c0104671:	c0 
c0104672:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0104679:	00 
c010467a:	c7 04 24 6b cf 10 c0 	movl   $0xc010cf6b,(%esp)
c0104681:	e8 60 c7 ff ff       	call   c0100de6 <__panic>
}
c0104686:	81 c4 94 00 00 00    	add    $0x94,%esp
c010468c:	5b                   	pop    %ebx
c010468d:	5d                   	pop    %ebp
c010468e:	c3                   	ret    

c010468f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010468f:	55                   	push   %ebp
c0104690:	89 e5                	mov    %esp,%ebp
c0104692:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104695:	9c                   	pushf  
c0104696:	58                   	pop    %eax
c0104697:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010469a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010469d:	25 00 02 00 00       	and    $0x200,%eax
c01046a2:	85 c0                	test   %eax,%eax
c01046a4:	74 0c                	je     c01046b2 <__intr_save+0x23>
        intr_disable();
c01046a6:	e8 93 d9 ff ff       	call   c010203e <intr_disable>
        return 1;
c01046ab:	b8 01 00 00 00       	mov    $0x1,%eax
c01046b0:	eb 05                	jmp    c01046b7 <__intr_save+0x28>
    }
    return 0;
c01046b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046b7:	c9                   	leave  
c01046b8:	c3                   	ret    

c01046b9 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01046b9:	55                   	push   %ebp
c01046ba:	89 e5                	mov    %esp,%ebp
c01046bc:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01046bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01046c3:	74 05                	je     c01046ca <__intr_restore+0x11>
        intr_enable();
c01046c5:	e8 6e d9 ff ff       	call   c0102038 <intr_enable>
    }
}
c01046ca:	c9                   	leave  
c01046cb:	c3                   	ret    

c01046cc <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01046cc:	55                   	push   %ebp
c01046cd:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01046cf:	8b 55 08             	mov    0x8(%ebp),%edx
c01046d2:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01046d7:	29 c2                	sub    %eax,%edx
c01046d9:	89 d0                	mov    %edx,%eax
c01046db:	c1 f8 05             	sar    $0x5,%eax
}
c01046de:	5d                   	pop    %ebp
c01046df:	c3                   	ret    

c01046e0 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01046e0:	55                   	push   %ebp
c01046e1:	89 e5                	mov    %esp,%ebp
c01046e3:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01046e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01046e9:	89 04 24             	mov    %eax,(%esp)
c01046ec:	e8 db ff ff ff       	call   c01046cc <page2ppn>
c01046f1:	c1 e0 0c             	shl    $0xc,%eax
}
c01046f4:	c9                   	leave  
c01046f5:	c3                   	ret    

c01046f6 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01046f6:	55                   	push   %ebp
c01046f7:	89 e5                	mov    %esp,%ebp
c01046f9:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01046fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01046ff:	c1 e8 0c             	shr    $0xc,%eax
c0104702:	89 c2                	mov    %eax,%edx
c0104704:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0104709:	39 c2                	cmp    %eax,%edx
c010470b:	72 1c                	jb     c0104729 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010470d:	c7 44 24 08 e4 d2 10 	movl   $0xc010d2e4,0x8(%esp)
c0104714:	c0 
c0104715:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010471c:	00 
c010471d:	c7 04 24 03 d3 10 c0 	movl   $0xc010d303,(%esp)
c0104724:	e8 bd c6 ff ff       	call   c0100de6 <__panic>
    }
    return &pages[PPN(pa)];
c0104729:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c010472e:	8b 55 08             	mov    0x8(%ebp),%edx
c0104731:	c1 ea 0c             	shr    $0xc,%edx
c0104734:	c1 e2 05             	shl    $0x5,%edx
c0104737:	01 d0                	add    %edx,%eax
}
c0104739:	c9                   	leave  
c010473a:	c3                   	ret    

c010473b <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010473b:	55                   	push   %ebp
c010473c:	89 e5                	mov    %esp,%ebp
c010473e:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104741:	8b 45 08             	mov    0x8(%ebp),%eax
c0104744:	89 04 24             	mov    %eax,(%esp)
c0104747:	e8 94 ff ff ff       	call   c01046e0 <page2pa>
c010474c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010474f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104752:	c1 e8 0c             	shr    $0xc,%eax
c0104755:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104758:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010475d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104760:	72 23                	jb     c0104785 <page2kva+0x4a>
c0104762:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104765:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104769:	c7 44 24 08 14 d3 10 	movl   $0xc010d314,0x8(%esp)
c0104770:	c0 
c0104771:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104778:	00 
c0104779:	c7 04 24 03 d3 10 c0 	movl   $0xc010d303,(%esp)
c0104780:	e8 61 c6 ff ff       	call   c0100de6 <__panic>
c0104785:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104788:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010478d:	c9                   	leave  
c010478e:	c3                   	ret    

c010478f <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010478f:	55                   	push   %ebp
c0104790:	89 e5                	mov    %esp,%ebp
c0104792:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0104795:	8b 45 08             	mov    0x8(%ebp),%eax
c0104798:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010479b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047a2:	77 23                	ja     c01047c7 <kva2page+0x38>
c01047a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047ab:	c7 44 24 08 38 d3 10 	movl   $0xc010d338,0x8(%esp)
c01047b2:	c0 
c01047b3:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01047ba:	00 
c01047bb:	c7 04 24 03 d3 10 c0 	movl   $0xc010d303,(%esp)
c01047c2:	e8 1f c6 ff ff       	call   c0100de6 <__panic>
c01047c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047ca:	05 00 00 00 40       	add    $0x40000000,%eax
c01047cf:	89 04 24             	mov    %eax,(%esp)
c01047d2:	e8 1f ff ff ff       	call   c01046f6 <pa2page>
}
c01047d7:	c9                   	leave  
c01047d8:	c3                   	ret    

c01047d9 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01047d9:	55                   	push   %ebp
c01047da:	89 e5                	mov    %esp,%ebp
c01047dc:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c01047df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01047e2:	ba 01 00 00 00       	mov    $0x1,%edx
c01047e7:	89 c1                	mov    %eax,%ecx
c01047e9:	d3 e2                	shl    %cl,%edx
c01047eb:	89 d0                	mov    %edx,%eax
c01047ed:	89 04 24             	mov    %eax,(%esp)
c01047f0:	e8 07 09 00 00       	call   c01050fc <alloc_pages>
c01047f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01047f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047fc:	75 07                	jne    c0104805 <__slob_get_free_pages+0x2c>
    return NULL;
c01047fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0104803:	eb 0b                	jmp    c0104810 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104805:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104808:	89 04 24             	mov    %eax,(%esp)
c010480b:	e8 2b ff ff ff       	call   c010473b <page2kva>
}
c0104810:	c9                   	leave  
c0104811:	c3                   	ret    

c0104812 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104812:	55                   	push   %ebp
c0104813:	89 e5                	mov    %esp,%ebp
c0104815:	53                   	push   %ebx
c0104816:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104819:	8b 45 0c             	mov    0xc(%ebp),%eax
c010481c:	ba 01 00 00 00       	mov    $0x1,%edx
c0104821:	89 c1                	mov    %eax,%ecx
c0104823:	d3 e2                	shl    %cl,%edx
c0104825:	89 d0                	mov    %edx,%eax
c0104827:	89 c3                	mov    %eax,%ebx
c0104829:	8b 45 08             	mov    0x8(%ebp),%eax
c010482c:	89 04 24             	mov    %eax,(%esp)
c010482f:	e8 5b ff ff ff       	call   c010478f <kva2page>
c0104834:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104838:	89 04 24             	mov    %eax,(%esp)
c010483b:	e8 27 09 00 00       	call   c0105167 <free_pages>
}
c0104840:	83 c4 14             	add    $0x14,%esp
c0104843:	5b                   	pop    %ebx
c0104844:	5d                   	pop    %ebp
c0104845:	c3                   	ret    

c0104846 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104846:	55                   	push   %ebp
c0104847:	89 e5                	mov    %esp,%ebp
c0104849:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010484c:	8b 45 08             	mov    0x8(%ebp),%eax
c010484f:	83 c0 08             	add    $0x8,%eax
c0104852:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104857:	76 24                	jbe    c010487d <slob_alloc+0x37>
c0104859:	c7 44 24 0c 5c d3 10 	movl   $0xc010d35c,0xc(%esp)
c0104860:	c0 
c0104861:	c7 44 24 08 7b d3 10 	movl   $0xc010d37b,0x8(%esp)
c0104868:	c0 
c0104869:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104870:	00 
c0104871:	c7 04 24 90 d3 10 c0 	movl   $0xc010d390,(%esp)
c0104878:	e8 69 c5 ff ff       	call   c0100de6 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c010487d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104884:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010488b:	8b 45 08             	mov    0x8(%ebp),%eax
c010488e:	83 c0 07             	add    $0x7,%eax
c0104891:	c1 e8 03             	shr    $0x3,%eax
c0104894:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104897:	e8 f3 fd ff ff       	call   c010468f <__intr_save>
c010489c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c010489f:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c01048a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048aa:	8b 40 04             	mov    0x4(%eax),%eax
c01048ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01048b4:	74 25                	je     c01048db <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01048b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01048bc:	01 d0                	add    %edx,%eax
c01048be:	8d 50 ff             	lea    -0x1(%eax),%edx
c01048c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01048c4:	f7 d8                	neg    %eax
c01048c6:	21 d0                	and    %edx,%eax
c01048c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01048cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01048ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048d1:	29 c2                	sub    %eax,%edx
c01048d3:	89 d0                	mov    %edx,%eax
c01048d5:	c1 f8 03             	sar    $0x3,%eax
c01048d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01048db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048de:	8b 00                	mov    (%eax),%eax
c01048e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01048e3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01048e6:	01 ca                	add    %ecx,%edx
c01048e8:	39 d0                	cmp    %edx,%eax
c01048ea:	0f 8c aa 00 00 00    	jl     c010499a <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c01048f0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01048f4:	74 38                	je     c010492e <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c01048f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048f9:	8b 00                	mov    (%eax),%eax
c01048fb:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01048fe:	89 c2                	mov    %eax,%edx
c0104900:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104903:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104905:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104908:	8b 50 04             	mov    0x4(%eax),%edx
c010490b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010490e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104911:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104914:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104917:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010491a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010491d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104920:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104922:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104925:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104928:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010492b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c010492e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104931:	8b 00                	mov    (%eax),%eax
c0104933:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104936:	75 0e                	jne    c0104946 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104938:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010493b:	8b 50 04             	mov    0x4(%eax),%edx
c010493e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104941:	89 50 04             	mov    %edx,0x4(%eax)
c0104944:	eb 3c                	jmp    c0104982 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104946:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104949:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104950:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104953:	01 c2                	add    %eax,%edx
c0104955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104958:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010495b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010495e:	8b 40 04             	mov    0x4(%eax),%eax
c0104961:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104964:	8b 12                	mov    (%edx),%edx
c0104966:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104969:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c010496b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010496e:	8b 40 04             	mov    0x4(%eax),%eax
c0104971:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104974:	8b 52 04             	mov    0x4(%edx),%edx
c0104977:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c010497a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010497d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104980:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104985:	a3 08 da 12 c0       	mov    %eax,0xc012da08
			spin_unlock_irqrestore(&slob_lock, flags);
c010498a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010498d:	89 04 24             	mov    %eax,(%esp)
c0104990:	e8 24 fd ff ff       	call   c01046b9 <__intr_restore>
			return cur;
c0104995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104998:	eb 7f                	jmp    c0104a19 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c010499a:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c010499f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049a2:	75 61                	jne    c0104a05 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049a7:	89 04 24             	mov    %eax,(%esp)
c01049aa:	e8 0a fd ff ff       	call   c01046b9 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049af:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01049b6:	75 07                	jne    c01049bf <slob_alloc+0x179>
				return 0;
c01049b8:	b8 00 00 00 00       	mov    $0x0,%eax
c01049bd:	eb 5a                	jmp    c0104a19 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01049bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01049c6:	00 
c01049c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049ca:	89 04 24             	mov    %eax,(%esp)
c01049cd:	e8 07 fe ff ff       	call   c01047d9 <__slob_get_free_pages>
c01049d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01049d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01049d9:	75 07                	jne    c01049e2 <slob_alloc+0x19c>
				return 0;
c01049db:	b8 00 00 00 00       	mov    $0x0,%eax
c01049e0:	eb 37                	jmp    c0104a19 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c01049e2:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01049e9:	00 
c01049ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049ed:	89 04 24             	mov    %eax,(%esp)
c01049f0:	e8 26 00 00 00       	call   c0104a1b <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c01049f5:	e8 95 fc ff ff       	call   c010468f <__intr_save>
c01049fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c01049fd:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104a02:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a0e:	8b 40 04             	mov    0x4(%eax),%eax
c0104a11:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a14:	e9 97 fe ff ff       	jmp    c01048b0 <slob_alloc+0x6a>
}
c0104a19:	c9                   	leave  
c0104a1a:	c3                   	ret    

c0104a1b <slob_free>:

static void slob_free(void *block, int size)
{
c0104a1b:	55                   	push   %ebp
c0104a1c:	89 e5                	mov    %esp,%ebp
c0104a1e:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a24:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a2b:	75 05                	jne    c0104a32 <slob_free+0x17>
		return;
c0104a2d:	e9 ff 00 00 00       	jmp    c0104b31 <slob_free+0x116>

	if (size)
c0104a32:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a36:	74 10                	je     c0104a48 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a3b:	83 c0 07             	add    $0x7,%eax
c0104a3e:	c1 e8 03             	shr    $0x3,%eax
c0104a41:	89 c2                	mov    %eax,%edx
c0104a43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a46:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a48:	e8 42 fc ff ff       	call   c010468f <__intr_save>
c0104a4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a50:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a58:	eb 27                	jmp    c0104a81 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a5d:	8b 40 04             	mov    0x4(%eax),%eax
c0104a60:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a63:	77 13                	ja     c0104a78 <slob_free+0x5d>
c0104a65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a6b:	77 27                	ja     c0104a94 <slob_free+0x79>
c0104a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a70:	8b 40 04             	mov    0x4(%eax),%eax
c0104a73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a76:	77 1c                	ja     c0104a94 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a7b:	8b 40 04             	mov    0x4(%eax),%eax
c0104a7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a84:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a87:	76 d1                	jbe    c0104a5a <slob_free+0x3f>
c0104a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a8c:	8b 40 04             	mov    0x4(%eax),%eax
c0104a8f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a92:	76 c6                	jbe    c0104a5a <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104a94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a97:	8b 00                	mov    (%eax),%eax
c0104a99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104aa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa3:	01 c2                	add    %eax,%edx
c0104aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aa8:	8b 40 04             	mov    0x4(%eax),%eax
c0104aab:	39 c2                	cmp    %eax,%edx
c0104aad:	75 25                	jne    c0104ad4 <slob_free+0xb9>
		b->units += cur->next->units;
c0104aaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ab2:	8b 10                	mov    (%eax),%edx
c0104ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab7:	8b 40 04             	mov    0x4(%eax),%eax
c0104aba:	8b 00                	mov    (%eax),%eax
c0104abc:	01 c2                	add    %eax,%edx
c0104abe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ac1:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac6:	8b 40 04             	mov    0x4(%eax),%eax
c0104ac9:	8b 50 04             	mov    0x4(%eax),%edx
c0104acc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104acf:	89 50 04             	mov    %edx,0x4(%eax)
c0104ad2:	eb 0c                	jmp    c0104ae0 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad7:	8b 50 04             	mov    0x4(%eax),%edx
c0104ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104add:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae3:	8b 00                	mov    (%eax),%eax
c0104ae5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aef:	01 d0                	add    %edx,%eax
c0104af1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104af4:	75 1f                	jne    c0104b15 <slob_free+0xfa>
		cur->units += b->units;
c0104af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af9:	8b 10                	mov    (%eax),%edx
c0104afb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104afe:	8b 00                	mov    (%eax),%eax
c0104b00:	01 c2                	add    %eax,%edx
c0104b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b05:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b0a:	8b 50 04             	mov    0x4(%eax),%edx
c0104b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b10:	89 50 04             	mov    %edx,0x4(%eax)
c0104b13:	eb 09                	jmp    c0104b1e <slob_free+0x103>
	} else
		cur->next = b;
c0104b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b1b:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b21:	a3 08 da 12 c0       	mov    %eax,0xc012da08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b26:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b29:	89 04 24             	mov    %eax,(%esp)
c0104b2c:	e8 88 fb ff ff       	call   c01046b9 <__intr_restore>
}
c0104b31:	c9                   	leave  
c0104b32:	c3                   	ret    

c0104b33 <slob_init>:



void
slob_init(void) {
c0104b33:	55                   	push   %ebp
c0104b34:	89 e5                	mov    %esp,%ebp
c0104b36:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b39:	c7 04 24 a2 d3 10 c0 	movl   $0xc010d3a2,(%esp)
c0104b40:	e8 13 b8 ff ff       	call   c0100358 <cprintf>
}
c0104b45:	c9                   	leave  
c0104b46:	c3                   	ret    

c0104b47 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b47:	55                   	push   %ebp
c0104b48:	89 e5                	mov    %esp,%ebp
c0104b4a:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104b4d:	e8 e1 ff ff ff       	call   c0104b33 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b52:	c7 04 24 b6 d3 10 c0 	movl   $0xc010d3b6,(%esp)
c0104b59:	e8 fa b7 ff ff       	call   c0100358 <cprintf>
}
c0104b5e:	c9                   	leave  
c0104b5f:	c3                   	ret    

c0104b60 <slob_allocated>:

size_t
slob_allocated(void) {
c0104b60:	55                   	push   %ebp
c0104b61:	89 e5                	mov    %esp,%ebp
  return 0;
c0104b63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b68:	5d                   	pop    %ebp
c0104b69:	c3                   	ret    

c0104b6a <kallocated>:

size_t
kallocated(void) {
c0104b6a:	55                   	push   %ebp
c0104b6b:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104b6d:	e8 ee ff ff ff       	call   c0104b60 <slob_allocated>
}
c0104b72:	5d                   	pop    %ebp
c0104b73:	c3                   	ret    

c0104b74 <find_order>:

static int find_order(int size)
{
c0104b74:	55                   	push   %ebp
c0104b75:	89 e5                	mov    %esp,%ebp
c0104b77:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104b7a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104b81:	eb 07                	jmp    c0104b8a <find_order+0x16>
		order++;
c0104b83:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104b87:	d1 7d 08             	sarl   0x8(%ebp)
c0104b8a:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104b91:	7f f0                	jg     c0104b83 <find_order+0xf>
		order++;
	return order;
c0104b93:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104b96:	c9                   	leave  
c0104b97:	c3                   	ret    

c0104b98 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104b98:	55                   	push   %ebp
c0104b99:	89 e5                	mov    %esp,%ebp
c0104b9b:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104b9e:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104ba5:	77 38                	ja     c0104bdf <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104ba7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104baa:	8d 50 08             	lea    0x8(%eax),%edx
c0104bad:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104bb4:	00 
c0104bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bbc:	89 14 24             	mov    %edx,(%esp)
c0104bbf:	e8 82 fc ff ff       	call   c0104846 <slob_alloc>
c0104bc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104bc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104bcb:	74 08                	je     c0104bd5 <__kmalloc+0x3d>
c0104bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bd0:	83 c0 08             	add    $0x8,%eax
c0104bd3:	eb 05                	jmp    c0104bda <__kmalloc+0x42>
c0104bd5:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bda:	e9 a6 00 00 00       	jmp    c0104c85 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104bdf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104be6:	00 
c0104be7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bea:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bee:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104bf5:	e8 4c fc ff ff       	call   c0104846 <slob_alloc>
c0104bfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104bfd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c01:	75 07                	jne    c0104c0a <__kmalloc+0x72>
		return 0;
c0104c03:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c08:	eb 7b                	jmp    c0104c85 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c0d:	89 04 24             	mov    %eax,(%esp)
c0104c10:	e8 5f ff ff ff       	call   c0104b74 <find_order>
c0104c15:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c18:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c1d:	8b 00                	mov    (%eax),%eax
c0104c1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c26:	89 04 24             	mov    %eax,(%esp)
c0104c29:	e8 ab fb ff ff       	call   c01047d9 <__slob_get_free_pages>
c0104c2e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c31:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c37:	8b 40 04             	mov    0x4(%eax),%eax
c0104c3a:	85 c0                	test   %eax,%eax
c0104c3c:	74 2f                	je     c0104c6d <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c3e:	e8 4c fa ff ff       	call   c010468f <__intr_save>
c0104c43:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c46:	8b 15 64 fd 1a c0    	mov    0xc01afd64,%edx
c0104c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c4f:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c55:	a3 64 fd 1a c0       	mov    %eax,0xc01afd64
		spin_unlock_irqrestore(&block_lock, flags);
c0104c5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c5d:	89 04 24             	mov    %eax,(%esp)
c0104c60:	e8 54 fa ff ff       	call   c01046b9 <__intr_restore>
		return bb->pages;
c0104c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c68:	8b 40 04             	mov    0x4(%eax),%eax
c0104c6b:	eb 18                	jmp    c0104c85 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104c6d:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104c74:	00 
c0104c75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c78:	89 04 24             	mov    %eax,(%esp)
c0104c7b:	e8 9b fd ff ff       	call   c0104a1b <slob_free>
	return 0;
c0104c80:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c85:	c9                   	leave  
c0104c86:	c3                   	ret    

c0104c87 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104c87:	55                   	push   %ebp
c0104c88:	89 e5                	mov    %esp,%ebp
c0104c8a:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104c8d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104c94:	00 
c0104c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c98:	89 04 24             	mov    %eax,(%esp)
c0104c9b:	e8 f8 fe ff ff       	call   c0104b98 <__kmalloc>
}
c0104ca0:	c9                   	leave  
c0104ca1:	c3                   	ret    

c0104ca2 <kfree>:


void kfree(void *block)
{
c0104ca2:	55                   	push   %ebp
c0104ca3:	89 e5                	mov    %esp,%ebp
c0104ca5:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104ca8:	c7 45 f0 64 fd 1a c0 	movl   $0xc01afd64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104caf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104cb3:	75 05                	jne    c0104cba <kfree+0x18>
		return;
c0104cb5:	e9 a2 00 00 00       	jmp    c0104d5c <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104cba:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cbd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104cc2:	85 c0                	test   %eax,%eax
c0104cc4:	75 7f                	jne    c0104d45 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104cc6:	e8 c4 f9 ff ff       	call   c010468f <__intr_save>
c0104ccb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104cce:	a1 64 fd 1a c0       	mov    0xc01afd64,%eax
c0104cd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cd6:	eb 5c                	jmp    c0104d34 <kfree+0x92>
			if (bb->pages == block) {
c0104cd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cdb:	8b 40 04             	mov    0x4(%eax),%eax
c0104cde:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ce1:	75 3f                	jne    c0104d22 <kfree+0x80>
				*last = bb->next;
c0104ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ce6:	8b 50 08             	mov    0x8(%eax),%edx
c0104ce9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cec:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104cee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cf1:	89 04 24             	mov    %eax,(%esp)
c0104cf4:	e8 c0 f9 ff ff       	call   c01046b9 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cfc:	8b 10                	mov    (%eax),%edx
c0104cfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d01:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d05:	89 04 24             	mov    %eax,(%esp)
c0104d08:	e8 05 fb ff ff       	call   c0104812 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d0d:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d14:	00 
c0104d15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d18:	89 04 24             	mov    %eax,(%esp)
c0104d1b:	e8 fb fc ff ff       	call   c0104a1b <slob_free>
				return;
c0104d20:	eb 3a                	jmp    c0104d5c <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d25:	83 c0 08             	add    $0x8,%eax
c0104d28:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d2e:	8b 40 08             	mov    0x8(%eax),%eax
c0104d31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d38:	75 9e                	jne    c0104cd8 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d3d:	89 04 24             	mov    %eax,(%esp)
c0104d40:	e8 74 f9 ff ff       	call   c01046b9 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d45:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d48:	83 e8 08             	sub    $0x8,%eax
c0104d4b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d52:	00 
c0104d53:	89 04 24             	mov    %eax,(%esp)
c0104d56:	e8 c0 fc ff ff       	call   c0104a1b <slob_free>
	return;
c0104d5b:	90                   	nop
}
c0104d5c:	c9                   	leave  
c0104d5d:	c3                   	ret    

c0104d5e <ksize>:


unsigned int ksize(const void *block)
{
c0104d5e:	55                   	push   %ebp
c0104d5f:	89 e5                	mov    %esp,%ebp
c0104d61:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104d64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d68:	75 07                	jne    c0104d71 <ksize+0x13>
		return 0;
c0104d6a:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d6f:	eb 6b                	jmp    c0104ddc <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104d71:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d74:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104d79:	85 c0                	test   %eax,%eax
c0104d7b:	75 54                	jne    c0104dd1 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104d7d:	e8 0d f9 ff ff       	call   c010468f <__intr_save>
c0104d82:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104d85:	a1 64 fd 1a c0       	mov    0xc01afd64,%eax
c0104d8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d8d:	eb 31                	jmp    c0104dc0 <ksize+0x62>
			if (bb->pages == block) {
c0104d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d92:	8b 40 04             	mov    0x4(%eax),%eax
c0104d95:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d98:	75 1d                	jne    c0104db7 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d9d:	89 04 24             	mov    %eax,(%esp)
c0104da0:	e8 14 f9 ff ff       	call   c01046b9 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104da8:	8b 00                	mov    (%eax),%eax
c0104daa:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104daf:	89 c1                	mov    %eax,%ecx
c0104db1:	d3 e2                	shl    %cl,%edx
c0104db3:	89 d0                	mov    %edx,%eax
c0104db5:	eb 25                	jmp    c0104ddc <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dba:	8b 40 08             	mov    0x8(%eax),%eax
c0104dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104dc4:	75 c9                	jne    c0104d8f <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104dc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dc9:	89 04 24             	mov    %eax,(%esp)
c0104dcc:	e8 e8 f8 ff ff       	call   c01046b9 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104dd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dd4:	83 e8 08             	sub    $0x8,%eax
c0104dd7:	8b 00                	mov    (%eax),%eax
c0104dd9:	c1 e0 03             	shl    $0x3,%eax
}
c0104ddc:	c9                   	leave  
c0104ddd:	c3                   	ret    

c0104dde <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104dde:	55                   	push   %ebp
c0104ddf:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104de1:	8b 55 08             	mov    0x8(%ebp),%edx
c0104de4:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0104de9:	29 c2                	sub    %eax,%edx
c0104deb:	89 d0                	mov    %edx,%eax
c0104ded:	c1 f8 05             	sar    $0x5,%eax
}
c0104df0:	5d                   	pop    %ebp
c0104df1:	c3                   	ret    

c0104df2 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104df2:	55                   	push   %ebp
c0104df3:	89 e5                	mov    %esp,%ebp
c0104df5:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dfb:	89 04 24             	mov    %eax,(%esp)
c0104dfe:	e8 db ff ff ff       	call   c0104dde <page2ppn>
c0104e03:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e06:	c9                   	leave  
c0104e07:	c3                   	ret    

c0104e08 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e08:	55                   	push   %ebp
c0104e09:	89 e5                	mov    %esp,%ebp
c0104e0b:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e11:	c1 e8 0c             	shr    $0xc,%eax
c0104e14:	89 c2                	mov    %eax,%edx
c0104e16:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0104e1b:	39 c2                	cmp    %eax,%edx
c0104e1d:	72 1c                	jb     c0104e3b <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e1f:	c7 44 24 08 d4 d3 10 	movl   $0xc010d3d4,0x8(%esp)
c0104e26:	c0 
c0104e27:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e2e:	00 
c0104e2f:	c7 04 24 f3 d3 10 c0 	movl   $0xc010d3f3,(%esp)
c0104e36:	e8 ab bf ff ff       	call   c0100de6 <__panic>
    }
    return &pages[PPN(pa)];
c0104e3b:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0104e40:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e43:	c1 ea 0c             	shr    $0xc,%edx
c0104e46:	c1 e2 05             	shl    $0x5,%edx
c0104e49:	01 d0                	add    %edx,%eax
}
c0104e4b:	c9                   	leave  
c0104e4c:	c3                   	ret    

c0104e4d <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e4d:	55                   	push   %ebp
c0104e4e:	89 e5                	mov    %esp,%ebp
c0104e50:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e53:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e56:	89 04 24             	mov    %eax,(%esp)
c0104e59:	e8 94 ff ff ff       	call   c0104df2 <page2pa>
c0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e64:	c1 e8 0c             	shr    $0xc,%eax
c0104e67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e6a:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0104e6f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e72:	72 23                	jb     c0104e97 <page2kva+0x4a>
c0104e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e77:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104e7b:	c7 44 24 08 04 d4 10 	movl   $0xc010d404,0x8(%esp)
c0104e82:	c0 
c0104e83:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104e8a:	00 
c0104e8b:	c7 04 24 f3 d3 10 c0 	movl   $0xc010d3f3,(%esp)
c0104e92:	e8 4f bf ff ff       	call   c0100de6 <__panic>
c0104e97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e9a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104e9f:	c9                   	leave  
c0104ea0:	c3                   	ret    

c0104ea1 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104ea1:	55                   	push   %ebp
c0104ea2:	89 e5                	mov    %esp,%ebp
c0104ea4:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104ea7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eaa:	83 e0 01             	and    $0x1,%eax
c0104ead:	85 c0                	test   %eax,%eax
c0104eaf:	75 1c                	jne    c0104ecd <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104eb1:	c7 44 24 08 28 d4 10 	movl   $0xc010d428,0x8(%esp)
c0104eb8:	c0 
c0104eb9:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104ec0:	00 
c0104ec1:	c7 04 24 f3 d3 10 c0 	movl   $0xc010d3f3,(%esp)
c0104ec8:	e8 19 bf ff ff       	call   c0100de6 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104ed5:	89 04 24             	mov    %eax,(%esp)
c0104ed8:	e8 2b ff ff ff       	call   c0104e08 <pa2page>
}
c0104edd:	c9                   	leave  
c0104ede:	c3                   	ret    

c0104edf <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104edf:	55                   	push   %ebp
c0104ee0:	89 e5                	mov    %esp,%ebp
c0104ee2:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104eed:	89 04 24             	mov    %eax,(%esp)
c0104ef0:	e8 13 ff ff ff       	call   c0104e08 <pa2page>
}
c0104ef5:	c9                   	leave  
c0104ef6:	c3                   	ret    

c0104ef7 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104ef7:	55                   	push   %ebp
c0104ef8:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
c0104efd:	8b 00                	mov    (%eax),%eax
}
c0104eff:	5d                   	pop    %ebp
c0104f00:	c3                   	ret    

c0104f01 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f01:	55                   	push   %ebp
c0104f02:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f07:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f0a:	89 10                	mov    %edx,(%eax)
}
c0104f0c:	5d                   	pop    %ebp
c0104f0d:	c3                   	ret    

c0104f0e <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f0e:	55                   	push   %ebp
c0104f0f:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f11:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f14:	8b 00                	mov    (%eax),%eax
c0104f16:	8d 50 01             	lea    0x1(%eax),%edx
c0104f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f1c:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f21:	8b 00                	mov    (%eax),%eax
}
c0104f23:	5d                   	pop    %ebp
c0104f24:	c3                   	ret    

c0104f25 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f25:	55                   	push   %ebp
c0104f26:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f28:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2b:	8b 00                	mov    (%eax),%eax
c0104f2d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f33:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f38:	8b 00                	mov    (%eax),%eax
}
c0104f3a:	5d                   	pop    %ebp
c0104f3b:	c3                   	ret    

c0104f3c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f3c:	55                   	push   %ebp
c0104f3d:	89 e5                	mov    %esp,%ebp
c0104f3f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f42:	9c                   	pushf  
c0104f43:	58                   	pop    %eax
c0104f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f4a:	25 00 02 00 00       	and    $0x200,%eax
c0104f4f:	85 c0                	test   %eax,%eax
c0104f51:	74 0c                	je     c0104f5f <__intr_save+0x23>
        intr_disable();
c0104f53:	e8 e6 d0 ff ff       	call   c010203e <intr_disable>
        return 1;
c0104f58:	b8 01 00 00 00       	mov    $0x1,%eax
c0104f5d:	eb 05                	jmp    c0104f64 <__intr_save+0x28>
    }
    return 0;
c0104f5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104f64:	c9                   	leave  
c0104f65:	c3                   	ret    

c0104f66 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104f66:	55                   	push   %ebp
c0104f67:	89 e5                	mov    %esp,%ebp
c0104f69:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104f6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104f70:	74 05                	je     c0104f77 <__intr_restore+0x11>
        intr_enable();
c0104f72:	e8 c1 d0 ff ff       	call   c0102038 <intr_enable>
    }
}
c0104f77:	c9                   	leave  
c0104f78:	c3                   	ret    

c0104f79 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104f79:	55                   	push   %ebp
c0104f7a:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104f7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7f:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104f82:	b8 23 00 00 00       	mov    $0x23,%eax
c0104f87:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104f89:	b8 23 00 00 00       	mov    $0x23,%eax
c0104f8e:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104f90:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f95:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104f97:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f9c:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104f9e:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fa3:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104fa5:	ea ac 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104fac
}
c0104fac:	5d                   	pop    %ebp
c0104fad:	c3                   	ret    

c0104fae <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104fae:	55                   	push   %ebp
c0104faf:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104fb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb4:	a3 a4 fd 1a c0       	mov    %eax,0xc01afda4
}
c0104fb9:	5d                   	pop    %ebp
c0104fba:	c3                   	ret    

c0104fbb <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104fbb:	55                   	push   %ebp
c0104fbc:	89 e5                	mov    %esp,%ebp
c0104fbe:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104fc1:	b8 00 d0 12 c0       	mov    $0xc012d000,%eax
c0104fc6:	89 04 24             	mov    %eax,(%esp)
c0104fc9:	e8 e0 ff ff ff       	call   c0104fae <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104fce:	66 c7 05 a8 fd 1a c0 	movw   $0x10,0xc01afda8
c0104fd5:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104fd7:	66 c7 05 48 da 12 c0 	movw   $0x68,0xc012da48
c0104fde:	68 00 
c0104fe0:	b8 a0 fd 1a c0       	mov    $0xc01afda0,%eax
c0104fe5:	66 a3 4a da 12 c0    	mov    %ax,0xc012da4a
c0104feb:	b8 a0 fd 1a c0       	mov    $0xc01afda0,%eax
c0104ff0:	c1 e8 10             	shr    $0x10,%eax
c0104ff3:	a2 4c da 12 c0       	mov    %al,0xc012da4c
c0104ff8:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0104fff:	83 e0 f0             	and    $0xfffffff0,%eax
c0105002:	83 c8 09             	or     $0x9,%eax
c0105005:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c010500a:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0105011:	83 e0 ef             	and    $0xffffffef,%eax
c0105014:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105019:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0105020:	83 e0 9f             	and    $0xffffff9f,%eax
c0105023:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105028:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c010502f:	83 c8 80             	or     $0xffffff80,%eax
c0105032:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105037:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010503e:	83 e0 f0             	and    $0xfffffff0,%eax
c0105041:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0105046:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010504d:	83 e0 ef             	and    $0xffffffef,%eax
c0105050:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0105055:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010505c:	83 e0 df             	and    $0xffffffdf,%eax
c010505f:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0105064:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010506b:	83 c8 40             	or     $0x40,%eax
c010506e:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0105073:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c010507a:	83 e0 7f             	and    $0x7f,%eax
c010507d:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0105082:	b8 a0 fd 1a c0       	mov    $0xc01afda0,%eax
c0105087:	c1 e8 18             	shr    $0x18,%eax
c010508a:	a2 4f da 12 c0       	mov    %al,0xc012da4f

    // reload all segment registers
    lgdt(&gdt_pd);
c010508f:	c7 04 24 50 da 12 c0 	movl   $0xc012da50,(%esp)
c0105096:	e8 de fe ff ff       	call   c0104f79 <lgdt>
c010509b:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01050a1:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01050a5:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01050a8:	c9                   	leave  
c01050a9:	c3                   	ret    

c01050aa <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01050aa:	55                   	push   %ebp
c01050ab:	89 e5                	mov    %esp,%ebp
c01050ad:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01050b0:	c7 05 88 1e 1b c0 c8 	movl   $0xc010d2c8,0xc01b1e88
c01050b7:	d2 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01050ba:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c01050bf:	8b 00                	mov    (%eax),%eax
c01050c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01050c5:	c7 04 24 54 d4 10 c0 	movl   $0xc010d454,(%esp)
c01050cc:	e8 87 b2 ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c01050d1:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c01050d6:	8b 40 04             	mov    0x4(%eax),%eax
c01050d9:	ff d0                	call   *%eax
}
c01050db:	c9                   	leave  
c01050dc:	c3                   	ret    

c01050dd <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01050dd:	55                   	push   %ebp
c01050de:	89 e5                	mov    %esp,%ebp
c01050e0:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c01050e3:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c01050e8:	8b 40 08             	mov    0x8(%eax),%eax
c01050eb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01050ee:	89 54 24 04          	mov    %edx,0x4(%esp)
c01050f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01050f5:	89 14 24             	mov    %edx,(%esp)
c01050f8:	ff d0                	call   *%eax
}
c01050fa:	c9                   	leave  
c01050fb:	c3                   	ret    

c01050fc <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01050fc:	55                   	push   %ebp
c01050fd:	89 e5                	mov    %esp,%ebp
c01050ff:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105102:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105109:	e8 2e fe ff ff       	call   c0104f3c <__intr_save>
c010510e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105111:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c0105116:	8b 40 0c             	mov    0xc(%eax),%eax
c0105119:	8b 55 08             	mov    0x8(%ebp),%edx
c010511c:	89 14 24             	mov    %edx,(%esp)
c010511f:	ff d0                	call   *%eax
c0105121:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105124:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105127:	89 04 24             	mov    %eax,(%esp)
c010512a:	e8 37 fe ff ff       	call   c0104f66 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010512f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105133:	75 2d                	jne    c0105162 <alloc_pages+0x66>
c0105135:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0105139:	77 27                	ja     c0105162 <alloc_pages+0x66>
c010513b:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c0105140:	85 c0                	test   %eax,%eax
c0105142:	74 1e                	je     c0105162 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105144:	8b 55 08             	mov    0x8(%ebp),%edx
c0105147:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c010514c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105153:	00 
c0105154:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105158:	89 04 24             	mov    %eax,(%esp)
c010515b:	e8 9c 1d 00 00       	call   c0106efc <swap_out>
    }
c0105160:	eb a7                	jmp    c0105109 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105162:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105165:	c9                   	leave  
c0105166:	c3                   	ret    

c0105167 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0105167:	55                   	push   %ebp
c0105168:	89 e5                	mov    %esp,%ebp
c010516a:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010516d:	e8 ca fd ff ff       	call   c0104f3c <__intr_save>
c0105172:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0105175:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c010517a:	8b 40 10             	mov    0x10(%eax),%eax
c010517d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105180:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105184:	8b 55 08             	mov    0x8(%ebp),%edx
c0105187:	89 14 24             	mov    %edx,(%esp)
c010518a:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010518c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010518f:	89 04 24             	mov    %eax,(%esp)
c0105192:	e8 cf fd ff ff       	call   c0104f66 <__intr_restore>
}
c0105197:	c9                   	leave  
c0105198:	c3                   	ret    

c0105199 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0105199:	55                   	push   %ebp
c010519a:	89 e5                	mov    %esp,%ebp
c010519c:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010519f:	e8 98 fd ff ff       	call   c0104f3c <__intr_save>
c01051a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01051a7:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c01051ac:	8b 40 14             	mov    0x14(%eax),%eax
c01051af:	ff d0                	call   *%eax
c01051b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01051b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051b7:	89 04 24             	mov    %eax,(%esp)
c01051ba:	e8 a7 fd ff ff       	call   c0104f66 <__intr_restore>
    return ret;
c01051bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01051c2:	c9                   	leave  
c01051c3:	c3                   	ret    

c01051c4 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01051c4:	55                   	push   %ebp
c01051c5:	89 e5                	mov    %esp,%ebp
c01051c7:	57                   	push   %edi
c01051c8:	56                   	push   %esi
c01051c9:	53                   	push   %ebx
c01051ca:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01051d0:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01051d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01051de:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01051e5:	c7 04 24 6b d4 10 c0 	movl   $0xc010d46b,(%esp)
c01051ec:	e8 67 b1 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01051f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01051f8:	e9 15 01 00 00       	jmp    c0105312 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01051fd:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105200:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105203:	89 d0                	mov    %edx,%eax
c0105205:	c1 e0 02             	shl    $0x2,%eax
c0105208:	01 d0                	add    %edx,%eax
c010520a:	c1 e0 02             	shl    $0x2,%eax
c010520d:	01 c8                	add    %ecx,%eax
c010520f:	8b 50 08             	mov    0x8(%eax),%edx
c0105212:	8b 40 04             	mov    0x4(%eax),%eax
c0105215:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105218:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010521b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010521e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105221:	89 d0                	mov    %edx,%eax
c0105223:	c1 e0 02             	shl    $0x2,%eax
c0105226:	01 d0                	add    %edx,%eax
c0105228:	c1 e0 02             	shl    $0x2,%eax
c010522b:	01 c8                	add    %ecx,%eax
c010522d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105230:	8b 58 10             	mov    0x10(%eax),%ebx
c0105233:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105236:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105239:	01 c8                	add    %ecx,%eax
c010523b:	11 da                	adc    %ebx,%edx
c010523d:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105240:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105243:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105246:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105249:	89 d0                	mov    %edx,%eax
c010524b:	c1 e0 02             	shl    $0x2,%eax
c010524e:	01 d0                	add    %edx,%eax
c0105250:	c1 e0 02             	shl    $0x2,%eax
c0105253:	01 c8                	add    %ecx,%eax
c0105255:	83 c0 14             	add    $0x14,%eax
c0105258:	8b 00                	mov    (%eax),%eax
c010525a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105260:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105263:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105266:	83 c0 ff             	add    $0xffffffff,%eax
c0105269:	83 d2 ff             	adc    $0xffffffff,%edx
c010526c:	89 c6                	mov    %eax,%esi
c010526e:	89 d7                	mov    %edx,%edi
c0105270:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105273:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105276:	89 d0                	mov    %edx,%eax
c0105278:	c1 e0 02             	shl    $0x2,%eax
c010527b:	01 d0                	add    %edx,%eax
c010527d:	c1 e0 02             	shl    $0x2,%eax
c0105280:	01 c8                	add    %ecx,%eax
c0105282:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105285:	8b 58 10             	mov    0x10(%eax),%ebx
c0105288:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010528e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105292:	89 74 24 14          	mov    %esi,0x14(%esp)
c0105296:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010529a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010529d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052a4:	89 54 24 10          	mov    %edx,0x10(%esp)
c01052a8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01052ac:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01052b0:	c7 04 24 78 d4 10 c0 	movl   $0xc010d478,(%esp)
c01052b7:	e8 9c b0 ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01052bc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052c2:	89 d0                	mov    %edx,%eax
c01052c4:	c1 e0 02             	shl    $0x2,%eax
c01052c7:	01 d0                	add    %edx,%eax
c01052c9:	c1 e0 02             	shl    $0x2,%eax
c01052cc:	01 c8                	add    %ecx,%eax
c01052ce:	83 c0 14             	add    $0x14,%eax
c01052d1:	8b 00                	mov    (%eax),%eax
c01052d3:	83 f8 01             	cmp    $0x1,%eax
c01052d6:	75 36                	jne    c010530e <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01052d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01052de:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01052e1:	77 2b                	ja     c010530e <page_init+0x14a>
c01052e3:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01052e6:	72 05                	jb     c01052ed <page_init+0x129>
c01052e8:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01052eb:	73 21                	jae    c010530e <page_init+0x14a>
c01052ed:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01052f1:	77 1b                	ja     c010530e <page_init+0x14a>
c01052f3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01052f7:	72 09                	jb     c0105302 <page_init+0x13e>
c01052f9:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105300:	77 0c                	ja     c010530e <page_init+0x14a>
                maxpa = end;
c0105302:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105305:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105308:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010530b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010530e:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105312:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105315:	8b 00                	mov    (%eax),%eax
c0105317:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010531a:	0f 8f dd fe ff ff    	jg     c01051fd <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105320:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105324:	72 1d                	jb     c0105343 <page_init+0x17f>
c0105326:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010532a:	77 09                	ja     c0105335 <page_init+0x171>
c010532c:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105333:	76 0e                	jbe    c0105343 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105335:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010533c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105343:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105346:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105349:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010534d:	c1 ea 0c             	shr    $0xc,%edx
c0105350:	a3 80 fd 1a c0       	mov    %eax,0xc01afd80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105355:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010535c:	b8 78 1f 1b c0       	mov    $0xc01b1f78,%eax
c0105361:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105364:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105367:	01 d0                	add    %edx,%eax
c0105369:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010536c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010536f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105374:	f7 75 ac             	divl   -0x54(%ebp)
c0105377:	89 d0                	mov    %edx,%eax
c0105379:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010537c:	29 c2                	sub    %eax,%edx
c010537e:	89 d0                	mov    %edx,%eax
c0105380:	a3 90 1e 1b c0       	mov    %eax,0xc01b1e90

    for (i = 0; i < npage; i ++) {
c0105385:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010538c:	eb 27                	jmp    c01053b5 <page_init+0x1f1>
        SetPageReserved(pages + i);
c010538e:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0105393:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105396:	c1 e2 05             	shl    $0x5,%edx
c0105399:	01 d0                	add    %edx,%eax
c010539b:	83 c0 04             	add    $0x4,%eax
c010539e:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01053a5:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01053a8:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01053ab:	8b 55 90             	mov    -0x70(%ebp),%edx
c01053ae:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01053b1:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01053b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053b8:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01053bd:	39 c2                	cmp    %eax,%edx
c01053bf:	72 cd                	jb     c010538e <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01053c1:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01053c6:	c1 e0 05             	shl    $0x5,%eax
c01053c9:	89 c2                	mov    %eax,%edx
c01053cb:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01053d0:	01 d0                	add    %edx,%eax
c01053d2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01053d5:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01053dc:	77 23                	ja     c0105401 <page_init+0x23d>
c01053de:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01053e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01053e5:	c7 44 24 08 a8 d4 10 	movl   $0xc010d4a8,0x8(%esp)
c01053ec:	c0 
c01053ed:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01053f4:	00 
c01053f5:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01053fc:	e8 e5 b9 ff ff       	call   c0100de6 <__panic>
c0105401:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105404:	05 00 00 00 40       	add    $0x40000000,%eax
c0105409:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010540c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105413:	e9 74 01 00 00       	jmp    c010558c <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105418:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010541b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010541e:	89 d0                	mov    %edx,%eax
c0105420:	c1 e0 02             	shl    $0x2,%eax
c0105423:	01 d0                	add    %edx,%eax
c0105425:	c1 e0 02             	shl    $0x2,%eax
c0105428:	01 c8                	add    %ecx,%eax
c010542a:	8b 50 08             	mov    0x8(%eax),%edx
c010542d:	8b 40 04             	mov    0x4(%eax),%eax
c0105430:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105433:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105436:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105439:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010543c:	89 d0                	mov    %edx,%eax
c010543e:	c1 e0 02             	shl    $0x2,%eax
c0105441:	01 d0                	add    %edx,%eax
c0105443:	c1 e0 02             	shl    $0x2,%eax
c0105446:	01 c8                	add    %ecx,%eax
c0105448:	8b 48 0c             	mov    0xc(%eax),%ecx
c010544b:	8b 58 10             	mov    0x10(%eax),%ebx
c010544e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105451:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105454:	01 c8                	add    %ecx,%eax
c0105456:	11 da                	adc    %ebx,%edx
c0105458:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010545b:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c010545e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105461:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105464:	89 d0                	mov    %edx,%eax
c0105466:	c1 e0 02             	shl    $0x2,%eax
c0105469:	01 d0                	add    %edx,%eax
c010546b:	c1 e0 02             	shl    $0x2,%eax
c010546e:	01 c8                	add    %ecx,%eax
c0105470:	83 c0 14             	add    $0x14,%eax
c0105473:	8b 00                	mov    (%eax),%eax
c0105475:	83 f8 01             	cmp    $0x1,%eax
c0105478:	0f 85 0a 01 00 00    	jne    c0105588 <page_init+0x3c4>
            if (begin < freemem) {
c010547e:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105481:	ba 00 00 00 00       	mov    $0x0,%edx
c0105486:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105489:	72 17                	jb     c01054a2 <page_init+0x2de>
c010548b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010548e:	77 05                	ja     c0105495 <page_init+0x2d1>
c0105490:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0105493:	76 0d                	jbe    c01054a2 <page_init+0x2de>
                begin = freemem;
c0105495:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105498:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010549b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01054a2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054a6:	72 1d                	jb     c01054c5 <page_init+0x301>
c01054a8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054ac:	77 09                	ja     c01054b7 <page_init+0x2f3>
c01054ae:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01054b5:	76 0e                	jbe    c01054c5 <page_init+0x301>
                end = KMEMSIZE;
c01054b7:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01054be:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01054c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054c8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054cb:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054ce:	0f 87 b4 00 00 00    	ja     c0105588 <page_init+0x3c4>
c01054d4:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054d7:	72 09                	jb     c01054e2 <page_init+0x31e>
c01054d9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01054dc:	0f 83 a6 00 00 00    	jae    c0105588 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c01054e2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01054e9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01054ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01054ef:	01 d0                	add    %edx,%eax
c01054f1:	83 e8 01             	sub    $0x1,%eax
c01054f4:	89 45 98             	mov    %eax,-0x68(%ebp)
c01054f7:	8b 45 98             	mov    -0x68(%ebp),%eax
c01054fa:	ba 00 00 00 00       	mov    $0x0,%edx
c01054ff:	f7 75 9c             	divl   -0x64(%ebp)
c0105502:	89 d0                	mov    %edx,%eax
c0105504:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105507:	29 c2                	sub    %eax,%edx
c0105509:	89 d0                	mov    %edx,%eax
c010550b:	ba 00 00 00 00       	mov    $0x0,%edx
c0105510:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105513:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105516:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105519:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010551c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010551f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105524:	89 c7                	mov    %eax,%edi
c0105526:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010552c:	89 7d 80             	mov    %edi,-0x80(%ebp)
c010552f:	89 d0                	mov    %edx,%eax
c0105531:	83 e0 00             	and    $0x0,%eax
c0105534:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105537:	8b 45 80             	mov    -0x80(%ebp),%eax
c010553a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010553d:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105540:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105543:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105546:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105549:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010554c:	77 3a                	ja     c0105588 <page_init+0x3c4>
c010554e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105551:	72 05                	jb     c0105558 <page_init+0x394>
c0105553:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105556:	73 30                	jae    c0105588 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105558:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010555b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c010555e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105561:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105564:	29 c8                	sub    %ecx,%eax
c0105566:	19 da                	sbb    %ebx,%edx
c0105568:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010556c:	c1 ea 0c             	shr    $0xc,%edx
c010556f:	89 c3                	mov    %eax,%ebx
c0105571:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105574:	89 04 24             	mov    %eax,(%esp)
c0105577:	e8 8c f8 ff ff       	call   c0104e08 <pa2page>
c010557c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0105580:	89 04 24             	mov    %eax,(%esp)
c0105583:	e8 55 fb ff ff       	call   c01050dd <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0105588:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010558c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010558f:	8b 00                	mov    (%eax),%eax
c0105591:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105594:	0f 8f 7e fe ff ff    	jg     c0105418 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010559a:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01055a0:	5b                   	pop    %ebx
c01055a1:	5e                   	pop    %esi
c01055a2:	5f                   	pop    %edi
c01055a3:	5d                   	pop    %ebp
c01055a4:	c3                   	ret    

c01055a5 <enable_paging>:

static void
enable_paging(void) {
c01055a5:	55                   	push   %ebp
c01055a6:	89 e5                	mov    %esp,%ebp
c01055a8:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01055ab:	a1 8c 1e 1b c0       	mov    0xc01b1e8c,%eax
c01055b0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01055b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01055b6:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01055b9:	0f 20 c0             	mov    %cr0,%eax
c01055bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01055bf:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01055c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01055c5:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01055cc:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01055d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01055d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01055d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055d9:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01055dc:	c9                   	leave  
c01055dd:	c3                   	ret    

c01055de <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01055de:	55                   	push   %ebp
c01055df:	89 e5                	mov    %esp,%ebp
c01055e1:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01055e4:	8b 45 14             	mov    0x14(%ebp),%eax
c01055e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01055ea:	31 d0                	xor    %edx,%eax
c01055ec:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055f1:	85 c0                	test   %eax,%eax
c01055f3:	74 24                	je     c0105619 <boot_map_segment+0x3b>
c01055f5:	c7 44 24 0c da d4 10 	movl   $0xc010d4da,0xc(%esp)
c01055fc:	c0 
c01055fd:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105604:	c0 
c0105605:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010560c:	00 
c010560d:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105614:	e8 cd b7 ff ff       	call   c0100de6 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105619:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105620:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105623:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105628:	89 c2                	mov    %eax,%edx
c010562a:	8b 45 10             	mov    0x10(%ebp),%eax
c010562d:	01 c2                	add    %eax,%edx
c010562f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105632:	01 d0                	add    %edx,%eax
c0105634:	83 e8 01             	sub    $0x1,%eax
c0105637:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010563a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010563d:	ba 00 00 00 00       	mov    $0x0,%edx
c0105642:	f7 75 f0             	divl   -0x10(%ebp)
c0105645:	89 d0                	mov    %edx,%eax
c0105647:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010564a:	29 c2                	sub    %eax,%edx
c010564c:	89 d0                	mov    %edx,%eax
c010564e:	c1 e8 0c             	shr    $0xc,%eax
c0105651:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105654:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105657:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010565a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010565d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105662:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105665:	8b 45 14             	mov    0x14(%ebp),%eax
c0105668:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010566b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010566e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105673:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105676:	eb 6b                	jmp    c01056e3 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105678:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010567f:	00 
c0105680:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105683:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105687:	8b 45 08             	mov    0x8(%ebp),%eax
c010568a:	89 04 24             	mov    %eax,(%esp)
c010568d:	e8 d1 01 00 00       	call   c0105863 <get_pte>
c0105692:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105695:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105699:	75 24                	jne    c01056bf <boot_map_segment+0xe1>
c010569b:	c7 44 24 0c 06 d5 10 	movl   $0xc010d506,0xc(%esp)
c01056a2:	c0 
c01056a3:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01056aa:	c0 
c01056ab:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01056b2:	00 
c01056b3:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01056ba:	e8 27 b7 ff ff       	call   c0100de6 <__panic>
        *ptep = pa | PTE_P | perm;
c01056bf:	8b 45 18             	mov    0x18(%ebp),%eax
c01056c2:	8b 55 14             	mov    0x14(%ebp),%edx
c01056c5:	09 d0                	or     %edx,%eax
c01056c7:	83 c8 01             	or     $0x1,%eax
c01056ca:	89 c2                	mov    %eax,%edx
c01056cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056cf:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056d1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01056d5:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01056dc:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01056e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01056e7:	75 8f                	jne    c0105678 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01056e9:	c9                   	leave  
c01056ea:	c3                   	ret    

c01056eb <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01056eb:	55                   	push   %ebp
c01056ec:	89 e5                	mov    %esp,%ebp
c01056ee:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c01056f1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01056f8:	e8 ff f9 ff ff       	call   c01050fc <alloc_pages>
c01056fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105700:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105704:	75 1c                	jne    c0105722 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105706:	c7 44 24 08 13 d5 10 	movl   $0xc010d513,0x8(%esp)
c010570d:	c0 
c010570e:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105715:	00 
c0105716:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010571d:	e8 c4 b6 ff ff       	call   c0100de6 <__panic>
    }
    return page2kva(p);
c0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105725:	89 04 24             	mov    %eax,(%esp)
c0105728:	e8 20 f7 ff ff       	call   c0104e4d <page2kva>
}
c010572d:	c9                   	leave  
c010572e:	c3                   	ret    

c010572f <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010572f:	55                   	push   %ebp
c0105730:	89 e5                	mov    %esp,%ebp
c0105732:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105735:	e8 70 f9 ff ff       	call   c01050aa <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010573a:	e8 85 fa ff ff       	call   c01051c4 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010573f:	e8 5d 09 00 00       	call   c01060a1 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105744:	e8 a2 ff ff ff       	call   c01056eb <boot_alloc_page>
c0105749:	a3 84 fd 1a c0       	mov    %eax,0xc01afd84
    memset(boot_pgdir, 0, PGSIZE);
c010574e:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0105753:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010575a:	00 
c010575b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105762:	00 
c0105763:	89 04 24             	mov    %eax,(%esp)
c0105766:	e8 11 6d 00 00       	call   c010c47c <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010576b:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0105770:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105773:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010577a:	77 23                	ja     c010579f <pmm_init+0x70>
c010577c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010577f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105783:	c7 44 24 08 a8 d4 10 	movl   $0xc010d4a8,0x8(%esp)
c010578a:	c0 
c010578b:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105792:	00 
c0105793:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010579a:	e8 47 b6 ff ff       	call   c0100de6 <__panic>
c010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057a2:	05 00 00 00 40       	add    $0x40000000,%eax
c01057a7:	a3 8c 1e 1b c0       	mov    %eax,0xc01b1e8c

    check_pgdir();
c01057ac:	e8 0e 09 00 00       	call   c01060bf <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01057b1:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01057b6:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01057bc:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01057c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01057c4:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01057cb:	77 23                	ja     c01057f0 <pmm_init+0xc1>
c01057cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057d0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057d4:	c7 44 24 08 a8 d4 10 	movl   $0xc010d4a8,0x8(%esp)
c01057db:	c0 
c01057dc:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c01057e3:	00 
c01057e4:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01057eb:	e8 f6 b5 ff ff       	call   c0100de6 <__panic>
c01057f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057f3:	05 00 00 00 40       	add    $0x40000000,%eax
c01057f8:	83 c8 03             	or     $0x3,%eax
c01057fb:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01057fd:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0105802:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105809:	00 
c010580a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105811:	00 
c0105812:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105819:	38 
c010581a:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105821:	c0 
c0105822:	89 04 24             	mov    %eax,(%esp)
c0105825:	e8 b4 fd ff ff       	call   c01055de <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010582a:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010582f:	8b 15 84 fd 1a c0    	mov    0xc01afd84,%edx
c0105835:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010583b:	89 10                	mov    %edx,(%eax)

    enable_paging();
c010583d:	e8 63 fd ff ff       	call   c01055a5 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105842:	e8 74 f7 ff ff       	call   c0104fbb <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105847:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010584c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105852:	e8 03 0f 00 00       	call   c010675a <check_boot_pgdir>

    print_pgdir();
c0105857:	e8 8b 13 00 00       	call   c0106be7 <print_pgdir>
    
    kmalloc_init();
c010585c:	e8 e6 f2 ff ff       	call   c0104b47 <kmalloc_init>

}
c0105861:	c9                   	leave  
c0105862:	c3                   	ret    

c0105863 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105863:	55                   	push   %ebp
c0105864:	89 e5                	mov    %esp,%ebp
c0105866:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];//在一级页表项中查找二级页表的物理内存页 la为逻辑地址
c0105869:	8b 45 0c             	mov    0xc(%ebp),%eax
c010586c:	c1 e8 16             	shr    $0x16,%eax
c010586f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105876:	8b 45 08             	mov    0x8(%ebp),%eax
c0105879:	01 d0                	add    %edx,%eax
c010587b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {//如果二级页表项不存在 PTE_P = 1 表示物理内存存在
c010587e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105881:	8b 00                	mov    (%eax),%eax
c0105883:	83 e0 01             	and    $0x1,%eax
c0105886:	85 c0                	test   %eax,%eax
c0105888:	0f 85 af 00 00 00    	jne    c010593d <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c010588e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105892:	74 15                	je     c01058a9 <get_pte+0x46>
c0105894:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010589b:	e8 5c f8 ff ff       	call   c01050fc <alloc_pages>
c01058a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01058a7:	75 0a                	jne    c01058b3 <get_pte+0x50>
            return NULL; // 若不需要创建或者分配物理页失败，返回NULL 否则获得空白物理页给页表
c01058a9:	b8 00 00 00 00       	mov    $0x0,%eax
c01058ae:	e9 e6 00 00 00       	jmp    c0105999 <get_pte+0x136>
        }
        set_page_ref(page, 1);//创建映射
c01058b3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01058ba:	00 
c01058bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058be:	89 04 24             	mov    %eax,(%esp)
c01058c1:	e8 3b f6 ff ff       	call   c0104f01 <set_page_ref>
        uintptr_t pa = page2pa(page); //得到这个path的物理地址
c01058c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058c9:	89 04 24             	mov    %eax,(%esp)
c01058cc:	e8 21 f5 ff ff       	call   c0104df2 <page2pa>
c01058d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE); //物理地址清零
c01058d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01058da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058dd:	c1 e8 0c             	shr    $0xc,%eax
c01058e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058e3:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01058e8:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01058eb:	72 23                	jb     c0105910 <get_pte+0xad>
c01058ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058f4:	c7 44 24 08 04 d4 10 	movl   $0xc010d404,0x8(%esp)
c01058fb:	c0 
c01058fc:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0105903:	00 
c0105904:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010590b:	e8 d6 b4 ff ff       	call   c0100de6 <__panic>
c0105910:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105913:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105918:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010591f:	00 
c0105920:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105927:	00 
c0105928:	89 04 24             	mov    %eax,(%esp)
c010592b:	e8 4c 6b 00 00       	call   c010c47c <memset>
        //*pdep = page2pa(page) | PTE_USER //设置用户权限
        *pdep = pa | PTE_U | PTE_W | PTE_P; //页表项的内容
c0105930:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105933:	83 c8 07             	or     $0x7,%eax
c0105936:	89 c2                	mov    %eax,%edx
c0105938:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010593b:	89 10                	mov    %edx,(%eax)
    }
    //PDE_ADDR : pa + 0xC0000000
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)]; //返回页表物理地址
c010593d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105940:	8b 00                	mov    (%eax),%eax
c0105942:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105947:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010594a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010594d:	c1 e8 0c             	shr    $0xc,%eax
c0105950:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105953:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0105958:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010595b:	72 23                	jb     c0105980 <get_pte+0x11d>
c010595d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105960:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105964:	c7 44 24 08 04 d4 10 	movl   $0xc010d404,0x8(%esp)
c010596b:	c0 
c010596c:	c7 44 24 04 9c 01 00 	movl   $0x19c,0x4(%esp)
c0105973:	00 
c0105974:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010597b:	e8 66 b4 ff ff       	call   c0100de6 <__panic>
c0105980:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105983:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105988:	8b 55 0c             	mov    0xc(%ebp),%edx
c010598b:	c1 ea 0c             	shr    $0xc,%edx
c010598e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105994:	c1 e2 02             	shl    $0x2,%edx
c0105997:	01 d0                	add    %edx,%eax
}
c0105999:	c9                   	leave  
c010599a:	c3                   	ret    

c010599b <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c010599b:	55                   	push   %ebp
c010599c:	89 e5                	mov    %esp,%ebp
c010599e:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01059a1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059a8:	00 
c01059a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01059b3:	89 04 24             	mov    %eax,(%esp)
c01059b6:	e8 a8 fe ff ff       	call   c0105863 <get_pte>
c01059bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01059be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01059c2:	74 08                	je     c01059cc <get_page+0x31>
        *ptep_store = ptep;
c01059c4:	8b 45 10             	mov    0x10(%ebp),%eax
c01059c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01059ca:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01059cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01059d0:	74 1b                	je     c01059ed <get_page+0x52>
c01059d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059d5:	8b 00                	mov    (%eax),%eax
c01059d7:	83 e0 01             	and    $0x1,%eax
c01059da:	85 c0                	test   %eax,%eax
c01059dc:	74 0f                	je     c01059ed <get_page+0x52>
        return pte2page(*ptep);
c01059de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059e1:	8b 00                	mov    (%eax),%eax
c01059e3:	89 04 24             	mov    %eax,(%esp)
c01059e6:	e8 b6 f4 ff ff       	call   c0104ea1 <pte2page>
c01059eb:	eb 05                	jmp    c01059f2 <get_page+0x57>
    }
    return NULL;
c01059ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01059f2:	c9                   	leave  
c01059f3:	c3                   	ret    

c01059f4 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c01059f4:	55                   	push   %ebp
c01059f5:	89 e5                	mov    %esp,%ebp
c01059f7:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
	if (*ptep & PTE_P) {
c01059fa:	8b 45 10             	mov    0x10(%ebp),%eax
c01059fd:	8b 00                	mov    (%eax),%eax
c01059ff:	83 e0 01             	and    $0x1,%eax
c0105a02:	85 c0                	test   %eax,%eax
c0105a04:	74 4d                	je     c0105a53 <page_remove_pte+0x5f>
		struct Page *page = pte2page(*ptep);
c0105a06:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a09:	8b 00                	mov    (%eax),%eax
c0105a0b:	89 04 24             	mov    %eax,(%esp)
c0105a0e:	e8 8e f4 ff ff       	call   c0104ea1 <pte2page>
c0105a13:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (page_ref_dec(page) == 0)
c0105a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a19:	89 04 24             	mov    %eax,(%esp)
c0105a1c:	e8 04 f5 ff ff       	call   c0104f25 <page_ref_dec>
c0105a21:	85 c0                	test   %eax,%eax
c0105a23:	75 13                	jne    c0105a38 <page_remove_pte+0x44>
			free_page(page);
c0105a25:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a2c:	00 
c0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a30:	89 04 24             	mov    %eax,(%esp)
c0105a33:	e8 2f f7 ff ff       	call   c0105167 <free_pages>
		*ptep = 0;
c0105a38:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a3b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(pgdir, la);
c0105a41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a4b:	89 04 24             	mov    %eax,(%esp)
c0105a4e:	e8 1d 05 00 00       	call   c0105f70 <tlb_invalidate>
	}
}
c0105a53:	c9                   	leave  
c0105a54:	c3                   	ret    

c0105a55 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105a55:	55                   	push   %ebp
c0105a56:	89 e5                	mov    %esp,%ebp
c0105a58:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a5e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a63:	85 c0                	test   %eax,%eax
c0105a65:	75 0c                	jne    c0105a73 <unmap_range+0x1e>
c0105a67:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a6a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a6f:	85 c0                	test   %eax,%eax
c0105a71:	74 24                	je     c0105a97 <unmap_range+0x42>
c0105a73:	c7 44 24 0c 2c d5 10 	movl   $0xc010d52c,0xc(%esp)
c0105a7a:	c0 
c0105a7b:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105a82:	c0 
c0105a83:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105a8a:	00 
c0105a8b:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105a92:	e8 4f b3 ff ff       	call   c0100de6 <__panic>
    assert(USER_ACCESS(start, end));
c0105a97:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105a9e:	76 11                	jbe    c0105ab1 <unmap_range+0x5c>
c0105aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aa3:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105aa6:	73 09                	jae    c0105ab1 <unmap_range+0x5c>
c0105aa8:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105aaf:	76 24                	jbe    c0105ad5 <unmap_range+0x80>
c0105ab1:	c7 44 24 0c 55 d5 10 	movl   $0xc010d555,0xc(%esp)
c0105ab8:	c0 
c0105ab9:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105ac0:	c0 
c0105ac1:	c7 44 24 04 d6 01 00 	movl   $0x1d6,0x4(%esp)
c0105ac8:	00 
c0105ac9:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105ad0:	e8 11 b3 ff ff       	call   c0100de6 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105ad5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105adc:	00 
c0105add:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ae0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ae4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ae7:	89 04 24             	mov    %eax,(%esp)
c0105aea:	e8 74 fd ff ff       	call   c0105863 <get_pte>
c0105aef:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105af2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105af6:	75 18                	jne    c0105b10 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105af8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105afb:	05 00 00 40 00       	add    $0x400000,%eax
c0105b00:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b06:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b0b:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b0e:	eb 29                	jmp    c0105b39 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b13:	8b 00                	mov    (%eax),%eax
c0105b15:	85 c0                	test   %eax,%eax
c0105b17:	74 19                	je     c0105b32 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b1c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b23:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b2a:	89 04 24             	mov    %eax,(%esp)
c0105b2d:	e8 c2 fe ff ff       	call   c01059f4 <page_remove_pte>
        }
        start += PGSIZE;
c0105b32:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b3d:	74 08                	je     c0105b47 <unmap_range+0xf2>
c0105b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b42:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b45:	72 8e                	jb     c0105ad5 <unmap_range+0x80>
}
c0105b47:	c9                   	leave  
c0105b48:	c3                   	ret    

c0105b49 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b49:	55                   	push   %ebp
c0105b4a:	89 e5                	mov    %esp,%ebp
c0105b4c:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b52:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b57:	85 c0                	test   %eax,%eax
c0105b59:	75 0c                	jne    c0105b67 <exit_range+0x1e>
c0105b5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b5e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b63:	85 c0                	test   %eax,%eax
c0105b65:	74 24                	je     c0105b8b <exit_range+0x42>
c0105b67:	c7 44 24 0c 2c d5 10 	movl   $0xc010d52c,0xc(%esp)
c0105b6e:	c0 
c0105b6f:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105b76:	c0 
c0105b77:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105b7e:	00 
c0105b7f:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105b86:	e8 5b b2 ff ff       	call   c0100de6 <__panic>
    assert(USER_ACCESS(start, end));
c0105b8b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b92:	76 11                	jbe    c0105ba5 <exit_range+0x5c>
c0105b94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b97:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b9a:	73 09                	jae    c0105ba5 <exit_range+0x5c>
c0105b9c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105ba3:	76 24                	jbe    c0105bc9 <exit_range+0x80>
c0105ba5:	c7 44 24 0c 55 d5 10 	movl   $0xc010d555,0xc(%esp)
c0105bac:	c0 
c0105bad:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105bb4:	c0 
c0105bb5:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105bbc:	00 
c0105bbd:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105bc4:	e8 1d b2 ff ff       	call   c0100de6 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105bc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bd2:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105bd7:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105bda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bdd:	c1 e8 16             	shr    $0x16,%eax
c0105be0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105be3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105be6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105bed:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bf0:	01 d0                	add    %edx,%eax
c0105bf2:	8b 00                	mov    (%eax),%eax
c0105bf4:	83 e0 01             	and    $0x1,%eax
c0105bf7:	85 c0                	test   %eax,%eax
c0105bf9:	74 3e                	je     c0105c39 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105bfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c05:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c08:	01 d0                	add    %edx,%eax
c0105c0a:	8b 00                	mov    (%eax),%eax
c0105c0c:	89 04 24             	mov    %eax,(%esp)
c0105c0f:	e8 cb f2 ff ff       	call   c0104edf <pde2page>
c0105c14:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c1b:	00 
c0105c1c:	89 04 24             	mov    %eax,(%esp)
c0105c1f:	e8 43 f5 ff ff       	call   c0105167 <free_pages>
            pgdir[pde_idx] = 0;
c0105c24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c31:	01 d0                	add    %edx,%eax
c0105c33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c39:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c40:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c44:	74 08                	je     c0105c4e <exit_range+0x105>
c0105c46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c49:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c4c:	72 8c                	jb     c0105bda <exit_range+0x91>
}
c0105c4e:	c9                   	leave  
c0105c4f:	c3                   	ret    

c0105c50 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c50:	55                   	push   %ebp
c0105c51:	89 e5                	mov    %esp,%ebp
c0105c53:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c56:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c59:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c5e:	85 c0                	test   %eax,%eax
c0105c60:	75 0c                	jne    c0105c6e <copy_range+0x1e>
c0105c62:	8b 45 14             	mov    0x14(%ebp),%eax
c0105c65:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c6a:	85 c0                	test   %eax,%eax
c0105c6c:	74 24                	je     c0105c92 <copy_range+0x42>
c0105c6e:	c7 44 24 0c 2c d5 10 	movl   $0xc010d52c,0xc(%esp)
c0105c75:	c0 
c0105c76:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105c7d:	c0 
c0105c7e:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105c85:	00 
c0105c86:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105c8d:	e8 54 b1 ff ff       	call   c0100de6 <__panic>
    assert(USER_ACCESS(start, end));
c0105c92:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105c99:	76 11                	jbe    c0105cac <copy_range+0x5c>
c0105c9b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c9e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ca1:	73 09                	jae    c0105cac <copy_range+0x5c>
c0105ca3:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105caa:	76 24                	jbe    c0105cd0 <copy_range+0x80>
c0105cac:	c7 44 24 0c 55 d5 10 	movl   $0xc010d555,0xc(%esp)
c0105cb3:	c0 
c0105cb4:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105cbb:	c0 
c0105cbc:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c0105cc3:	00 
c0105cc4:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105ccb:	e8 16 b1 ff ff       	call   c0100de6 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105cd0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105cd7:	00 
c0105cd8:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cdb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ce2:	89 04 24             	mov    %eax,(%esp)
c0105ce5:	e8 79 fb ff ff       	call   c0105863 <get_pte>
c0105cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105ced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105cf1:	75 1b                	jne    c0105d0e <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105cf3:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cf6:	05 00 00 40 00       	add    $0x400000,%eax
c0105cfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d01:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d06:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d09:	e9 4c 01 00 00       	jmp    c0105e5a <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d11:	8b 00                	mov    (%eax),%eax
c0105d13:	83 e0 01             	and    $0x1,%eax
c0105d16:	85 c0                	test   %eax,%eax
c0105d18:	0f 84 35 01 00 00    	je     c0105e53 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d1e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d25:	00 
c0105d26:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d30:	89 04 24             	mov    %eax,(%esp)
c0105d33:	e8 2b fb ff ff       	call   c0105863 <get_pte>
c0105d38:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d3f:	75 0a                	jne    c0105d4b <copy_range+0xfb>
                return -E_NO_MEM;
c0105d41:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d46:	e9 26 01 00 00       	jmp    c0105e71 <copy_range+0x221>
            }
			uint32_t perm = (*ptep & PTE_USER);
c0105d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d4e:	8b 00                	mov    (%eax),%eax
c0105d50:	83 e0 07             	and    $0x7,%eax
c0105d53:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//get page from ptep
			struct Page *page = pte2page(*ptep);
c0105d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d59:	8b 00                	mov    (%eax),%eax
c0105d5b:	89 04 24             	mov    %eax,(%esp)
c0105d5e:	e8 3e f1 ff ff       	call   c0104ea1 <pte2page>
c0105d63:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			// alloc a page for process B
			struct Page *npage=alloc_page();
c0105d66:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105d6d:	e8 8a f3 ff ff       	call   c01050fc <alloc_pages>
c0105d72:	89 45 e0             	mov    %eax,-0x20(%ebp)
			assert(page!=NULL);
c0105d75:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105d79:	75 24                	jne    c0105d9f <copy_range+0x14f>
c0105d7b:	c7 44 24 0c 6d d5 10 	movl   $0xc010d56d,0xc(%esp)
c0105d82:	c0 
c0105d83:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105d8a:	c0 
c0105d8b:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105d92:	00 
c0105d93:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105d9a:	e8 47 b0 ff ff       	call   c0100de6 <__panic>
			assert(npage!=NULL);
c0105d9f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105da3:	75 24                	jne    c0105dc9 <copy_range+0x179>
c0105da5:	c7 44 24 0c 78 d5 10 	movl   $0xc010d578,0xc(%esp)
c0105dac:	c0 
c0105dad:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105db4:	c0 
c0105db5:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0105dbc:	00 
c0105dbd:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105dc4:	e8 1d b0 ff ff       	call   c0100de6 <__panic>
			int ret=0;
c0105dc9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			 * (1) find src_kvaddr: the kernel virtual address of page
			 * (2) find dst_kvaddr: the kernel virtual address of npage
			 * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
			 * (4) build the map of phy addr of  nage with the linear addr start
			 */
			void * kva_src = page2kva(page);
c0105dd0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105dd3:	89 04 24             	mov    %eax,(%esp)
c0105dd6:	e8 72 f0 ff ff       	call   c0104e4d <page2kva>
c0105ddb:	89 45 d8             	mov    %eax,-0x28(%ebp)
			void * kva_dst = page2kva(npage);
c0105dde:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105de1:	89 04 24             	mov    %eax,(%esp)
c0105de4:	e8 64 f0 ff ff       	call   c0104e4d <page2kva>
c0105de9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			memcpy(kva_dst, kva_src, PGSIZE);
c0105dec:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105df3:	00 
c0105df4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105df7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dfb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105dfe:	89 04 24             	mov    %eax,(%esp)
c0105e01:	e8 58 67 00 00       	call   c010c55e <memcpy>
			ret = page_insert(to, npage, start, perm);
c0105e06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e09:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e0d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e10:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e14:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e17:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e1e:	89 04 24             	mov    %eax,(%esp)
c0105e21:	e8 91 00 00 00       	call   c0105eb7 <page_insert>
c0105e26:	89 45 dc             	mov    %eax,-0x24(%ebp)
			assert(ret == 0);
c0105e29:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105e2d:	74 24                	je     c0105e53 <copy_range+0x203>
c0105e2f:	c7 44 24 0c 84 d5 10 	movl   $0xc010d584,0xc(%esp)
c0105e36:	c0 
c0105e37:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0105e3e:	c0 
c0105e3f:	c7 44 24 04 26 02 00 	movl   $0x226,0x4(%esp)
c0105e46:	00 
c0105e47:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105e4e:	e8 93 af ff ff       	call   c0100de6 <__panic>
        }
        start += PGSIZE;
c0105e53:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105e5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105e5e:	74 0c                	je     c0105e6c <copy_range+0x21c>
c0105e60:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e63:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105e66:	0f 82 64 fe ff ff    	jb     c0105cd0 <copy_range+0x80>
    return 0;
c0105e6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105e71:	c9                   	leave  
c0105e72:	c3                   	ret    

c0105e73 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105e73:	55                   	push   %ebp
c0105e74:	89 e5                	mov    %esp,%ebp
c0105e76:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105e79:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e80:	00 
c0105e81:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e84:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e8b:	89 04 24             	mov    %eax,(%esp)
c0105e8e:	e8 d0 f9 ff ff       	call   c0105863 <get_pte>
c0105e93:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105e96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e9a:	74 19                	je     c0105eb5 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e9f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ea3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ea6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105eaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ead:	89 04 24             	mov    %eax,(%esp)
c0105eb0:	e8 3f fb ff ff       	call   c01059f4 <page_remove_pte>
    }
}
c0105eb5:	c9                   	leave  
c0105eb6:	c3                   	ret    

c0105eb7 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105eb7:	55                   	push   %ebp
c0105eb8:	89 e5                	mov    %esp,%ebp
c0105eba:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105ebd:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ec4:	00 
c0105ec5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ec8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ecf:	89 04 24             	mov    %eax,(%esp)
c0105ed2:	e8 8c f9 ff ff       	call   c0105863 <get_pte>
c0105ed7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105eda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ede:	75 0a                	jne    c0105eea <page_insert+0x33>
        return -E_NO_MEM;
c0105ee0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105ee5:	e9 84 00 00 00       	jmp    c0105f6e <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105eea:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105eed:	89 04 24             	mov    %eax,(%esp)
c0105ef0:	e8 19 f0 ff ff       	call   c0104f0e <page_ref_inc>
    if (*ptep & PTE_P) {
c0105ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef8:	8b 00                	mov    (%eax),%eax
c0105efa:	83 e0 01             	and    $0x1,%eax
c0105efd:	85 c0                	test   %eax,%eax
c0105eff:	74 3e                	je     c0105f3f <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f04:	8b 00                	mov    (%eax),%eax
c0105f06:	89 04 24             	mov    %eax,(%esp)
c0105f09:	e8 93 ef ff ff       	call   c0104ea1 <pte2page>
c0105f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f14:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f17:	75 0d                	jne    c0105f26 <page_insert+0x6f>
            page_ref_dec(page);
c0105f19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f1c:	89 04 24             	mov    %eax,(%esp)
c0105f1f:	e8 01 f0 ff ff       	call   c0104f25 <page_ref_dec>
c0105f24:	eb 19                	jmp    c0105f3f <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f29:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f34:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f37:	89 04 24             	mov    %eax,(%esp)
c0105f3a:	e8 b5 fa ff ff       	call   c01059f4 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f42:	89 04 24             	mov    %eax,(%esp)
c0105f45:	e8 a8 ee ff ff       	call   c0104df2 <page2pa>
c0105f4a:	0b 45 14             	or     0x14(%ebp),%eax
c0105f4d:	83 c8 01             	or     $0x1,%eax
c0105f50:	89 c2                	mov    %eax,%edx
c0105f52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f55:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105f57:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f61:	89 04 24             	mov    %eax,(%esp)
c0105f64:	e8 07 00 00 00       	call   c0105f70 <tlb_invalidate>
    return 0;
c0105f69:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105f6e:	c9                   	leave  
c0105f6f:	c3                   	ret    

c0105f70 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105f70:	55                   	push   %ebp
c0105f71:	89 e5                	mov    %esp,%ebp
c0105f73:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105f76:	0f 20 d8             	mov    %cr3,%eax
c0105f79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105f7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105f7f:	89 c2                	mov    %eax,%edx
c0105f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f84:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105f87:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105f8e:	77 23                	ja     c0105fb3 <tlb_invalidate+0x43>
c0105f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f93:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f97:	c7 44 24 08 a8 d4 10 	movl   $0xc010d4a8,0x8(%esp)
c0105f9e:	c0 
c0105f9f:	c7 44 24 04 57 02 00 	movl   $0x257,0x4(%esp)
c0105fa6:	00 
c0105fa7:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0105fae:	e8 33 ae ff ff       	call   c0100de6 <__panic>
c0105fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fb6:	05 00 00 00 40       	add    $0x40000000,%eax
c0105fbb:	39 c2                	cmp    %eax,%edx
c0105fbd:	75 0c                	jne    c0105fcb <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105fc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fc8:	0f 01 38             	invlpg (%eax)
    }
}
c0105fcb:	c9                   	leave  
c0105fcc:	c3                   	ret    

c0105fcd <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105fcd:	55                   	push   %ebp
c0105fce:	89 e5                	mov    %esp,%ebp
c0105fd0:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105fd3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105fda:	e8 1d f1 ff ff       	call   c01050fc <alloc_pages>
c0105fdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fe6:	0f 84 b0 00 00 00    	je     c010609c <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105fec:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ff6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ffa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ffd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106001:	8b 45 08             	mov    0x8(%ebp),%eax
c0106004:	89 04 24             	mov    %eax,(%esp)
c0106007:	e8 ab fe ff ff       	call   c0105eb7 <page_insert>
c010600c:	85 c0                	test   %eax,%eax
c010600e:	74 1a                	je     c010602a <pgdir_alloc_page+0x5d>
            free_page(page);
c0106010:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106017:	00 
c0106018:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010601b:	89 04 24             	mov    %eax,(%esp)
c010601e:	e8 44 f1 ff ff       	call   c0105167 <free_pages>
            return NULL;
c0106023:	b8 00 00 00 00       	mov    $0x0,%eax
c0106028:	eb 75                	jmp    c010609f <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010602a:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c010602f:	85 c0                	test   %eax,%eax
c0106031:	74 69                	je     c010609c <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0106033:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0106038:	85 c0                	test   %eax,%eax
c010603a:	74 60                	je     c010609c <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c010603c:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0106041:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106048:	00 
c0106049:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010604c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106050:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106053:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106057:	89 04 24             	mov    %eax,(%esp)
c010605a:	e8 51 0e 00 00       	call   c0106eb0 <swap_map_swappable>
                page->pra_vaddr=la;
c010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106062:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106065:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0106068:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010606b:	89 04 24             	mov    %eax,(%esp)
c010606e:	e8 84 ee ff ff       	call   c0104ef7 <page_ref>
c0106073:	83 f8 01             	cmp    $0x1,%eax
c0106076:	74 24                	je     c010609c <pgdir_alloc_page+0xcf>
c0106078:	c7 44 24 0c 8d d5 10 	movl   $0xc010d58d,0xc(%esp)
c010607f:	c0 
c0106080:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106087:	c0 
c0106088:	c7 44 24 04 6b 02 00 	movl   $0x26b,0x4(%esp)
c010608f:	00 
c0106090:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106097:	e8 4a ad ff ff       	call   c0100de6 <__panic>
            }
        }

    }

    return page;
c010609c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010609f:	c9                   	leave  
c01060a0:	c3                   	ret    

c01060a1 <check_alloc_page>:

static void
check_alloc_page(void) {
c01060a1:	55                   	push   %ebp
c01060a2:	89 e5                	mov    %esp,%ebp
c01060a4:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01060a7:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c01060ac:	8b 40 18             	mov    0x18(%eax),%eax
c01060af:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01060b1:	c7 04 24 a4 d5 10 c0 	movl   $0xc010d5a4,(%esp)
c01060b8:	e8 9b a2 ff ff       	call   c0100358 <cprintf>
}
c01060bd:	c9                   	leave  
c01060be:	c3                   	ret    

c01060bf <check_pgdir>:

static void
check_pgdir(void) {
c01060bf:	55                   	push   %ebp
c01060c0:	89 e5                	mov    %esp,%ebp
c01060c2:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01060c5:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01060ca:	3d 00 80 03 00       	cmp    $0x38000,%eax
c01060cf:	76 24                	jbe    c01060f5 <check_pgdir+0x36>
c01060d1:	c7 44 24 0c c3 d5 10 	movl   $0xc010d5c3,0xc(%esp)
c01060d8:	c0 
c01060d9:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01060e0:	c0 
c01060e1:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c01060e8:	00 
c01060e9:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01060f0:	e8 f1 ac ff ff       	call   c0100de6 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01060f5:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01060fa:	85 c0                	test   %eax,%eax
c01060fc:	74 0e                	je     c010610c <check_pgdir+0x4d>
c01060fe:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106103:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106108:	85 c0                	test   %eax,%eax
c010610a:	74 24                	je     c0106130 <check_pgdir+0x71>
c010610c:	c7 44 24 0c e0 d5 10 	movl   $0xc010d5e0,0xc(%esp)
c0106113:	c0 
c0106114:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010611b:	c0 
c010611c:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c0106123:	00 
c0106124:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010612b:	e8 b6 ac ff ff       	call   c0100de6 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106130:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106135:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010613c:	00 
c010613d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106144:	00 
c0106145:	89 04 24             	mov    %eax,(%esp)
c0106148:	e8 4e f8 ff ff       	call   c010599b <get_page>
c010614d:	85 c0                	test   %eax,%eax
c010614f:	74 24                	je     c0106175 <check_pgdir+0xb6>
c0106151:	c7 44 24 0c 18 d6 10 	movl   $0xc010d618,0xc(%esp)
c0106158:	c0 
c0106159:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106160:	c0 
c0106161:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0106168:	00 
c0106169:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106170:	e8 71 ac ff ff       	call   c0100de6 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0106175:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010617c:	e8 7b ef ff ff       	call   c01050fc <alloc_pages>
c0106181:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0106184:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106189:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106190:	00 
c0106191:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106198:	00 
c0106199:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010619c:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061a0:	89 04 24             	mov    %eax,(%esp)
c01061a3:	e8 0f fd ff ff       	call   c0105eb7 <page_insert>
c01061a8:	85 c0                	test   %eax,%eax
c01061aa:	74 24                	je     c01061d0 <check_pgdir+0x111>
c01061ac:	c7 44 24 0c 40 d6 10 	movl   $0xc010d640,0xc(%esp)
c01061b3:	c0 
c01061b4:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01061bb:	c0 
c01061bc:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c01061c3:	00 
c01061c4:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01061cb:	e8 16 ac ff ff       	call   c0100de6 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01061d0:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01061d5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061dc:	00 
c01061dd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01061e4:	00 
c01061e5:	89 04 24             	mov    %eax,(%esp)
c01061e8:	e8 76 f6 ff ff       	call   c0105863 <get_pte>
c01061ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01061f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01061f4:	75 24                	jne    c010621a <check_pgdir+0x15b>
c01061f6:	c7 44 24 0c 6c d6 10 	movl   $0xc010d66c,0xc(%esp)
c01061fd:	c0 
c01061fe:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106205:	c0 
c0106206:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c010620d:	00 
c010620e:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106215:	e8 cc ab ff ff       	call   c0100de6 <__panic>
    assert(pte2page(*ptep) == p1);
c010621a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010621d:	8b 00                	mov    (%eax),%eax
c010621f:	89 04 24             	mov    %eax,(%esp)
c0106222:	e8 7a ec ff ff       	call   c0104ea1 <pte2page>
c0106227:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010622a:	74 24                	je     c0106250 <check_pgdir+0x191>
c010622c:	c7 44 24 0c 99 d6 10 	movl   $0xc010d699,0xc(%esp)
c0106233:	c0 
c0106234:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010623b:	c0 
c010623c:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0106243:	00 
c0106244:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010624b:	e8 96 ab ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p1) == 1);
c0106250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106253:	89 04 24             	mov    %eax,(%esp)
c0106256:	e8 9c ec ff ff       	call   c0104ef7 <page_ref>
c010625b:	83 f8 01             	cmp    $0x1,%eax
c010625e:	74 24                	je     c0106284 <check_pgdir+0x1c5>
c0106260:	c7 44 24 0c af d6 10 	movl   $0xc010d6af,0xc(%esp)
c0106267:	c0 
c0106268:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010626f:	c0 
c0106270:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c0106277:	00 
c0106278:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010627f:	e8 62 ab ff ff       	call   c0100de6 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0106284:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106289:	8b 00                	mov    (%eax),%eax
c010628b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106290:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106293:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106296:	c1 e8 0c             	shr    $0xc,%eax
c0106299:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010629c:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01062a1:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01062a4:	72 23                	jb     c01062c9 <check_pgdir+0x20a>
c01062a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062ad:	c7 44 24 08 04 d4 10 	movl   $0xc010d404,0x8(%esp)
c01062b4:	c0 
c01062b5:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c01062bc:	00 
c01062bd:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01062c4:	e8 1d ab ff ff       	call   c0100de6 <__panic>
c01062c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062cc:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01062d1:	83 c0 04             	add    $0x4,%eax
c01062d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01062d7:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01062dc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062e3:	00 
c01062e4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01062eb:	00 
c01062ec:	89 04 24             	mov    %eax,(%esp)
c01062ef:	e8 6f f5 ff ff       	call   c0105863 <get_pte>
c01062f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01062f7:	74 24                	je     c010631d <check_pgdir+0x25e>
c01062f9:	c7 44 24 0c c4 d6 10 	movl   $0xc010d6c4,0xc(%esp)
c0106300:	c0 
c0106301:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106308:	c0 
c0106309:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106310:	00 
c0106311:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106318:	e8 c9 aa ff ff       	call   c0100de6 <__panic>

    p2 = alloc_page();
c010631d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106324:	e8 d3 ed ff ff       	call   c01050fc <alloc_pages>
c0106329:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010632c:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106331:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106338:	00 
c0106339:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106340:	00 
c0106341:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106344:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106348:	89 04 24             	mov    %eax,(%esp)
c010634b:	e8 67 fb ff ff       	call   c0105eb7 <page_insert>
c0106350:	85 c0                	test   %eax,%eax
c0106352:	74 24                	je     c0106378 <check_pgdir+0x2b9>
c0106354:	c7 44 24 0c ec d6 10 	movl   $0xc010d6ec,0xc(%esp)
c010635b:	c0 
c010635c:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106363:	c0 
c0106364:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c010636b:	00 
c010636c:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106373:	e8 6e aa ff ff       	call   c0100de6 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106378:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010637d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106384:	00 
c0106385:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010638c:	00 
c010638d:	89 04 24             	mov    %eax,(%esp)
c0106390:	e8 ce f4 ff ff       	call   c0105863 <get_pte>
c0106395:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106398:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010639c:	75 24                	jne    c01063c2 <check_pgdir+0x303>
c010639e:	c7 44 24 0c 24 d7 10 	movl   $0xc010d724,0xc(%esp)
c01063a5:	c0 
c01063a6:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01063ad:	c0 
c01063ae:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01063b5:	00 
c01063b6:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01063bd:	e8 24 aa ff ff       	call   c0100de6 <__panic>
    assert(*ptep & PTE_U);
c01063c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063c5:	8b 00                	mov    (%eax),%eax
c01063c7:	83 e0 04             	and    $0x4,%eax
c01063ca:	85 c0                	test   %eax,%eax
c01063cc:	75 24                	jne    c01063f2 <check_pgdir+0x333>
c01063ce:	c7 44 24 0c 54 d7 10 	movl   $0xc010d754,0xc(%esp)
c01063d5:	c0 
c01063d6:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01063dd:	c0 
c01063de:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01063e5:	00 
c01063e6:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01063ed:	e8 f4 a9 ff ff       	call   c0100de6 <__panic>
    assert(*ptep & PTE_W);
c01063f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063f5:	8b 00                	mov    (%eax),%eax
c01063f7:	83 e0 02             	and    $0x2,%eax
c01063fa:	85 c0                	test   %eax,%eax
c01063fc:	75 24                	jne    c0106422 <check_pgdir+0x363>
c01063fe:	c7 44 24 0c 62 d7 10 	movl   $0xc010d762,0xc(%esp)
c0106405:	c0 
c0106406:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010640d:	c0 
c010640e:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c0106415:	00 
c0106416:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010641d:	e8 c4 a9 ff ff       	call   c0100de6 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106422:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106427:	8b 00                	mov    (%eax),%eax
c0106429:	83 e0 04             	and    $0x4,%eax
c010642c:	85 c0                	test   %eax,%eax
c010642e:	75 24                	jne    c0106454 <check_pgdir+0x395>
c0106430:	c7 44 24 0c 70 d7 10 	movl   $0xc010d770,0xc(%esp)
c0106437:	c0 
c0106438:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010643f:	c0 
c0106440:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c0106447:	00 
c0106448:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010644f:	e8 92 a9 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p2) == 1);
c0106454:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106457:	89 04 24             	mov    %eax,(%esp)
c010645a:	e8 98 ea ff ff       	call   c0104ef7 <page_ref>
c010645f:	83 f8 01             	cmp    $0x1,%eax
c0106462:	74 24                	je     c0106488 <check_pgdir+0x3c9>
c0106464:	c7 44 24 0c 86 d7 10 	movl   $0xc010d786,0xc(%esp)
c010646b:	c0 
c010646c:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106473:	c0 
c0106474:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c010647b:	00 
c010647c:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106483:	e8 5e a9 ff ff       	call   c0100de6 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106488:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010648d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106494:	00 
c0106495:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010649c:	00 
c010649d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01064a0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064a4:	89 04 24             	mov    %eax,(%esp)
c01064a7:	e8 0b fa ff ff       	call   c0105eb7 <page_insert>
c01064ac:	85 c0                	test   %eax,%eax
c01064ae:	74 24                	je     c01064d4 <check_pgdir+0x415>
c01064b0:	c7 44 24 0c 98 d7 10 	movl   $0xc010d798,0xc(%esp)
c01064b7:	c0 
c01064b8:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01064bf:	c0 
c01064c0:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c01064c7:	00 
c01064c8:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01064cf:	e8 12 a9 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p1) == 2);
c01064d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064d7:	89 04 24             	mov    %eax,(%esp)
c01064da:	e8 18 ea ff ff       	call   c0104ef7 <page_ref>
c01064df:	83 f8 02             	cmp    $0x2,%eax
c01064e2:	74 24                	je     c0106508 <check_pgdir+0x449>
c01064e4:	c7 44 24 0c c4 d7 10 	movl   $0xc010d7c4,0xc(%esp)
c01064eb:	c0 
c01064ec:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01064f3:	c0 
c01064f4:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c01064fb:	00 
c01064fc:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106503:	e8 de a8 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p2) == 0);
c0106508:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010650b:	89 04 24             	mov    %eax,(%esp)
c010650e:	e8 e4 e9 ff ff       	call   c0104ef7 <page_ref>
c0106513:	85 c0                	test   %eax,%eax
c0106515:	74 24                	je     c010653b <check_pgdir+0x47c>
c0106517:	c7 44 24 0c d6 d7 10 	movl   $0xc010d7d6,0xc(%esp)
c010651e:	c0 
c010651f:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106526:	c0 
c0106527:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010652e:	00 
c010652f:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106536:	e8 ab a8 ff ff       	call   c0100de6 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010653b:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106540:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106547:	00 
c0106548:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010654f:	00 
c0106550:	89 04 24             	mov    %eax,(%esp)
c0106553:	e8 0b f3 ff ff       	call   c0105863 <get_pte>
c0106558:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010655b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010655f:	75 24                	jne    c0106585 <check_pgdir+0x4c6>
c0106561:	c7 44 24 0c 24 d7 10 	movl   $0xc010d724,0xc(%esp)
c0106568:	c0 
c0106569:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106570:	c0 
c0106571:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0106578:	00 
c0106579:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106580:	e8 61 a8 ff ff       	call   c0100de6 <__panic>
    assert(pte2page(*ptep) == p1);
c0106585:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106588:	8b 00                	mov    (%eax),%eax
c010658a:	89 04 24             	mov    %eax,(%esp)
c010658d:	e8 0f e9 ff ff       	call   c0104ea1 <pte2page>
c0106592:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106595:	74 24                	je     c01065bb <check_pgdir+0x4fc>
c0106597:	c7 44 24 0c 99 d6 10 	movl   $0xc010d699,0xc(%esp)
c010659e:	c0 
c010659f:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01065a6:	c0 
c01065a7:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01065ae:	00 
c01065af:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01065b6:	e8 2b a8 ff ff       	call   c0100de6 <__panic>
    assert((*ptep & PTE_U) == 0);
c01065bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065be:	8b 00                	mov    (%eax),%eax
c01065c0:	83 e0 04             	and    $0x4,%eax
c01065c3:	85 c0                	test   %eax,%eax
c01065c5:	74 24                	je     c01065eb <check_pgdir+0x52c>
c01065c7:	c7 44 24 0c e8 d7 10 	movl   $0xc010d7e8,0xc(%esp)
c01065ce:	c0 
c01065cf:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01065d6:	c0 
c01065d7:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01065de:	00 
c01065df:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01065e6:	e8 fb a7 ff ff       	call   c0100de6 <__panic>

    page_remove(boot_pgdir, 0x0);
c01065eb:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01065f0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01065f7:	00 
c01065f8:	89 04 24             	mov    %eax,(%esp)
c01065fb:	e8 73 f8 ff ff       	call   c0105e73 <page_remove>
    assert(page_ref(p1) == 1);
c0106600:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106603:	89 04 24             	mov    %eax,(%esp)
c0106606:	e8 ec e8 ff ff       	call   c0104ef7 <page_ref>
c010660b:	83 f8 01             	cmp    $0x1,%eax
c010660e:	74 24                	je     c0106634 <check_pgdir+0x575>
c0106610:	c7 44 24 0c af d6 10 	movl   $0xc010d6af,0xc(%esp)
c0106617:	c0 
c0106618:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010661f:	c0 
c0106620:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c0106627:	00 
c0106628:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010662f:	e8 b2 a7 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p2) == 0);
c0106634:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106637:	89 04 24             	mov    %eax,(%esp)
c010663a:	e8 b8 e8 ff ff       	call   c0104ef7 <page_ref>
c010663f:	85 c0                	test   %eax,%eax
c0106641:	74 24                	je     c0106667 <check_pgdir+0x5a8>
c0106643:	c7 44 24 0c d6 d7 10 	movl   $0xc010d7d6,0xc(%esp)
c010664a:	c0 
c010664b:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106652:	c0 
c0106653:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c010665a:	00 
c010665b:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106662:	e8 7f a7 ff ff       	call   c0100de6 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0106667:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010666c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106673:	00 
c0106674:	89 04 24             	mov    %eax,(%esp)
c0106677:	e8 f7 f7 ff ff       	call   c0105e73 <page_remove>
    assert(page_ref(p1) == 0);
c010667c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010667f:	89 04 24             	mov    %eax,(%esp)
c0106682:	e8 70 e8 ff ff       	call   c0104ef7 <page_ref>
c0106687:	85 c0                	test   %eax,%eax
c0106689:	74 24                	je     c01066af <check_pgdir+0x5f0>
c010668b:	c7 44 24 0c fd d7 10 	movl   $0xc010d7fd,0xc(%esp)
c0106692:	c0 
c0106693:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010669a:	c0 
c010669b:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c01066a2:	00 
c01066a3:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01066aa:	e8 37 a7 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p2) == 0);
c01066af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066b2:	89 04 24             	mov    %eax,(%esp)
c01066b5:	e8 3d e8 ff ff       	call   c0104ef7 <page_ref>
c01066ba:	85 c0                	test   %eax,%eax
c01066bc:	74 24                	je     c01066e2 <check_pgdir+0x623>
c01066be:	c7 44 24 0c d6 d7 10 	movl   $0xc010d7d6,0xc(%esp)
c01066c5:	c0 
c01066c6:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01066cd:	c0 
c01066ce:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c01066d5:	00 
c01066d6:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01066dd:	e8 04 a7 ff ff       	call   c0100de6 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01066e2:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01066e7:	8b 00                	mov    (%eax),%eax
c01066e9:	89 04 24             	mov    %eax,(%esp)
c01066ec:	e8 ee e7 ff ff       	call   c0104edf <pde2page>
c01066f1:	89 04 24             	mov    %eax,(%esp)
c01066f4:	e8 fe e7 ff ff       	call   c0104ef7 <page_ref>
c01066f9:	83 f8 01             	cmp    $0x1,%eax
c01066fc:	74 24                	je     c0106722 <check_pgdir+0x663>
c01066fe:	c7 44 24 0c 10 d8 10 	movl   $0xc010d810,0xc(%esp)
c0106705:	c0 
c0106706:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010670d:	c0 
c010670e:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
c0106715:	00 
c0106716:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010671d:	e8 c4 a6 ff ff       	call   c0100de6 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106722:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106727:	8b 00                	mov    (%eax),%eax
c0106729:	89 04 24             	mov    %eax,(%esp)
c010672c:	e8 ae e7 ff ff       	call   c0104edf <pde2page>
c0106731:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106738:	00 
c0106739:	89 04 24             	mov    %eax,(%esp)
c010673c:	e8 26 ea ff ff       	call   c0105167 <free_pages>
    boot_pgdir[0] = 0;
c0106741:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106746:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c010674c:	c7 04 24 37 d8 10 c0 	movl   $0xc010d837,(%esp)
c0106753:	e8 00 9c ff ff       	call   c0100358 <cprintf>
}
c0106758:	c9                   	leave  
c0106759:	c3                   	ret    

c010675a <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010675a:	55                   	push   %ebp
c010675b:	89 e5                	mov    %esp,%ebp
c010675d:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106760:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106767:	e9 ca 00 00 00       	jmp    c0106836 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010676c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010676f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106772:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106775:	c1 e8 0c             	shr    $0xc,%eax
c0106778:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010677b:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0106780:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106783:	72 23                	jb     c01067a8 <check_boot_pgdir+0x4e>
c0106785:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106788:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010678c:	c7 44 24 08 04 d4 10 	movl   $0xc010d404,0x8(%esp)
c0106793:	c0 
c0106794:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c010679b:	00 
c010679c:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01067a3:	e8 3e a6 ff ff       	call   c0100de6 <__panic>
c01067a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067ab:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01067b0:	89 c2                	mov    %eax,%edx
c01067b2:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01067b7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01067be:	00 
c01067bf:	89 54 24 04          	mov    %edx,0x4(%esp)
c01067c3:	89 04 24             	mov    %eax,(%esp)
c01067c6:	e8 98 f0 ff ff       	call   c0105863 <get_pte>
c01067cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01067ce:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01067d2:	75 24                	jne    c01067f8 <check_boot_pgdir+0x9e>
c01067d4:	c7 44 24 0c 54 d8 10 	movl   $0xc010d854,0xc(%esp)
c01067db:	c0 
c01067dc:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01067e3:	c0 
c01067e4:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c01067eb:	00 
c01067ec:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01067f3:	e8 ee a5 ff ff       	call   c0100de6 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01067f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01067fb:	8b 00                	mov    (%eax),%eax
c01067fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106802:	89 c2                	mov    %eax,%edx
c0106804:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106807:	39 c2                	cmp    %eax,%edx
c0106809:	74 24                	je     c010682f <check_boot_pgdir+0xd5>
c010680b:	c7 44 24 0c 91 d8 10 	movl   $0xc010d891,0xc(%esp)
c0106812:	c0 
c0106813:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c010681a:	c0 
c010681b:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106822:	00 
c0106823:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c010682a:	e8 b7 a5 ff ff       	call   c0100de6 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010682f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0106836:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106839:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010683e:	39 c2                	cmp    %eax,%edx
c0106840:	0f 82 26 ff ff ff    	jb     c010676c <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0106846:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010684b:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106850:	8b 00                	mov    (%eax),%eax
c0106852:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106857:	89 c2                	mov    %eax,%edx
c0106859:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010685e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106861:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106868:	77 23                	ja     c010688d <check_boot_pgdir+0x133>
c010686a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010686d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106871:	c7 44 24 08 a8 d4 10 	movl   $0xc010d4a8,0x8(%esp)
c0106878:	c0 
c0106879:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c0106880:	00 
c0106881:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106888:	e8 59 a5 ff ff       	call   c0100de6 <__panic>
c010688d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106890:	05 00 00 00 40       	add    $0x40000000,%eax
c0106895:	39 c2                	cmp    %eax,%edx
c0106897:	74 24                	je     c01068bd <check_boot_pgdir+0x163>
c0106899:	c7 44 24 0c a8 d8 10 	movl   $0xc010d8a8,0xc(%esp)
c01068a0:	c0 
c01068a1:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01068a8:	c0 
c01068a9:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c01068b0:	00 
c01068b1:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01068b8:	e8 29 a5 ff ff       	call   c0100de6 <__panic>

    assert(boot_pgdir[0] == 0);
c01068bd:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01068c2:	8b 00                	mov    (%eax),%eax
c01068c4:	85 c0                	test   %eax,%eax
c01068c6:	74 24                	je     c01068ec <check_boot_pgdir+0x192>
c01068c8:	c7 44 24 0c dc d8 10 	movl   $0xc010d8dc,0xc(%esp)
c01068cf:	c0 
c01068d0:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01068d7:	c0 
c01068d8:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c01068df:	00 
c01068e0:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01068e7:	e8 fa a4 ff ff       	call   c0100de6 <__panic>

    struct Page *p;
    p = alloc_page();
c01068ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01068f3:	e8 04 e8 ff ff       	call   c01050fc <alloc_pages>
c01068f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01068fb:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106900:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106907:	00 
c0106908:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010690f:	00 
c0106910:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106913:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106917:	89 04 24             	mov    %eax,(%esp)
c010691a:	e8 98 f5 ff ff       	call   c0105eb7 <page_insert>
c010691f:	85 c0                	test   %eax,%eax
c0106921:	74 24                	je     c0106947 <check_boot_pgdir+0x1ed>
c0106923:	c7 44 24 0c f0 d8 10 	movl   $0xc010d8f0,0xc(%esp)
c010692a:	c0 
c010692b:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106932:	c0 
c0106933:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c010693a:	00 
c010693b:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106942:	e8 9f a4 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p) == 1);
c0106947:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010694a:	89 04 24             	mov    %eax,(%esp)
c010694d:	e8 a5 e5 ff ff       	call   c0104ef7 <page_ref>
c0106952:	83 f8 01             	cmp    $0x1,%eax
c0106955:	74 24                	je     c010697b <check_boot_pgdir+0x221>
c0106957:	c7 44 24 0c 1e d9 10 	movl   $0xc010d91e,0xc(%esp)
c010695e:	c0 
c010695f:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106966:	c0 
c0106967:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c010696e:	00 
c010696f:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106976:	e8 6b a4 ff ff       	call   c0100de6 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c010697b:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106980:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106987:	00 
c0106988:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c010698f:	00 
c0106990:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106993:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106997:	89 04 24             	mov    %eax,(%esp)
c010699a:	e8 18 f5 ff ff       	call   c0105eb7 <page_insert>
c010699f:	85 c0                	test   %eax,%eax
c01069a1:	74 24                	je     c01069c7 <check_boot_pgdir+0x26d>
c01069a3:	c7 44 24 0c 30 d9 10 	movl   $0xc010d930,0xc(%esp)
c01069aa:	c0 
c01069ab:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01069b2:	c0 
c01069b3:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01069ba:	00 
c01069bb:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01069c2:	e8 1f a4 ff ff       	call   c0100de6 <__panic>
    assert(page_ref(p) == 2);
c01069c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069ca:	89 04 24             	mov    %eax,(%esp)
c01069cd:	e8 25 e5 ff ff       	call   c0104ef7 <page_ref>
c01069d2:	83 f8 02             	cmp    $0x2,%eax
c01069d5:	74 24                	je     c01069fb <check_boot_pgdir+0x2a1>
c01069d7:	c7 44 24 0c 67 d9 10 	movl   $0xc010d967,0xc(%esp)
c01069de:	c0 
c01069df:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c01069e6:	c0 
c01069e7:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c01069ee:	00 
c01069ef:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c01069f6:	e8 eb a3 ff ff       	call   c0100de6 <__panic>

    const char *str = "ucore: Hello world!!";
c01069fb:	c7 45 dc 78 d9 10 c0 	movl   $0xc010d978,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a02:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a09:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a10:	e8 90 57 00 00       	call   c010c1a5 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a15:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a1c:	00 
c0106a1d:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a24:	e8 f5 57 00 00       	call   c010c21e <strcmp>
c0106a29:	85 c0                	test   %eax,%eax
c0106a2b:	74 24                	je     c0106a51 <check_boot_pgdir+0x2f7>
c0106a2d:	c7 44 24 0c 90 d9 10 	movl   $0xc010d990,0xc(%esp)
c0106a34:	c0 
c0106a35:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106a3c:	c0 
c0106a3d:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c0106a44:	00 
c0106a45:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106a4c:	e8 95 a3 ff ff       	call   c0100de6 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106a51:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a54:	89 04 24             	mov    %eax,(%esp)
c0106a57:	e8 f1 e3 ff ff       	call   c0104e4d <page2kva>
c0106a5c:	05 00 01 00 00       	add    $0x100,%eax
c0106a61:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106a64:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a6b:	e8 dd 56 00 00       	call   c010c14d <strlen>
c0106a70:	85 c0                	test   %eax,%eax
c0106a72:	74 24                	je     c0106a98 <check_boot_pgdir+0x33e>
c0106a74:	c7 44 24 0c c8 d9 10 	movl   $0xc010d9c8,0xc(%esp)
c0106a7b:	c0 
c0106a7c:	c7 44 24 08 f1 d4 10 	movl   $0xc010d4f1,0x8(%esp)
c0106a83:	c0 
c0106a84:	c7 44 24 04 ca 02 00 	movl   $0x2ca,0x4(%esp)
c0106a8b:	00 
c0106a8c:	c7 04 24 cc d4 10 c0 	movl   $0xc010d4cc,(%esp)
c0106a93:	e8 4e a3 ff ff       	call   c0100de6 <__panic>

    free_page(p);
c0106a98:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a9f:	00 
c0106aa0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aa3:	89 04 24             	mov    %eax,(%esp)
c0106aa6:	e8 bc e6 ff ff       	call   c0105167 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106aab:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106ab0:	8b 00                	mov    (%eax),%eax
c0106ab2:	89 04 24             	mov    %eax,(%esp)
c0106ab5:	e8 25 e4 ff ff       	call   c0104edf <pde2page>
c0106aba:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106ac1:	00 
c0106ac2:	89 04 24             	mov    %eax,(%esp)
c0106ac5:	e8 9d e6 ff ff       	call   c0105167 <free_pages>
    boot_pgdir[0] = 0;
c0106aca:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106acf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106ad5:	c7 04 24 ec d9 10 c0 	movl   $0xc010d9ec,(%esp)
c0106adc:	e8 77 98 ff ff       	call   c0100358 <cprintf>
}
c0106ae1:	c9                   	leave  
c0106ae2:	c3                   	ret    

c0106ae3 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106ae3:	55                   	push   %ebp
c0106ae4:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106ae6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ae9:	83 e0 04             	and    $0x4,%eax
c0106aec:	85 c0                	test   %eax,%eax
c0106aee:	74 07                	je     c0106af7 <perm2str+0x14>
c0106af0:	b8 75 00 00 00       	mov    $0x75,%eax
c0106af5:	eb 05                	jmp    c0106afc <perm2str+0x19>
c0106af7:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106afc:	a2 08 fe 1a c0       	mov    %al,0xc01afe08
    str[1] = 'r';
c0106b01:	c6 05 09 fe 1a c0 72 	movb   $0x72,0xc01afe09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b0b:	83 e0 02             	and    $0x2,%eax
c0106b0e:	85 c0                	test   %eax,%eax
c0106b10:	74 07                	je     c0106b19 <perm2str+0x36>
c0106b12:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b17:	eb 05                	jmp    c0106b1e <perm2str+0x3b>
c0106b19:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b1e:	a2 0a fe 1a c0       	mov    %al,0xc01afe0a
    str[3] = '\0';
c0106b23:	c6 05 0b fe 1a c0 00 	movb   $0x0,0xc01afe0b
    return str;
c0106b2a:	b8 08 fe 1a c0       	mov    $0xc01afe08,%eax
}
c0106b2f:	5d                   	pop    %ebp
c0106b30:	c3                   	ret    

c0106b31 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106b31:	55                   	push   %ebp
c0106b32:	89 e5                	mov    %esp,%ebp
c0106b34:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b37:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b3a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b3d:	72 0a                	jb     c0106b49 <get_pgtable_items+0x18>
        return 0;
c0106b3f:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b44:	e9 9c 00 00 00       	jmp    c0106be5 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b49:	eb 04                	jmp    c0106b4f <get_pgtable_items+0x1e>
        start ++;
c0106b4b:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b52:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b55:	73 18                	jae    c0106b6f <get_pgtable_items+0x3e>
c0106b57:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b61:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b64:	01 d0                	add    %edx,%eax
c0106b66:	8b 00                	mov    (%eax),%eax
c0106b68:	83 e0 01             	and    $0x1,%eax
c0106b6b:	85 c0                	test   %eax,%eax
c0106b6d:	74 dc                	je     c0106b4b <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106b6f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b72:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b75:	73 69                	jae    c0106be0 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106b77:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106b7b:	74 08                	je     c0106b85 <get_pgtable_items+0x54>
            *left_store = start;
c0106b7d:	8b 45 18             	mov    0x18(%ebp),%eax
c0106b80:	8b 55 10             	mov    0x10(%ebp),%edx
c0106b83:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106b85:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b88:	8d 50 01             	lea    0x1(%eax),%edx
c0106b8b:	89 55 10             	mov    %edx,0x10(%ebp)
c0106b8e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b95:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b98:	01 d0                	add    %edx,%eax
c0106b9a:	8b 00                	mov    (%eax),%eax
c0106b9c:	83 e0 07             	and    $0x7,%eax
c0106b9f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ba2:	eb 04                	jmp    c0106ba8 <get_pgtable_items+0x77>
            start ++;
c0106ba4:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ba8:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bab:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bae:	73 1d                	jae    c0106bcd <get_pgtable_items+0x9c>
c0106bb0:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bba:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bbd:	01 d0                	add    %edx,%eax
c0106bbf:	8b 00                	mov    (%eax),%eax
c0106bc1:	83 e0 07             	and    $0x7,%eax
c0106bc4:	89 c2                	mov    %eax,%edx
c0106bc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bc9:	39 c2                	cmp    %eax,%edx
c0106bcb:	74 d7                	je     c0106ba4 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106bcd:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106bd1:	74 08                	je     c0106bdb <get_pgtable_items+0xaa>
            *right_store = start;
c0106bd3:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106bd6:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bd9:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106bdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bde:	eb 05                	jmp    c0106be5 <get_pgtable_items+0xb4>
    }
    return 0;
c0106be0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106be5:	c9                   	leave  
c0106be6:	c3                   	ret    

c0106be7 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106be7:	55                   	push   %ebp
c0106be8:	89 e5                	mov    %esp,%ebp
c0106bea:	57                   	push   %edi
c0106beb:	56                   	push   %esi
c0106bec:	53                   	push   %ebx
c0106bed:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106bf0:	c7 04 24 0c da 10 c0 	movl   $0xc010da0c,(%esp)
c0106bf7:	e8 5c 97 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106bfc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c03:	e9 fa 00 00 00       	jmp    c0106d02 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c0b:	89 04 24             	mov    %eax,(%esp)
c0106c0e:	e8 d0 fe ff ff       	call   c0106ae3 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c13:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c19:	29 d1                	sub    %edx,%ecx
c0106c1b:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c1d:	89 d6                	mov    %edx,%esi
c0106c1f:	c1 e6 16             	shl    $0x16,%esi
c0106c22:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106c25:	89 d3                	mov    %edx,%ebx
c0106c27:	c1 e3 16             	shl    $0x16,%ebx
c0106c2a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c2d:	89 d1                	mov    %edx,%ecx
c0106c2f:	c1 e1 16             	shl    $0x16,%ecx
c0106c32:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106c35:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c38:	29 d7                	sub    %edx,%edi
c0106c3a:	89 fa                	mov    %edi,%edx
c0106c3c:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c40:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c44:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c48:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c4c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c50:	c7 04 24 3d da 10 c0 	movl   $0xc010da3d,(%esp)
c0106c57:	e8 fc 96 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c5f:	c1 e0 0a             	shl    $0xa,%eax
c0106c62:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c65:	eb 54                	jmp    c0106cbb <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c6a:	89 04 24             	mov    %eax,(%esp)
c0106c6d:	e8 71 fe ff ff       	call   c0106ae3 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106c72:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106c75:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c78:	29 d1                	sub    %edx,%ecx
c0106c7a:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106c7c:	89 d6                	mov    %edx,%esi
c0106c7e:	c1 e6 0c             	shl    $0xc,%esi
c0106c81:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106c84:	89 d3                	mov    %edx,%ebx
c0106c86:	c1 e3 0c             	shl    $0xc,%ebx
c0106c89:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c8c:	c1 e2 0c             	shl    $0xc,%edx
c0106c8f:	89 d1                	mov    %edx,%ecx
c0106c91:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106c94:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c97:	29 d7                	sub    %edx,%edi
c0106c99:	89 fa                	mov    %edi,%edx
c0106c9b:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c9f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106ca3:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106ca7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106cab:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106caf:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0106cb6:	e8 9d 96 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106cbb:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106cc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106cc3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106cc6:	89 ce                	mov    %ecx,%esi
c0106cc8:	c1 e6 0a             	shl    $0xa,%esi
c0106ccb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106cce:	89 cb                	mov    %ecx,%ebx
c0106cd0:	c1 e3 0a             	shl    $0xa,%ebx
c0106cd3:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106cd6:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106cda:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106cdd:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106ce1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ce5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106ce9:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106ced:	89 1c 24             	mov    %ebx,(%esp)
c0106cf0:	e8 3c fe ff ff       	call   c0106b31 <get_pgtable_items>
c0106cf5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106cf8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106cfc:	0f 85 65 ff ff ff    	jne    c0106c67 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d02:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d07:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d0a:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d0d:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d11:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d14:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d18:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d1c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d20:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106d27:	00 
c0106d28:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106d2f:	e8 fd fd ff ff       	call   c0106b31 <get_pgtable_items>
c0106d34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d37:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d3b:	0f 85 c7 fe ff ff    	jne    c0106c08 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d41:	c7 04 24 80 da 10 c0 	movl   $0xc010da80,(%esp)
c0106d48:	e8 0b 96 ff ff       	call   c0100358 <cprintf>
}
c0106d4d:	83 c4 4c             	add    $0x4c,%esp
c0106d50:	5b                   	pop    %ebx
c0106d51:	5e                   	pop    %esi
c0106d52:	5f                   	pop    %edi
c0106d53:	5d                   	pop    %ebp
c0106d54:	c3                   	ret    

c0106d55 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d55:	55                   	push   %ebp
c0106d56:	89 e5                	mov    %esp,%ebp
c0106d58:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d5e:	c1 e8 0c             	shr    $0xc,%eax
c0106d61:	89 c2                	mov    %eax,%edx
c0106d63:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0106d68:	39 c2                	cmp    %eax,%edx
c0106d6a:	72 1c                	jb     c0106d88 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106d6c:	c7 44 24 08 b4 da 10 	movl   $0xc010dab4,0x8(%esp)
c0106d73:	c0 
c0106d74:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106d7b:	00 
c0106d7c:	c7 04 24 d3 da 10 c0 	movl   $0xc010dad3,(%esp)
c0106d83:	e8 5e a0 ff ff       	call   c0100de6 <__panic>
    }
    return &pages[PPN(pa)];
c0106d88:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0106d8d:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d90:	c1 ea 0c             	shr    $0xc,%edx
c0106d93:	c1 e2 05             	shl    $0x5,%edx
c0106d96:	01 d0                	add    %edx,%eax
}
c0106d98:	c9                   	leave  
c0106d99:	c3                   	ret    

c0106d9a <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106d9a:	55                   	push   %ebp
c0106d9b:	89 e5                	mov    %esp,%ebp
c0106d9d:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106da0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106da3:	83 e0 01             	and    $0x1,%eax
c0106da6:	85 c0                	test   %eax,%eax
c0106da8:	75 1c                	jne    c0106dc6 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106daa:	c7 44 24 08 e4 da 10 	movl   $0xc010dae4,0x8(%esp)
c0106db1:	c0 
c0106db2:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106db9:	00 
c0106dba:	c7 04 24 d3 da 10 c0 	movl   $0xc010dad3,(%esp)
c0106dc1:	e8 20 a0 ff ff       	call   c0100de6 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106dc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dc9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106dce:	89 04 24             	mov    %eax,(%esp)
c0106dd1:	e8 7f ff ff ff       	call   c0106d55 <pa2page>
}
c0106dd6:	c9                   	leave  
c0106dd7:	c3                   	ret    

c0106dd8 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106dd8:	55                   	push   %ebp
c0106dd9:	89 e5                	mov    %esp,%ebp
c0106ddb:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0106de1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106de6:	89 04 24             	mov    %eax,(%esp)
c0106de9:	e8 67 ff ff ff       	call   c0106d55 <pa2page>
}
c0106dee:	c9                   	leave  
c0106def:	c3                   	ret    

c0106df0 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106df0:	55                   	push   %ebp
c0106df1:	89 e5                	mov    %esp,%ebp
c0106df3:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106df6:	e8 a6 22 00 00       	call   c01090a1 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106dfb:	a1 3c 1f 1b c0       	mov    0xc01b1f3c,%eax
c0106e00:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e05:	76 0c                	jbe    c0106e13 <swap_init+0x23>
c0106e07:	a1 3c 1f 1b c0       	mov    0xc01b1f3c,%eax
c0106e0c:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106e11:	76 25                	jbe    c0106e38 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106e13:	a1 3c 1f 1b c0       	mov    0xc01b1f3c,%eax
c0106e18:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e1c:	c7 44 24 08 05 db 10 	movl   $0xc010db05,0x8(%esp)
c0106e23:	c0 
c0106e24:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e2b:	00 
c0106e2c:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0106e33:	e8 ae 9f ff ff       	call   c0100de6 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e38:	c7 05 14 fe 1a c0 60 	movl   $0xc012da60,0xc01afe14
c0106e3f:	da 12 c0 
     int r = sm->init();
c0106e42:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e47:	8b 40 04             	mov    0x4(%eax),%eax
c0106e4a:	ff d0                	call   *%eax
c0106e4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e53:	75 26                	jne    c0106e7b <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106e55:	c7 05 0c fe 1a c0 01 	movl   $0x1,0xc01afe0c
c0106e5c:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106e5f:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e64:	8b 00                	mov    (%eax),%eax
c0106e66:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e6a:	c7 04 24 2f db 10 c0 	movl   $0xc010db2f,(%esp)
c0106e71:	e8 e2 94 ff ff       	call   c0100358 <cprintf>
          check_swap();
c0106e76:	e8 a4 04 00 00       	call   c010731f <check_swap>
     }

     return r;
c0106e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106e7e:	c9                   	leave  
c0106e7f:	c3                   	ret    

c0106e80 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106e80:	55                   	push   %ebp
c0106e81:	89 e5                	mov    %esp,%ebp
c0106e83:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106e86:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e8b:	8b 40 08             	mov    0x8(%eax),%eax
c0106e8e:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e91:	89 14 24             	mov    %edx,(%esp)
c0106e94:	ff d0                	call   *%eax
}
c0106e96:	c9                   	leave  
c0106e97:	c3                   	ret    

c0106e98 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106e98:	55                   	push   %ebp
c0106e99:	89 e5                	mov    %esp,%ebp
c0106e9b:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106e9e:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106ea3:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ea6:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ea9:	89 14 24             	mov    %edx,(%esp)
c0106eac:	ff d0                	call   *%eax
}
c0106eae:	c9                   	leave  
c0106eaf:	c3                   	ret    

c0106eb0 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106eb0:	55                   	push   %ebp
c0106eb1:	89 e5                	mov    %esp,%ebp
c0106eb3:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106eb6:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106ebb:	8b 40 10             	mov    0x10(%eax),%eax
c0106ebe:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ec1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ec5:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ec8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106ecc:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ecf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ed3:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ed6:	89 14 24             	mov    %edx,(%esp)
c0106ed9:	ff d0                	call   *%eax
}
c0106edb:	c9                   	leave  
c0106edc:	c3                   	ret    

c0106edd <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106edd:	55                   	push   %ebp
c0106ede:	89 e5                	mov    %esp,%ebp
c0106ee0:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106ee3:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106ee8:	8b 40 14             	mov    0x14(%eax),%eax
c0106eeb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106eee:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ef2:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ef5:	89 14 24             	mov    %edx,(%esp)
c0106ef8:	ff d0                	call   *%eax
}
c0106efa:	c9                   	leave  
c0106efb:	c3                   	ret    

c0106efc <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106efc:	55                   	push   %ebp
c0106efd:	89 e5                	mov    %esp,%ebp
c0106eff:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f09:	e9 5a 01 00 00       	jmp    c0107068 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106f0e:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106f13:	8b 40 18             	mov    0x18(%eax),%eax
c0106f16:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f19:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f1d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106f20:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f24:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f27:	89 14 24             	mov    %edx,(%esp)
c0106f2a:	ff d0                	call   *%eax
c0106f2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f33:	74 18                	je     c0106f4d <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f38:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f3c:	c7 04 24 44 db 10 c0 	movl   $0xc010db44,(%esp)
c0106f43:	e8 10 94 ff ff       	call   c0100358 <cprintf>
c0106f48:	e9 27 01 00 00       	jmp    c0107074 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f50:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f53:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f59:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f5c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106f63:	00 
c0106f64:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f67:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f6b:	89 04 24             	mov    %eax,(%esp)
c0106f6e:	e8 f0 e8 ff ff       	call   c0105863 <get_pte>
c0106f73:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106f76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f79:	8b 00                	mov    (%eax),%eax
c0106f7b:	83 e0 01             	and    $0x1,%eax
c0106f7e:	85 c0                	test   %eax,%eax
c0106f80:	75 24                	jne    c0106fa6 <swap_out+0xaa>
c0106f82:	c7 44 24 0c 71 db 10 	movl   $0xc010db71,0xc(%esp)
c0106f89:	c0 
c0106f8a:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0106f91:	c0 
c0106f92:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106f99:	00 
c0106f9a:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0106fa1:	e8 40 9e ff ff       	call   c0100de6 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106fa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fa9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106fac:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106faf:	c1 ea 0c             	shr    $0xc,%edx
c0106fb2:	83 c2 01             	add    $0x1,%edx
c0106fb5:	c1 e2 08             	shl    $0x8,%edx
c0106fb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fbc:	89 14 24             	mov    %edx,(%esp)
c0106fbf:	e8 97 21 00 00       	call   c010915b <swapfs_write>
c0106fc4:	85 c0                	test   %eax,%eax
c0106fc6:	74 34                	je     c0106ffc <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106fc8:	c7 04 24 9b db 10 c0 	movl   $0xc010db9b,(%esp)
c0106fcf:	e8 84 93 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106fd4:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106fd9:	8b 40 10             	mov    0x10(%eax),%eax
c0106fdc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106fdf:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106fe6:	00 
c0106fe7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106feb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fee:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ff2:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ff5:	89 14 24             	mov    %edx,(%esp)
c0106ff8:	ff d0                	call   *%eax
c0106ffa:	eb 68                	jmp    c0107064 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106ffc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fff:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107002:	c1 e8 0c             	shr    $0xc,%eax
c0107005:	83 c0 01             	add    $0x1,%eax
c0107008:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010700c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010700f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107016:	89 44 24 04          	mov    %eax,0x4(%esp)
c010701a:	c7 04 24 b4 db 10 c0 	movl   $0xc010dbb4,(%esp)
c0107021:	e8 32 93 ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0107026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107029:	8b 40 1c             	mov    0x1c(%eax),%eax
c010702c:	c1 e8 0c             	shr    $0xc,%eax
c010702f:	83 c0 01             	add    $0x1,%eax
c0107032:	c1 e0 08             	shl    $0x8,%eax
c0107035:	89 c2                	mov    %eax,%edx
c0107037:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010703a:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010703c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010703f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107046:	00 
c0107047:	89 04 24             	mov    %eax,(%esp)
c010704a:	e8 18 e1 ff ff       	call   c0105167 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c010704f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107052:	8b 40 0c             	mov    0xc(%eax),%eax
c0107055:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107058:	89 54 24 04          	mov    %edx,0x4(%esp)
c010705c:	89 04 24             	mov    %eax,(%esp)
c010705f:	e8 0c ef ff ff       	call   c0105f70 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107064:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107068:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010706b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010706e:	0f 85 9a fe ff ff    	jne    c0106f0e <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0107074:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107077:	c9                   	leave  
c0107078:	c3                   	ret    

c0107079 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107079:	55                   	push   %ebp
c010707a:	89 e5                	mov    %esp,%ebp
c010707c:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c010707f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0107086:	e8 71 e0 ff ff       	call   c01050fc <alloc_pages>
c010708b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c010708e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107092:	75 24                	jne    c01070b8 <swap_in+0x3f>
c0107094:	c7 44 24 0c f4 db 10 	movl   $0xc010dbf4,0xc(%esp)
c010709b:	c0 
c010709c:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01070a3:	c0 
c01070a4:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01070ab:	00 
c01070ac:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01070b3:	e8 2e 9d ff ff       	call   c0100de6 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01070b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01070bb:	8b 40 0c             	mov    0xc(%eax),%eax
c01070be:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01070c5:	00 
c01070c6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070c9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070cd:	89 04 24             	mov    %eax,(%esp)
c01070d0:	e8 8e e7 ff ff       	call   c0105863 <get_pte>
c01070d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01070d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070db:	8b 00                	mov    (%eax),%eax
c01070dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070e0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070e4:	89 04 24             	mov    %eax,(%esp)
c01070e7:	e8 fd 1f 00 00       	call   c01090e9 <swapfs_read>
c01070ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01070ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01070f3:	74 2a                	je     c010711f <swap_in+0xa6>
     {
        assert(r!=0);
c01070f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01070f9:	75 24                	jne    c010711f <swap_in+0xa6>
c01070fb:	c7 44 24 0c 01 dc 10 	movl   $0xc010dc01,0xc(%esp)
c0107102:	c0 
c0107103:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c010710a:	c0 
c010710b:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107112:	00 
c0107113:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010711a:	e8 c7 9c ff ff       	call   c0100de6 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010711f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107122:	8b 00                	mov    (%eax),%eax
c0107124:	c1 e8 08             	shr    $0x8,%eax
c0107127:	89 c2                	mov    %eax,%edx
c0107129:	8b 45 0c             	mov    0xc(%ebp),%eax
c010712c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107130:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107134:	c7 04 24 08 dc 10 c0 	movl   $0xc010dc08,(%esp)
c010713b:	e8 18 92 ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c0107140:	8b 45 10             	mov    0x10(%ebp),%eax
c0107143:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107146:	89 10                	mov    %edx,(%eax)
     return 0;
c0107148:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010714d:	c9                   	leave  
c010714e:	c3                   	ret    

c010714f <check_content_set>:



static inline void
check_content_set(void)
{
c010714f:	55                   	push   %ebp
c0107150:	89 e5                	mov    %esp,%ebp
c0107152:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0107155:	b8 00 10 00 00       	mov    $0x1000,%eax
c010715a:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010715d:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107162:	83 f8 01             	cmp    $0x1,%eax
c0107165:	74 24                	je     c010718b <check_content_set+0x3c>
c0107167:	c7 44 24 0c 46 dc 10 	movl   $0xc010dc46,0xc(%esp)
c010716e:	c0 
c010716f:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107176:	c0 
c0107177:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c010717e:	00 
c010717f:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107186:	e8 5b 9c ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010718b:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107190:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107193:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107198:	83 f8 01             	cmp    $0x1,%eax
c010719b:	74 24                	je     c01071c1 <check_content_set+0x72>
c010719d:	c7 44 24 0c 46 dc 10 	movl   $0xc010dc46,0xc(%esp)
c01071a4:	c0 
c01071a5:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01071ac:	c0 
c01071ad:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01071b4:	00 
c01071b5:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01071bc:	e8 25 9c ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01071c1:	b8 00 20 00 00       	mov    $0x2000,%eax
c01071c6:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071c9:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c01071ce:	83 f8 02             	cmp    $0x2,%eax
c01071d1:	74 24                	je     c01071f7 <check_content_set+0xa8>
c01071d3:	c7 44 24 0c 55 dc 10 	movl   $0xc010dc55,0xc(%esp)
c01071da:	c0 
c01071db:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01071e2:	c0 
c01071e3:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01071ea:	00 
c01071eb:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01071f2:	e8 ef 9b ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01071f7:	b8 10 20 00 00       	mov    $0x2010,%eax
c01071fc:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071ff:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107204:	83 f8 02             	cmp    $0x2,%eax
c0107207:	74 24                	je     c010722d <check_content_set+0xde>
c0107209:	c7 44 24 0c 55 dc 10 	movl   $0xc010dc55,0xc(%esp)
c0107210:	c0 
c0107211:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107218:	c0 
c0107219:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107220:	00 
c0107221:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107228:	e8 b9 9b ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010722d:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107232:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107235:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c010723a:	83 f8 03             	cmp    $0x3,%eax
c010723d:	74 24                	je     c0107263 <check_content_set+0x114>
c010723f:	c7 44 24 0c 64 dc 10 	movl   $0xc010dc64,0xc(%esp)
c0107246:	c0 
c0107247:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c010724e:	c0 
c010724f:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0107256:	00 
c0107257:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010725e:	e8 83 9b ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107263:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107268:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010726b:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107270:	83 f8 03             	cmp    $0x3,%eax
c0107273:	74 24                	je     c0107299 <check_content_set+0x14a>
c0107275:	c7 44 24 0c 64 dc 10 	movl   $0xc010dc64,0xc(%esp)
c010727c:	c0 
c010727d:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107284:	c0 
c0107285:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010728c:	00 
c010728d:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107294:	e8 4d 9b ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107299:	b8 00 40 00 00       	mov    $0x4000,%eax
c010729e:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072a1:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c01072a6:	83 f8 04             	cmp    $0x4,%eax
c01072a9:	74 24                	je     c01072cf <check_content_set+0x180>
c01072ab:	c7 44 24 0c 73 dc 10 	movl   $0xc010dc73,0xc(%esp)
c01072b2:	c0 
c01072b3:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01072ba:	c0 
c01072bb:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01072c2:	00 
c01072c3:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01072ca:	e8 17 9b ff ff       	call   c0100de6 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01072cf:	b8 10 40 00 00       	mov    $0x4010,%eax
c01072d4:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072d7:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c01072dc:	83 f8 04             	cmp    $0x4,%eax
c01072df:	74 24                	je     c0107305 <check_content_set+0x1b6>
c01072e1:	c7 44 24 0c 73 dc 10 	movl   $0xc010dc73,0xc(%esp)
c01072e8:	c0 
c01072e9:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01072f0:	c0 
c01072f1:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01072f8:	00 
c01072f9:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107300:	e8 e1 9a ff ff       	call   c0100de6 <__panic>
}
c0107305:	c9                   	leave  
c0107306:	c3                   	ret    

c0107307 <check_content_access>:

static inline int
check_content_access(void)
{
c0107307:	55                   	push   %ebp
c0107308:	89 e5                	mov    %esp,%ebp
c010730a:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010730d:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0107312:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107315:	ff d0                	call   *%eax
c0107317:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010731a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010731d:	c9                   	leave  
c010731e:	c3                   	ret    

c010731f <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010731f:	55                   	push   %ebp
c0107320:	89 e5                	mov    %esp,%ebp
c0107322:	53                   	push   %ebx
c0107323:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107326:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010732d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107334:	c7 45 e8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010733b:	eb 6b                	jmp    c01073a8 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010733d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107340:	83 e8 0c             	sub    $0xc,%eax
c0107343:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107346:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107349:	83 c0 04             	add    $0x4,%eax
c010734c:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107353:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107356:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107359:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010735c:	0f a3 10             	bt     %edx,(%eax)
c010735f:	19 c0                	sbb    %eax,%eax
c0107361:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107364:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107368:	0f 95 c0             	setne  %al
c010736b:	0f b6 c0             	movzbl %al,%eax
c010736e:	85 c0                	test   %eax,%eax
c0107370:	75 24                	jne    c0107396 <check_swap+0x77>
c0107372:	c7 44 24 0c 82 dc 10 	movl   $0xc010dc82,0xc(%esp)
c0107379:	c0 
c010737a:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107381:	c0 
c0107382:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107389:	00 
c010738a:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107391:	e8 50 9a ff ff       	call   c0100de6 <__panic>
        count ++, total += p->property;
c0107396:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010739a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010739d:	8b 50 08             	mov    0x8(%eax),%edx
c01073a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073a3:	01 d0                	add    %edx,%eax
c01073a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01073a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073ab:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01073ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01073b1:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01073b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01073b7:	81 7d e8 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x18(%ebp)
c01073be:	0f 85 79 ff ff ff    	jne    c010733d <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01073c4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01073c7:	e8 cd dd ff ff       	call   c0105199 <nr_free_pages>
c01073cc:	39 c3                	cmp    %eax,%ebx
c01073ce:	74 24                	je     c01073f4 <check_swap+0xd5>
c01073d0:	c7 44 24 0c 92 dc 10 	movl   $0xc010dc92,0xc(%esp)
c01073d7:	c0 
c01073d8:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01073df:	c0 
c01073e0:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01073e7:	00 
c01073e8:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01073ef:	e8 f2 99 ff ff       	call   c0100de6 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01073f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073f7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01073fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107402:	c7 04 24 ac dc 10 c0 	movl   $0xc010dcac,(%esp)
c0107409:	e8 4a 8f ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c010740e:	e8 64 0a 00 00       	call   c0107e77 <mm_create>
c0107413:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0107416:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010741a:	75 24                	jne    c0107440 <check_swap+0x121>
c010741c:	c7 44 24 0c d2 dc 10 	movl   $0xc010dcd2,0xc(%esp)
c0107423:	c0 
c0107424:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c010742b:	c0 
c010742c:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107433:	00 
c0107434:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010743b:	e8 a6 99 ff ff       	call   c0100de6 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107440:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0107445:	85 c0                	test   %eax,%eax
c0107447:	74 24                	je     c010746d <check_swap+0x14e>
c0107449:	c7 44 24 0c dd dc 10 	movl   $0xc010dcdd,0xc(%esp)
c0107450:	c0 
c0107451:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107458:	c0 
c0107459:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107460:	00 
c0107461:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107468:	e8 79 99 ff ff       	call   c0100de6 <__panic>

     check_mm_struct = mm;
c010746d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107470:	a3 6c 1f 1b c0       	mov    %eax,0xc01b1f6c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107475:	8b 15 84 fd 1a c0    	mov    0xc01afd84,%edx
c010747b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010747e:	89 50 0c             	mov    %edx,0xc(%eax)
c0107481:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107484:	8b 40 0c             	mov    0xc(%eax),%eax
c0107487:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c010748a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010748d:	8b 00                	mov    (%eax),%eax
c010748f:	85 c0                	test   %eax,%eax
c0107491:	74 24                	je     c01074b7 <check_swap+0x198>
c0107493:	c7 44 24 0c f5 dc 10 	movl   $0xc010dcf5,0xc(%esp)
c010749a:	c0 
c010749b:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01074a2:	c0 
c01074a3:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01074aa:	00 
c01074ab:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01074b2:	e8 2f 99 ff ff       	call   c0100de6 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01074b7:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01074be:	00 
c01074bf:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01074c6:	00 
c01074c7:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01074ce:	e8 3d 0a 00 00       	call   c0107f10 <vma_create>
c01074d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01074d6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01074da:	75 24                	jne    c0107500 <check_swap+0x1e1>
c01074dc:	c7 44 24 0c 03 dd 10 	movl   $0xc010dd03,0xc(%esp)
c01074e3:	c0 
c01074e4:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01074eb:	c0 
c01074ec:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01074f3:	00 
c01074f4:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01074fb:	e8 e6 98 ff ff       	call   c0100de6 <__panic>

     insert_vma_struct(mm, vma);
c0107500:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107503:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107507:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010750a:	89 04 24             	mov    %eax,(%esp)
c010750d:	e8 8e 0b 00 00       	call   c01080a0 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107512:	c7 04 24 10 dd 10 c0 	movl   $0xc010dd10,(%esp)
c0107519:	e8 3a 8e ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c010751e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107525:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107528:	8b 40 0c             	mov    0xc(%eax),%eax
c010752b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107532:	00 
c0107533:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010753a:	00 
c010753b:	89 04 24             	mov    %eax,(%esp)
c010753e:	e8 20 e3 ff ff       	call   c0105863 <get_pte>
c0107543:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107546:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010754a:	75 24                	jne    c0107570 <check_swap+0x251>
c010754c:	c7 44 24 0c 44 dd 10 	movl   $0xc010dd44,0xc(%esp)
c0107553:	c0 
c0107554:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c010755b:	c0 
c010755c:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107563:	00 
c0107564:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010756b:	e8 76 98 ff ff       	call   c0100de6 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107570:	c7 04 24 58 dd 10 c0 	movl   $0xc010dd58,(%esp)
c0107577:	e8 dc 8d ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010757c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107583:	e9 a3 00 00 00       	jmp    c010762b <check_swap+0x30c>
          check_rp[i] = alloc_page();
c0107588:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010758f:	e8 68 db ff ff       	call   c01050fc <alloc_pages>
c0107594:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107597:	89 04 95 a0 1e 1b c0 	mov    %eax,-0x3fe4e160(,%edx,4)
          assert(check_rp[i] != NULL );
c010759e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075a1:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c01075a8:	85 c0                	test   %eax,%eax
c01075aa:	75 24                	jne    c01075d0 <check_swap+0x2b1>
c01075ac:	c7 44 24 0c 7c dd 10 	movl   $0xc010dd7c,0xc(%esp)
c01075b3:	c0 
c01075b4:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01075bb:	c0 
c01075bc:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01075c3:	00 
c01075c4:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01075cb:	e8 16 98 ff ff       	call   c0100de6 <__panic>
          assert(!PageProperty(check_rp[i]));
c01075d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075d3:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c01075da:	83 c0 04             	add    $0x4,%eax
c01075dd:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01075e4:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01075e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01075ea:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01075ed:	0f a3 10             	bt     %edx,(%eax)
c01075f0:	19 c0                	sbb    %eax,%eax
c01075f2:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01075f5:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01075f9:	0f 95 c0             	setne  %al
c01075fc:	0f b6 c0             	movzbl %al,%eax
c01075ff:	85 c0                	test   %eax,%eax
c0107601:	74 24                	je     c0107627 <check_swap+0x308>
c0107603:	c7 44 24 0c 90 dd 10 	movl   $0xc010dd90,0xc(%esp)
c010760a:	c0 
c010760b:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107612:	c0 
c0107613:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010761a:	00 
c010761b:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107622:	e8 bf 97 ff ff       	call   c0100de6 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107627:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010762b:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010762f:	0f 8e 53 ff ff ff    	jle    c0107588 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107635:	a1 7c 1e 1b c0       	mov    0xc01b1e7c,%eax
c010763a:	8b 15 80 1e 1b c0    	mov    0xc01b1e80,%edx
c0107640:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107643:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107646:	c7 45 a8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010764d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107650:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107653:	89 50 04             	mov    %edx,0x4(%eax)
c0107656:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107659:	8b 50 04             	mov    0x4(%eax),%edx
c010765c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010765f:	89 10                	mov    %edx,(%eax)
c0107661:	c7 45 a4 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107668:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010766b:	8b 40 04             	mov    0x4(%eax),%eax
c010766e:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107671:	0f 94 c0             	sete   %al
c0107674:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107677:	85 c0                	test   %eax,%eax
c0107679:	75 24                	jne    c010769f <check_swap+0x380>
c010767b:	c7 44 24 0c ab dd 10 	movl   $0xc010ddab,0xc(%esp)
c0107682:	c0 
c0107683:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c010768a:	c0 
c010768b:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0107692:	00 
c0107693:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010769a:	e8 47 97 ff ff       	call   c0100de6 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010769f:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01076a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01076a7:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c01076ae:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076b8:	eb 1e                	jmp    c01076d8 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01076ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076bd:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c01076c4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01076cb:	00 
c01076cc:	89 04 24             	mov    %eax,(%esp)
c01076cf:	e8 93 da ff ff       	call   c0105167 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076d4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076d8:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076dc:	7e dc                	jle    c01076ba <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01076de:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01076e3:	83 f8 04             	cmp    $0x4,%eax
c01076e6:	74 24                	je     c010770c <check_swap+0x3ed>
c01076e8:	c7 44 24 0c c4 dd 10 	movl   $0xc010ddc4,0xc(%esp)
c01076ef:	c0 
c01076f0:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01076f7:	c0 
c01076f8:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01076ff:	00 
c0107700:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107707:	e8 da 96 ff ff       	call   c0100de6 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010770c:	c7 04 24 e8 dd 10 c0 	movl   $0xc010dde8,(%esp)
c0107713:	e8 40 8c ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0107718:	c7 05 18 fe 1a c0 00 	movl   $0x0,0xc01afe18
c010771f:	00 00 00 
     
     check_content_set();
c0107722:	e8 28 fa ff ff       	call   c010714f <check_content_set>
     assert( nr_free == 0);         
c0107727:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c010772c:	85 c0                	test   %eax,%eax
c010772e:	74 24                	je     c0107754 <check_swap+0x435>
c0107730:	c7 44 24 0c 0f de 10 	movl   $0xc010de0f,0xc(%esp)
c0107737:	c0 
c0107738:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c010773f:	c0 
c0107740:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107747:	00 
c0107748:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010774f:	e8 92 96 ff ff       	call   c0100de6 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107754:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010775b:	eb 26                	jmp    c0107783 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010775d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107760:	c7 04 85 c0 1e 1b c0 	movl   $0xffffffff,-0x3fe4e140(,%eax,4)
c0107767:	ff ff ff ff 
c010776b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010776e:	8b 14 85 c0 1e 1b c0 	mov    -0x3fe4e140(,%eax,4),%edx
c0107775:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107778:	89 14 85 00 1f 1b c0 	mov    %edx,-0x3fe4e100(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010777f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107783:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107787:	7e d4                	jle    c010775d <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107789:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107790:	e9 eb 00 00 00       	jmp    c0107880 <check_swap+0x561>
         check_ptep[i]=0;
c0107795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107798:	c7 04 85 54 1f 1b c0 	movl   $0x0,-0x3fe4e0ac(,%eax,4)
c010779f:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01077a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077a6:	83 c0 01             	add    $0x1,%eax
c01077a9:	c1 e0 0c             	shl    $0xc,%eax
c01077ac:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01077b3:	00 
c01077b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01077b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077bb:	89 04 24             	mov    %eax,(%esp)
c01077be:	e8 a0 e0 ff ff       	call   c0105863 <get_pte>
c01077c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01077c6:	89 04 95 54 1f 1b c0 	mov    %eax,-0x3fe4e0ac(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01077cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077d0:	8b 04 85 54 1f 1b c0 	mov    -0x3fe4e0ac(,%eax,4),%eax
c01077d7:	85 c0                	test   %eax,%eax
c01077d9:	75 24                	jne    c01077ff <check_swap+0x4e0>
c01077db:	c7 44 24 0c 1c de 10 	movl   $0xc010de1c,0xc(%esp)
c01077e2:	c0 
c01077e3:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01077ea:	c0 
c01077eb:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01077f2:	00 
c01077f3:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01077fa:	e8 e7 95 ff ff       	call   c0100de6 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01077ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107802:	8b 04 85 54 1f 1b c0 	mov    -0x3fe4e0ac(,%eax,4),%eax
c0107809:	8b 00                	mov    (%eax),%eax
c010780b:	89 04 24             	mov    %eax,(%esp)
c010780e:	e8 87 f5 ff ff       	call   c0106d9a <pte2page>
c0107813:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107816:	8b 14 95 a0 1e 1b c0 	mov    -0x3fe4e160(,%edx,4),%edx
c010781d:	39 d0                	cmp    %edx,%eax
c010781f:	74 24                	je     c0107845 <check_swap+0x526>
c0107821:	c7 44 24 0c 34 de 10 	movl   $0xc010de34,0xc(%esp)
c0107828:	c0 
c0107829:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107830:	c0 
c0107831:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0107838:	00 
c0107839:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107840:	e8 a1 95 ff ff       	call   c0100de6 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107845:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107848:	8b 04 85 54 1f 1b c0 	mov    -0x3fe4e0ac(,%eax,4),%eax
c010784f:	8b 00                	mov    (%eax),%eax
c0107851:	83 e0 01             	and    $0x1,%eax
c0107854:	85 c0                	test   %eax,%eax
c0107856:	75 24                	jne    c010787c <check_swap+0x55d>
c0107858:	c7 44 24 0c 5c de 10 	movl   $0xc010de5c,0xc(%esp)
c010785f:	c0 
c0107860:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c0107867:	c0 
c0107868:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010786f:	00 
c0107870:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c0107877:	e8 6a 95 ff ff       	call   c0100de6 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010787c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107880:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107884:	0f 8e 0b ff ff ff    	jle    c0107795 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010788a:	c7 04 24 78 de 10 c0 	movl   $0xc010de78,(%esp)
c0107891:	e8 c2 8a ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107896:	e8 6c fa ff ff       	call   c0107307 <check_content_access>
c010789b:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c010789e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01078a2:	74 24                	je     c01078c8 <check_swap+0x5a9>
c01078a4:	c7 44 24 0c 9e de 10 	movl   $0xc010de9e,0xc(%esp)
c01078ab:	c0 
c01078ac:	c7 44 24 08 86 db 10 	movl   $0xc010db86,0x8(%esp)
c01078b3:	c0 
c01078b4:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01078bb:	00 
c01078bc:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c01078c3:	e8 1e 95 ff ff       	call   c0100de6 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078cf:	eb 1e                	jmp    c01078ef <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01078d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078d4:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c01078db:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01078e2:	00 
c01078e3:	89 04 24             	mov    %eax,(%esp)
c01078e6:	e8 7c d8 ff ff       	call   c0105167 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078eb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078ef:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078f3:	7e dc                	jle    c01078d1 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c01078f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01078f8:	8b 00                	mov    (%eax),%eax
c01078fa:	89 04 24             	mov    %eax,(%esp)
c01078fd:	e8 d6 f4 ff ff       	call   c0106dd8 <pde2page>
c0107902:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107909:	00 
c010790a:	89 04 24             	mov    %eax,(%esp)
c010790d:	e8 55 d8 ff ff       	call   c0105167 <free_pages>
     pgdir[0] = 0;
c0107912:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107915:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010791b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010791e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107925:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107928:	89 04 24             	mov    %eax,(%esp)
c010792b:	e8 a0 08 00 00       	call   c01081d0 <mm_destroy>
     check_mm_struct = NULL;
c0107930:	c7 05 6c 1f 1b c0 00 	movl   $0x0,0xc01b1f6c
c0107937:	00 00 00 
     
     nr_free = nr_free_store;
c010793a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010793d:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
     free_list = free_list_store;
c0107942:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107945:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107948:	a3 7c 1e 1b c0       	mov    %eax,0xc01b1e7c
c010794d:	89 15 80 1e 1b c0    	mov    %edx,0xc01b1e80

     
     le = &free_list;
c0107953:	c7 45 e8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010795a:	eb 1d                	jmp    c0107979 <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c010795c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010795f:	83 e8 0c             	sub    $0xc,%eax
c0107962:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107965:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107969:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010796c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010796f:	8b 40 08             	mov    0x8(%eax),%eax
c0107972:	29 c2                	sub    %eax,%edx
c0107974:	89 d0                	mov    %edx,%eax
c0107976:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107979:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010797c:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010797f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107982:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107985:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107988:	81 7d e8 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x18(%ebp)
c010798f:	75 cb                	jne    c010795c <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107991:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107994:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107998:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010799b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010799f:	c7 04 24 a5 de 10 c0 	movl   $0xc010dea5,(%esp)
c01079a6:	e8 ad 89 ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01079ab:	c7 04 24 bf de 10 c0 	movl   $0xc010debf,(%esp)
c01079b2:	e8 a1 89 ff ff       	call   c0100358 <cprintf>
}
c01079b7:	83 c4 74             	add    $0x74,%esp
c01079ba:	5b                   	pop    %ebx
c01079bb:	5d                   	pop    %ebp
c01079bc:	c3                   	ret    

c01079bd <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01079bd:	55                   	push   %ebp
c01079be:	89 e5                	mov    %esp,%ebp
c01079c0:	83 ec 10             	sub    $0x10,%esp
c01079c3:	c7 45 fc 64 1f 1b c0 	movl   $0xc01b1f64,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01079ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079cd:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01079d0:	89 50 04             	mov    %edx,0x4(%eax)
c01079d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079d6:	8b 50 04             	mov    0x4(%eax),%edx
c01079d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079dc:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01079de:	8b 45 08             	mov    0x8(%ebp),%eax
c01079e1:	c7 40 14 64 1f 1b c0 	movl   $0xc01b1f64,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01079e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079ed:	c9                   	leave  
c01079ee:	c3                   	ret    

c01079ef <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01079ef:	55                   	push   %ebp
c01079f0:	89 e5                	mov    %esp,%ebp
c01079f2:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01079f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01079f8:	8b 40 14             	mov    0x14(%eax),%eax
c01079fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01079fe:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a01:	83 c0 14             	add    $0x14,%eax
c0107a04:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107a07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a0b:	74 06                	je     c0107a13 <_fifo_map_swappable+0x24>
c0107a0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a11:	75 24                	jne    c0107a37 <_fifo_map_swappable+0x48>
c0107a13:	c7 44 24 0c d8 de 10 	movl   $0xc010ded8,0xc(%esp)
c0107a1a:	c0 
c0107a1b:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107a22:	c0 
c0107a23:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a2a:	00 
c0107a2b:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107a32:	e8 af 93 ff ff       	call   c0100de6 <__panic>
c0107a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a40:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a4c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107a4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a52:	8b 40 04             	mov    0x4(%eax),%eax
c0107a55:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a58:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107a5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a5e:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107a61:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107a64:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a67:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a6a:	89 10                	mov    %edx,(%eax)
c0107a6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a6f:	8b 10                	mov    (%eax),%edx
c0107a71:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107a74:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107a77:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a7a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107a7d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107a80:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a83:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107a86:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2012011270*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107a88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a8d:	c9                   	leave  
c0107a8e:	c3                   	ret    

c0107a8f <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107a8f:	55                   	push   %ebp
c0107a90:	89 e5                	mov    %esp,%ebp
c0107a92:	83 ec 38             	sub    $0x38,%esp
	list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a98:	8b 40 14             	mov    0x14(%eax),%eax
c0107a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(head != NULL);
c0107a9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107aa2:	75 24                	jne    c0107ac8 <_fifo_swap_out_victim+0x39>
c0107aa4:	c7 44 24 0c 1f df 10 	movl   $0xc010df1f,0xc(%esp)
c0107aab:	c0 
c0107aac:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107ab3:	c0 
c0107ab4:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107abb:	00 
c0107abc:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107ac3:	e8 1e 93 ff ff       	call   c0100de6 <__panic>
	assert(in_tick==0);
c0107ac8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107acc:	74 24                	je     c0107af2 <_fifo_swap_out_victim+0x63>
c0107ace:	c7 44 24 0c 2c df 10 	movl   $0xc010df2c,0xc(%esp)
c0107ad5:	c0 
c0107ad6:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107add:	c0 
c0107ade:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107ae5:	00 
c0107ae6:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107aed:	e8 f4 92 ff ff       	call   c0100de6 <__panic>
	/* Select the victim */
	/*LAB3 EXERCISE 2: 2012011270*/
	//(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
	//(2)  set the addr of addr of this page to ptr_page
	list_entry_t *le = head->prev;
c0107af2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107af5:	8b 00                	mov    (%eax),%eax
c0107af7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	(*ptr_page) = le2page(le, pra_page_link);
c0107afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107afd:	8d 50 ec             	lea    -0x14(%eax),%edx
c0107b00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b03:	89 10                	mov    %edx,(%eax)
c0107b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b08:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107b0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b0e:	8b 40 04             	mov    0x4(%eax),%eax
c0107b11:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107b14:	8b 12                	mov    (%edx),%edx
c0107b16:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0107b19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b22:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b28:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107b2b:	89 10                	mov    %edx,(%eax)
	list_del(le);
    return 0;
c0107b2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b32:	c9                   	leave  
c0107b33:	c3                   	ret    

c0107b34 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107b34:	55                   	push   %ebp
c0107b35:	89 e5                	mov    %esp,%ebp
c0107b37:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107b3a:	c7 04 24 38 df 10 c0 	movl   $0xc010df38,(%esp)
c0107b41:	e8 12 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107b46:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b4b:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107b4e:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107b53:	83 f8 04             	cmp    $0x4,%eax
c0107b56:	74 24                	je     c0107b7c <_fifo_check_swap+0x48>
c0107b58:	c7 44 24 0c 5e df 10 	movl   $0xc010df5e,0xc(%esp)
c0107b5f:	c0 
c0107b60:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107b67:	c0 
c0107b68:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
c0107b6f:	00 
c0107b70:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107b77:	e8 6a 92 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107b7c:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
c0107b83:	e8 d0 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107b88:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107b8d:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107b90:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107b95:	83 f8 04             	cmp    $0x4,%eax
c0107b98:	74 24                	je     c0107bbe <_fifo_check_swap+0x8a>
c0107b9a:	c7 44 24 0c 5e df 10 	movl   $0xc010df5e,0xc(%esp)
c0107ba1:	c0 
c0107ba2:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107ba9:	c0 
c0107baa:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107bb1:	00 
c0107bb2:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107bb9:	e8 28 92 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107bbe:	c7 04 24 98 df 10 c0 	movl   $0xc010df98,(%esp)
c0107bc5:	e8 8e 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107bca:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107bcf:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107bd2:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107bd7:	83 f8 04             	cmp    $0x4,%eax
c0107bda:	74 24                	je     c0107c00 <_fifo_check_swap+0xcc>
c0107bdc:	c7 44 24 0c 5e df 10 	movl   $0xc010df5e,0xc(%esp)
c0107be3:	c0 
c0107be4:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107beb:	c0 
c0107bec:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107bf3:	00 
c0107bf4:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107bfb:	e8 e6 91 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c00:	c7 04 24 c0 df 10 c0 	movl   $0xc010dfc0,(%esp)
c0107c07:	e8 4c 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c0c:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c11:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107c14:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107c19:	83 f8 04             	cmp    $0x4,%eax
c0107c1c:	74 24                	je     c0107c42 <_fifo_check_swap+0x10e>
c0107c1e:	c7 44 24 0c 5e df 10 	movl   $0xc010df5e,0xc(%esp)
c0107c25:	c0 
c0107c26:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107c2d:	c0 
c0107c2e:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107c35:	00 
c0107c36:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107c3d:	e8 a4 91 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107c42:	c7 04 24 e8 df 10 c0 	movl   $0xc010dfe8,(%esp)
c0107c49:	e8 0a 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107c4e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107c53:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107c56:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107c5b:	83 f8 05             	cmp    $0x5,%eax
c0107c5e:	74 24                	je     c0107c84 <_fifo_check_swap+0x150>
c0107c60:	c7 44 24 0c 0e e0 10 	movl   $0xc010e00e,0xc(%esp)
c0107c67:	c0 
c0107c68:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107c6f:	c0 
c0107c70:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107c77:	00 
c0107c78:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107c7f:	e8 62 91 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c84:	c7 04 24 c0 df 10 c0 	movl   $0xc010dfc0,(%esp)
c0107c8b:	e8 c8 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c90:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c95:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107c98:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107c9d:	83 f8 05             	cmp    $0x5,%eax
c0107ca0:	74 24                	je     c0107cc6 <_fifo_check_swap+0x192>
c0107ca2:	c7 44 24 0c 0e e0 10 	movl   $0xc010e00e,0xc(%esp)
c0107ca9:	c0 
c0107caa:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107cb1:	c0 
c0107cb2:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107cb9:	00 
c0107cba:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107cc1:	e8 20 91 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107cc6:	c7 04 24 70 df 10 c0 	movl   $0xc010df70,(%esp)
c0107ccd:	e8 86 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107cd2:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107cd7:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107cda:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107cdf:	83 f8 06             	cmp    $0x6,%eax
c0107ce2:	74 24                	je     c0107d08 <_fifo_check_swap+0x1d4>
c0107ce4:	c7 44 24 0c 1d e0 10 	movl   $0xc010e01d,0xc(%esp)
c0107ceb:	c0 
c0107cec:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107cf3:	c0 
c0107cf4:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107cfb:	00 
c0107cfc:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107d03:	e8 de 90 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d08:	c7 04 24 c0 df 10 c0 	movl   $0xc010dfc0,(%esp)
c0107d0f:	e8 44 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d14:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d19:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107d1c:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107d21:	83 f8 07             	cmp    $0x7,%eax
c0107d24:	74 24                	je     c0107d4a <_fifo_check_swap+0x216>
c0107d26:	c7 44 24 0c 2c e0 10 	movl   $0xc010e02c,0xc(%esp)
c0107d2d:	c0 
c0107d2e:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107d35:	c0 
c0107d36:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107d3d:	00 
c0107d3e:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107d45:	e8 9c 90 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d4a:	c7 04 24 38 df 10 c0 	movl   $0xc010df38,(%esp)
c0107d51:	e8 02 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d56:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d5b:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107d5e:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107d63:	83 f8 08             	cmp    $0x8,%eax
c0107d66:	74 24                	je     c0107d8c <_fifo_check_swap+0x258>
c0107d68:	c7 44 24 0c 3b e0 10 	movl   $0xc010e03b,0xc(%esp)
c0107d6f:	c0 
c0107d70:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107d77:	c0 
c0107d78:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107d7f:	00 
c0107d80:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107d87:	e8 5a 90 ff ff       	call   c0100de6 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d8c:	c7 04 24 98 df 10 c0 	movl   $0xc010df98,(%esp)
c0107d93:	e8 c0 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107d98:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107d9d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107da0:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107da5:	83 f8 09             	cmp    $0x9,%eax
c0107da8:	74 24                	je     c0107dce <_fifo_check_swap+0x29a>
c0107daa:	c7 44 24 0c 4a e0 10 	movl   $0xc010e04a,0xc(%esp)
c0107db1:	c0 
c0107db2:	c7 44 24 08 f6 de 10 	movl   $0xc010def6,0x8(%esp)
c0107db9:	c0 
c0107dba:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107dc1:	00 
c0107dc2:	c7 04 24 0b df 10 c0 	movl   $0xc010df0b,(%esp)
c0107dc9:	e8 18 90 ff ff       	call   c0100de6 <__panic>
    return 0;
c0107dce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107dd3:	c9                   	leave  
c0107dd4:	c3                   	ret    

c0107dd5 <_fifo_init>:


static int
_fifo_init(void)
{
c0107dd5:	55                   	push   %ebp
c0107dd6:	89 e5                	mov    %esp,%ebp
    return 0;
c0107dd8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ddd:	5d                   	pop    %ebp
c0107dde:	c3                   	ret    

c0107ddf <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107ddf:	55                   	push   %ebp
c0107de0:	89 e5                	mov    %esp,%ebp
    return 0;
c0107de2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107de7:	5d                   	pop    %ebp
c0107de8:	c3                   	ret    

c0107de9 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107de9:	55                   	push   %ebp
c0107dea:	89 e5                	mov    %esp,%ebp
c0107dec:	b8 00 00 00 00       	mov    $0x0,%eax
c0107df1:	5d                   	pop    %ebp
c0107df2:	c3                   	ret    

c0107df3 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0107df3:	55                   	push   %ebp
c0107df4:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0107df6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107df9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0107dff:	5d                   	pop    %ebp
c0107e00:	c3                   	ret    

c0107e01 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107e01:	55                   	push   %ebp
c0107e02:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107e04:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e07:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107e0a:	5d                   	pop    %ebp
c0107e0b:	c3                   	ret    

c0107e0c <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107e0c:	55                   	push   %ebp
c0107e0d:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107e0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e12:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e15:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107e18:	5d                   	pop    %ebp
c0107e19:	c3                   	ret    

c0107e1a <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107e1a:	55                   	push   %ebp
c0107e1b:	89 e5                	mov    %esp,%ebp
c0107e1d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107e20:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e23:	c1 e8 0c             	shr    $0xc,%eax
c0107e26:	89 c2                	mov    %eax,%edx
c0107e28:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0107e2d:	39 c2                	cmp    %eax,%edx
c0107e2f:	72 1c                	jb     c0107e4d <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107e31:	c7 44 24 08 6c e0 10 	movl   $0xc010e06c,0x8(%esp)
c0107e38:	c0 
c0107e39:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107e40:	00 
c0107e41:	c7 04 24 8b e0 10 c0 	movl   $0xc010e08b,(%esp)
c0107e48:	e8 99 8f ff ff       	call   c0100de6 <__panic>
    }
    return &pages[PPN(pa)];
c0107e4d:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0107e52:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e55:	c1 ea 0c             	shr    $0xc,%edx
c0107e58:	c1 e2 05             	shl    $0x5,%edx
c0107e5b:	01 d0                	add    %edx,%eax
}
c0107e5d:	c9                   	leave  
c0107e5e:	c3                   	ret    

c0107e5f <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107e5f:	55                   	push   %ebp
c0107e60:	89 e5                	mov    %esp,%ebp
c0107e62:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107e65:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e68:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107e6d:	89 04 24             	mov    %eax,(%esp)
c0107e70:	e8 a5 ff ff ff       	call   c0107e1a <pa2page>
}
c0107e75:	c9                   	leave  
c0107e76:	c3                   	ret    

c0107e77 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107e77:	55                   	push   %ebp
c0107e78:	89 e5                	mov    %esp,%ebp
c0107e7a:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107e7d:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0107e84:	e8 fe cd ff ff       	call   c0104c87 <kmalloc>
c0107e89:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e90:	74 79                	je     c0107f0b <mm_create+0x94>
        list_init(&(mm->mmap_list));
c0107e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e95:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107e98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e9e:	89 50 04             	mov    %edx,0x4(%eax)
c0107ea1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ea4:	8b 50 04             	mov    0x4(%eax),%edx
c0107ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107eaa:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107eaf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107eb9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ec3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107eca:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c0107ecf:	85 c0                	test   %eax,%eax
c0107ed1:	74 0d                	je     c0107ee0 <mm_create+0x69>
c0107ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ed6:	89 04 24             	mov    %eax,(%esp)
c0107ed9:	e8 a2 ef ff ff       	call   c0106e80 <swap_init_mm>
c0107ede:	eb 0a                	jmp    c0107eea <mm_create+0x73>
        else mm->sm_priv = NULL;
c0107ee0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ee3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107eea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107ef1:	00 
c0107ef2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ef5:	89 04 24             	mov    %eax,(%esp)
c0107ef8:	e8 0f ff ff ff       	call   c0107e0c <set_mm_count>
        lock_init(&(mm->mm_lock));
c0107efd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f00:	83 c0 1c             	add    $0x1c,%eax
c0107f03:	89 04 24             	mov    %eax,(%esp)
c0107f06:	e8 e8 fe ff ff       	call   c0107df3 <lock_init>
    }    
    return mm;
c0107f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f0e:	c9                   	leave  
c0107f0f:	c3                   	ret    

c0107f10 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107f10:	55                   	push   %ebp
c0107f11:	89 e5                	mov    %esp,%ebp
c0107f13:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107f16:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107f1d:	e8 65 cd ff ff       	call   c0104c87 <kmalloc>
c0107f22:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107f25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f29:	74 1b                	je     c0107f46 <vma_create+0x36>
        vma->vm_start = vm_start;
c0107f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f2e:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f31:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f37:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f3a:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f40:	8b 55 10             	mov    0x10(%ebp),%edx
c0107f43:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f49:	c9                   	leave  
c0107f4a:	c3                   	ret    

c0107f4b <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107f4b:	55                   	push   %ebp
c0107f4c:	89 e5                	mov    %esp,%ebp
c0107f4e:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107f51:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107f58:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107f5c:	0f 84 95 00 00 00    	je     c0107ff7 <find_vma+0xac>
        vma = mm->mmap_cache;
c0107f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f65:	8b 40 08             	mov    0x8(%eax),%eax
c0107f68:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107f6b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107f6f:	74 16                	je     c0107f87 <find_vma+0x3c>
c0107f71:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f74:	8b 40 04             	mov    0x4(%eax),%eax
c0107f77:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f7a:	77 0b                	ja     c0107f87 <find_vma+0x3c>
c0107f7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f7f:	8b 40 08             	mov    0x8(%eax),%eax
c0107f82:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f85:	77 61                	ja     c0107fe8 <find_vma+0x9d>
                bool found = 0;
c0107f87:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107f8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f91:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f97:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107f9a:	eb 28                	jmp    c0107fc4 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f9f:	83 e8 10             	sub    $0x10,%eax
c0107fa2:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107fa5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fa8:	8b 40 04             	mov    0x4(%eax),%eax
c0107fab:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fae:	77 14                	ja     c0107fc4 <find_vma+0x79>
c0107fb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fb3:	8b 40 08             	mov    0x8(%eax),%eax
c0107fb6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fb9:	76 09                	jbe    c0107fc4 <find_vma+0x79>
                        found = 1;
c0107fbb:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0107fc2:	eb 17                	jmp    c0107fdb <find_vma+0x90>
c0107fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107fca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107fcd:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0107fd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fd6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107fd9:	75 c1                	jne    c0107f9c <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0107fdb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107fdf:	75 07                	jne    c0107fe8 <find_vma+0x9d>
                    vma = NULL;
c0107fe1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0107fe8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107fec:	74 09                	je     c0107ff7 <find_vma+0xac>
            mm->mmap_cache = vma;
c0107fee:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ff1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107ff4:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0107ff7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107ffa:	c9                   	leave  
c0107ffb:	c3                   	ret    

c0107ffc <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0107ffc:	55                   	push   %ebp
c0107ffd:	89 e5                	mov    %esp,%ebp
c0107fff:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108002:	8b 45 08             	mov    0x8(%ebp),%eax
c0108005:	8b 50 04             	mov    0x4(%eax),%edx
c0108008:	8b 45 08             	mov    0x8(%ebp),%eax
c010800b:	8b 40 08             	mov    0x8(%eax),%eax
c010800e:	39 c2                	cmp    %eax,%edx
c0108010:	72 24                	jb     c0108036 <check_vma_overlap+0x3a>
c0108012:	c7 44 24 0c 99 e0 10 	movl   $0xc010e099,0xc(%esp)
c0108019:	c0 
c010801a:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108021:	c0 
c0108022:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108029:	00 
c010802a:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108031:	e8 b0 8d ff ff       	call   c0100de6 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108036:	8b 45 08             	mov    0x8(%ebp),%eax
c0108039:	8b 50 08             	mov    0x8(%eax),%edx
c010803c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010803f:	8b 40 04             	mov    0x4(%eax),%eax
c0108042:	39 c2                	cmp    %eax,%edx
c0108044:	76 24                	jbe    c010806a <check_vma_overlap+0x6e>
c0108046:	c7 44 24 0c dc e0 10 	movl   $0xc010e0dc,0xc(%esp)
c010804d:	c0 
c010804e:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108055:	c0 
c0108056:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010805d:	00 
c010805e:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108065:	e8 7c 8d ff ff       	call   c0100de6 <__panic>
    assert(next->vm_start < next->vm_end);
c010806a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010806d:	8b 50 04             	mov    0x4(%eax),%edx
c0108070:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108073:	8b 40 08             	mov    0x8(%eax),%eax
c0108076:	39 c2                	cmp    %eax,%edx
c0108078:	72 24                	jb     c010809e <check_vma_overlap+0xa2>
c010807a:	c7 44 24 0c fb e0 10 	movl   $0xc010e0fb,0xc(%esp)
c0108081:	c0 
c0108082:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108089:	c0 
c010808a:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108091:	00 
c0108092:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108099:	e8 48 8d ff ff       	call   c0100de6 <__panic>
}
c010809e:	c9                   	leave  
c010809f:	c3                   	ret    

c01080a0 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01080a0:	55                   	push   %ebp
c01080a1:	89 e5                	mov    %esp,%ebp
c01080a3:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01080a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080a9:	8b 50 04             	mov    0x4(%eax),%edx
c01080ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080af:	8b 40 08             	mov    0x8(%eax),%eax
c01080b2:	39 c2                	cmp    %eax,%edx
c01080b4:	72 24                	jb     c01080da <insert_vma_struct+0x3a>
c01080b6:	c7 44 24 0c 19 e1 10 	movl   $0xc010e119,0xc(%esp)
c01080bd:	c0 
c01080be:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01080c5:	c0 
c01080c6:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01080cd:	00 
c01080ce:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01080d5:	e8 0c 8d ff ff       	call   c0100de6 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01080da:	8b 45 08             	mov    0x8(%ebp),%eax
c01080dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01080e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01080e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01080e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01080ec:	eb 21                	jmp    c010810f <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01080ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080f1:	83 e8 10             	sub    $0x10,%eax
c01080f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01080f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01080fa:	8b 50 04             	mov    0x4(%eax),%edx
c01080fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108100:	8b 40 04             	mov    0x4(%eax),%eax
c0108103:	39 c2                	cmp    %eax,%edx
c0108105:	76 02                	jbe    c0108109 <insert_vma_struct+0x69>
                break;
c0108107:	eb 1d                	jmp    c0108126 <insert_vma_struct+0x86>
            }
            le_prev = le;
c0108109:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010810c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010810f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108112:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108115:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108118:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010811b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010811e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108121:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108124:	75 c8                	jne    c01080ee <insert_vma_struct+0x4e>
c0108126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108129:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010812c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010812f:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108132:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108135:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108138:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010813b:	74 15                	je     c0108152 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010813d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108140:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108143:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108146:	89 44 24 04          	mov    %eax,0x4(%esp)
c010814a:	89 14 24             	mov    %edx,(%esp)
c010814d:	e8 aa fe ff ff       	call   c0107ffc <check_vma_overlap>
    }
    if (le_next != list) {
c0108152:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108155:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108158:	74 15                	je     c010816f <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010815a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010815d:	83 e8 10             	sub    $0x10,%eax
c0108160:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108164:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108167:	89 04 24             	mov    %eax,(%esp)
c010816a:	e8 8d fe ff ff       	call   c0107ffc <check_vma_overlap>
    }

    vma->vm_mm = mm;
c010816f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108172:	8b 55 08             	mov    0x8(%ebp),%edx
c0108175:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0108177:	8b 45 0c             	mov    0xc(%ebp),%eax
c010817a:	8d 50 10             	lea    0x10(%eax),%edx
c010817d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108180:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108183:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108186:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108189:	8b 40 04             	mov    0x4(%eax),%eax
c010818c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010818f:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108192:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108195:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108198:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010819b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010819e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01081a1:	89 10                	mov    %edx,(%eax)
c01081a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01081a6:	8b 10                	mov    (%eax),%edx
c01081a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01081ab:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01081ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01081b1:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01081b4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01081b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01081ba:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01081bd:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01081bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c2:	8b 40 10             	mov    0x10(%eax),%eax
c01081c5:	8d 50 01             	lea    0x1(%eax),%edx
c01081c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01081cb:	89 50 10             	mov    %edx,0x10(%eax)
}
c01081ce:	c9                   	leave  
c01081cf:	c3                   	ret    

c01081d0 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01081d0:	55                   	push   %ebp
c01081d1:	89 e5                	mov    %esp,%ebp
c01081d3:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01081d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01081d9:	89 04 24             	mov    %eax,(%esp)
c01081dc:	e8 20 fc ff ff       	call   c0107e01 <mm_count>
c01081e1:	85 c0                	test   %eax,%eax
c01081e3:	74 24                	je     c0108209 <mm_destroy+0x39>
c01081e5:	c7 44 24 0c 35 e1 10 	movl   $0xc010e135,0xc(%esp)
c01081ec:	c0 
c01081ed:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01081f4:	c0 
c01081f5:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01081fc:	00 
c01081fd:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108204:	e8 dd 8b ff ff       	call   c0100de6 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0108209:	8b 45 08             	mov    0x8(%ebp),%eax
c010820c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010820f:	eb 36                	jmp    c0108247 <mm_destroy+0x77>
c0108211:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108214:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108217:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010821a:	8b 40 04             	mov    0x4(%eax),%eax
c010821d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108220:	8b 12                	mov    (%edx),%edx
c0108222:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108225:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108228:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010822b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010822e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108231:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108234:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108237:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108239:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010823c:	83 e8 10             	sub    $0x10,%eax
c010823f:	89 04 24             	mov    %eax,(%esp)
c0108242:	e8 5b ca ff ff       	call   c0104ca2 <kfree>
c0108247:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010824a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010824d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108250:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108253:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108256:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108259:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010825c:	75 b3                	jne    c0108211 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c010825e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108261:	89 04 24             	mov    %eax,(%esp)
c0108264:	e8 39 ca ff ff       	call   c0104ca2 <kfree>
    mm=NULL;
c0108269:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108270:	c9                   	leave  
c0108271:	c3                   	ret    

c0108272 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0108272:	55                   	push   %ebp
c0108273:	89 e5                	mov    %esp,%ebp
c0108275:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108278:	8b 45 0c             	mov    0xc(%ebp),%eax
c010827b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010827e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108281:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108286:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108289:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108290:	8b 45 10             	mov    0x10(%ebp),%eax
c0108293:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108296:	01 c2                	add    %eax,%edx
c0108298:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010829b:	01 d0                	add    %edx,%eax
c010829d:	83 e8 01             	sub    $0x1,%eax
c01082a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01082a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082a6:	ba 00 00 00 00       	mov    $0x0,%edx
c01082ab:	f7 75 e8             	divl   -0x18(%ebp)
c01082ae:	89 d0                	mov    %edx,%eax
c01082b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01082b3:	29 c2                	sub    %eax,%edx
c01082b5:	89 d0                	mov    %edx,%eax
c01082b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01082ba:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01082c1:	76 11                	jbe    c01082d4 <mm_map+0x62>
c01082c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082c6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01082c9:	73 09                	jae    c01082d4 <mm_map+0x62>
c01082cb:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01082d2:	76 0a                	jbe    c01082de <mm_map+0x6c>
        return -E_INVAL;
c01082d4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01082d9:	e9 ae 00 00 00       	jmp    c010838c <mm_map+0x11a>
    }

    assert(mm != NULL);
c01082de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01082e2:	75 24                	jne    c0108308 <mm_map+0x96>
c01082e4:	c7 44 24 0c 47 e1 10 	movl   $0xc010e147,0xc(%esp)
c01082eb:	c0 
c01082ec:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01082f3:	c0 
c01082f4:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01082fb:	00 
c01082fc:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108303:	e8 de 8a ff ff       	call   c0100de6 <__panic>

    int ret = -E_INVAL;
c0108308:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c010830f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108312:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108316:	8b 45 08             	mov    0x8(%ebp),%eax
c0108319:	89 04 24             	mov    %eax,(%esp)
c010831c:	e8 2a fc ff ff       	call   c0107f4b <find_vma>
c0108321:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108324:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108328:	74 0d                	je     c0108337 <mm_map+0xc5>
c010832a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010832d:	8b 40 04             	mov    0x4(%eax),%eax
c0108330:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108333:	73 02                	jae    c0108337 <mm_map+0xc5>
        goto out;
c0108335:	eb 52                	jmp    c0108389 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108337:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010833e:	8b 45 14             	mov    0x14(%ebp),%eax
c0108341:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108345:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108348:	89 44 24 04          	mov    %eax,0x4(%esp)
c010834c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010834f:	89 04 24             	mov    %eax,(%esp)
c0108352:	e8 b9 fb ff ff       	call   c0107f10 <vma_create>
c0108357:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010835a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010835e:	75 02                	jne    c0108362 <mm_map+0xf0>
        goto out;
c0108360:	eb 27                	jmp    c0108389 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0108362:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108365:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108369:	8b 45 08             	mov    0x8(%ebp),%eax
c010836c:	89 04 24             	mov    %eax,(%esp)
c010836f:	e8 2c fd ff ff       	call   c01080a0 <insert_vma_struct>
    if (vma_store != NULL) {
c0108374:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108378:	74 08                	je     c0108382 <mm_map+0x110>
        *vma_store = vma;
c010837a:	8b 45 18             	mov    0x18(%ebp),%eax
c010837d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108380:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108382:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108389:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010838c:	c9                   	leave  
c010838d:	c3                   	ret    

c010838e <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c010838e:	55                   	push   %ebp
c010838f:	89 e5                	mov    %esp,%ebp
c0108391:	56                   	push   %esi
c0108392:	53                   	push   %ebx
c0108393:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c0108396:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010839a:	74 06                	je     c01083a2 <dup_mmap+0x14>
c010839c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01083a0:	75 24                	jne    c01083c6 <dup_mmap+0x38>
c01083a2:	c7 44 24 0c 52 e1 10 	movl   $0xc010e152,0xc(%esp)
c01083a9:	c0 
c01083aa:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01083b1:	c0 
c01083b2:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01083b9:	00 
c01083ba:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01083c1:	e8 20 8a ff ff       	call   c0100de6 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01083c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01083d2:	e9 92 00 00 00       	jmp    c0108469 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01083d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083da:	83 e8 10             	sub    $0x10,%eax
c01083dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01083e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083e3:	8b 48 0c             	mov    0xc(%eax),%ecx
c01083e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083e9:	8b 50 08             	mov    0x8(%eax),%edx
c01083ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083ef:	8b 40 04             	mov    0x4(%eax),%eax
c01083f2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01083f6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083fa:	89 04 24             	mov    %eax,(%esp)
c01083fd:	e8 0e fb ff ff       	call   c0107f10 <vma_create>
c0108402:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108405:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108409:	75 07                	jne    c0108412 <dup_mmap+0x84>
            return -E_NO_MEM;
c010840b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108410:	eb 76                	jmp    c0108488 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108412:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108415:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108419:	8b 45 08             	mov    0x8(%ebp),%eax
c010841c:	89 04 24             	mov    %eax,(%esp)
c010841f:	e8 7c fc ff ff       	call   c01080a0 <insert_vma_struct>

        bool share = 0;
c0108424:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010842b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010842e:	8b 58 08             	mov    0x8(%eax),%ebx
c0108431:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108434:	8b 48 04             	mov    0x4(%eax),%ecx
c0108437:	8b 45 0c             	mov    0xc(%ebp),%eax
c010843a:	8b 50 0c             	mov    0xc(%eax),%edx
c010843d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108440:	8b 40 0c             	mov    0xc(%eax),%eax
c0108443:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108446:	89 74 24 10          	mov    %esi,0x10(%esp)
c010844a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010844e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108452:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108456:	89 04 24             	mov    %eax,(%esp)
c0108459:	e8 f2 d7 ff ff       	call   c0105c50 <copy_range>
c010845e:	85 c0                	test   %eax,%eax
c0108460:	74 07                	je     c0108469 <dup_mmap+0xdb>
            return -E_NO_MEM;
c0108462:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108467:	eb 1f                	jmp    c0108488 <dup_mmap+0xfa>
c0108469:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010846c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010846f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108472:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108474:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108477:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010847a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010847d:	0f 85 54 ff ff ff    	jne    c01083d7 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0108483:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108488:	83 c4 40             	add    $0x40,%esp
c010848b:	5b                   	pop    %ebx
c010848c:	5e                   	pop    %esi
c010848d:	5d                   	pop    %ebp
c010848e:	c3                   	ret    

c010848f <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c010848f:	55                   	push   %ebp
c0108490:	89 e5                	mov    %esp,%ebp
c0108492:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108495:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108499:	74 0f                	je     c01084aa <exit_mmap+0x1b>
c010849b:	8b 45 08             	mov    0x8(%ebp),%eax
c010849e:	89 04 24             	mov    %eax,(%esp)
c01084a1:	e8 5b f9 ff ff       	call   c0107e01 <mm_count>
c01084a6:	85 c0                	test   %eax,%eax
c01084a8:	74 24                	je     c01084ce <exit_mmap+0x3f>
c01084aa:	c7 44 24 0c 70 e1 10 	movl   $0xc010e170,0xc(%esp)
c01084b1:	c0 
c01084b2:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01084b9:	c0 
c01084ba:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01084c1:	00 
c01084c2:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01084c9:	e8 18 89 ff ff       	call   c0100de6 <__panic>
    pde_t *pgdir = mm->pgdir;
c01084ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01084d1:	8b 40 0c             	mov    0xc(%eax),%eax
c01084d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01084d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01084da:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01084dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01084e3:	eb 28                	jmp    c010850d <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01084e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e8:	83 e8 10             	sub    $0x10,%eax
c01084eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01084ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084f1:	8b 50 08             	mov    0x8(%eax),%edx
c01084f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084f7:	8b 40 04             	mov    0x4(%eax),%eax
c01084fa:	89 54 24 08          	mov    %edx,0x8(%esp)
c01084fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108502:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108505:	89 04 24             	mov    %eax,(%esp)
c0108508:	e8 48 d5 ff ff       	call   c0105a55 <unmap_range>
c010850d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108510:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108513:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108516:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0108519:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010851c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010851f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108522:	75 c1                	jne    c01084e5 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108524:	eb 28                	jmp    c010854e <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108526:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108529:	83 e8 10             	sub    $0x10,%eax
c010852c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010852f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108532:	8b 50 08             	mov    0x8(%eax),%edx
c0108535:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108538:	8b 40 04             	mov    0x4(%eax),%eax
c010853b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010853f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108543:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108546:	89 04 24             	mov    %eax,(%esp)
c0108549:	e8 fb d5 ff ff       	call   c0105b49 <exit_range>
c010854e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108551:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108554:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108557:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010855a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010855d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108560:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108563:	75 c1                	jne    c0108526 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108565:	c9                   	leave  
c0108566:	c3                   	ret    

c0108567 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108567:	55                   	push   %ebp
c0108568:	89 e5                	mov    %esp,%ebp
c010856a:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c010856d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108570:	8b 55 18             	mov    0x18(%ebp),%edx
c0108573:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108577:	8b 55 14             	mov    0x14(%ebp),%edx
c010857a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010857e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108582:	8b 45 08             	mov    0x8(%ebp),%eax
c0108585:	89 04 24             	mov    %eax,(%esp)
c0108588:	e8 73 09 00 00       	call   c0108f00 <user_mem_check>
c010858d:	85 c0                	test   %eax,%eax
c010858f:	75 07                	jne    c0108598 <copy_from_user+0x31>
        return 0;
c0108591:	b8 00 00 00 00       	mov    $0x0,%eax
c0108596:	eb 1e                	jmp    c01085b6 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108598:	8b 45 14             	mov    0x14(%ebp),%eax
c010859b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010859f:	8b 45 10             	mov    0x10(%ebp),%eax
c01085a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085a9:	89 04 24             	mov    %eax,(%esp)
c01085ac:	e8 ad 3f 00 00       	call   c010c55e <memcpy>
    return 1;
c01085b1:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01085b6:	c9                   	leave  
c01085b7:	c3                   	ret    

c01085b8 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01085b8:	55                   	push   %ebp
c01085b9:	89 e5                	mov    %esp,%ebp
c01085bb:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01085be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085c1:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01085c8:	00 
c01085c9:	8b 55 14             	mov    0x14(%ebp),%edx
c01085cc:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01085d7:	89 04 24             	mov    %eax,(%esp)
c01085da:	e8 21 09 00 00       	call   c0108f00 <user_mem_check>
c01085df:	85 c0                	test   %eax,%eax
c01085e1:	75 07                	jne    c01085ea <copy_to_user+0x32>
        return 0;
c01085e3:	b8 00 00 00 00       	mov    $0x0,%eax
c01085e8:	eb 1e                	jmp    c0108608 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01085ea:	8b 45 14             	mov    0x14(%ebp),%eax
c01085ed:	89 44 24 08          	mov    %eax,0x8(%esp)
c01085f1:	8b 45 10             	mov    0x10(%ebp),%eax
c01085f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085fb:	89 04 24             	mov    %eax,(%esp)
c01085fe:	e8 5b 3f 00 00       	call   c010c55e <memcpy>
    return 1;
c0108603:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108608:	c9                   	leave  
c0108609:	c3                   	ret    

c010860a <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010860a:	55                   	push   %ebp
c010860b:	89 e5                	mov    %esp,%ebp
c010860d:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108610:	e8 02 00 00 00       	call   c0108617 <check_vmm>
}
c0108615:	c9                   	leave  
c0108616:	c3                   	ret    

c0108617 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0108617:	55                   	push   %ebp
c0108618:	89 e5                	mov    %esp,%ebp
c010861a:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010861d:	e8 77 cb ff ff       	call   c0105199 <nr_free_pages>
c0108622:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108625:	e8 13 00 00 00       	call   c010863d <check_vma_struct>
    check_pgfault();
c010862a:	e8 a7 04 00 00       	call   c0108ad6 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c010862f:	c7 04 24 90 e1 10 c0 	movl   $0xc010e190,(%esp)
c0108636:	e8 1d 7d ff ff       	call   c0100358 <cprintf>
}
c010863b:	c9                   	leave  
c010863c:	c3                   	ret    

c010863d <check_vma_struct>:

static void
check_vma_struct(void) {
c010863d:	55                   	push   %ebp
c010863e:	89 e5                	mov    %esp,%ebp
c0108640:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108643:	e8 51 cb ff ff       	call   c0105199 <nr_free_pages>
c0108648:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c010864b:	e8 27 f8 ff ff       	call   c0107e77 <mm_create>
c0108650:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108653:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108657:	75 24                	jne    c010867d <check_vma_struct+0x40>
c0108659:	c7 44 24 0c 47 e1 10 	movl   $0xc010e147,0xc(%esp)
c0108660:	c0 
c0108661:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108668:	c0 
c0108669:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108670:	00 
c0108671:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108678:	e8 69 87 ff ff       	call   c0100de6 <__panic>

    int step1 = 10, step2 = step1 * 10;
c010867d:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108684:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108687:	89 d0                	mov    %edx,%eax
c0108689:	c1 e0 02             	shl    $0x2,%eax
c010868c:	01 d0                	add    %edx,%eax
c010868e:	01 c0                	add    %eax,%eax
c0108690:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108693:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108696:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108699:	eb 70                	jmp    c010870b <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010869b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010869e:	89 d0                	mov    %edx,%eax
c01086a0:	c1 e0 02             	shl    $0x2,%eax
c01086a3:	01 d0                	add    %edx,%eax
c01086a5:	83 c0 02             	add    $0x2,%eax
c01086a8:	89 c1                	mov    %eax,%ecx
c01086aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086ad:	89 d0                	mov    %edx,%eax
c01086af:	c1 e0 02             	shl    $0x2,%eax
c01086b2:	01 d0                	add    %edx,%eax
c01086b4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01086bb:	00 
c01086bc:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01086c0:	89 04 24             	mov    %eax,(%esp)
c01086c3:	e8 48 f8 ff ff       	call   c0107f10 <vma_create>
c01086c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01086cb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01086cf:	75 24                	jne    c01086f5 <check_vma_struct+0xb8>
c01086d1:	c7 44 24 0c a8 e1 10 	movl   $0xc010e1a8,0xc(%esp)
c01086d8:	c0 
c01086d9:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01086e0:	c0 
c01086e1:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01086e8:	00 
c01086e9:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01086f0:	e8 f1 86 ff ff       	call   c0100de6 <__panic>
        insert_vma_struct(mm, vma);
c01086f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086ff:	89 04 24             	mov    %eax,(%esp)
c0108702:	e8 99 f9 ff ff       	call   c01080a0 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0108707:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010870b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010870f:	7f 8a                	jg     c010869b <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108711:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108714:	83 c0 01             	add    $0x1,%eax
c0108717:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010871a:	eb 70                	jmp    c010878c <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010871c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010871f:	89 d0                	mov    %edx,%eax
c0108721:	c1 e0 02             	shl    $0x2,%eax
c0108724:	01 d0                	add    %edx,%eax
c0108726:	83 c0 02             	add    $0x2,%eax
c0108729:	89 c1                	mov    %eax,%ecx
c010872b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010872e:	89 d0                	mov    %edx,%eax
c0108730:	c1 e0 02             	shl    $0x2,%eax
c0108733:	01 d0                	add    %edx,%eax
c0108735:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010873c:	00 
c010873d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108741:	89 04 24             	mov    %eax,(%esp)
c0108744:	e8 c7 f7 ff ff       	call   c0107f10 <vma_create>
c0108749:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c010874c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108750:	75 24                	jne    c0108776 <check_vma_struct+0x139>
c0108752:	c7 44 24 0c a8 e1 10 	movl   $0xc010e1a8,0xc(%esp)
c0108759:	c0 
c010875a:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108761:	c0 
c0108762:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108769:	00 
c010876a:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108771:	e8 70 86 ff ff       	call   c0100de6 <__panic>
        insert_vma_struct(mm, vma);
c0108776:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108779:	89 44 24 04          	mov    %eax,0x4(%esp)
c010877d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108780:	89 04 24             	mov    %eax,(%esp)
c0108783:	e8 18 f9 ff ff       	call   c01080a0 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108788:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010878c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010878f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108792:	7e 88                	jle    c010871c <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108794:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108797:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010879a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010879d:	8b 40 04             	mov    0x4(%eax),%eax
c01087a0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01087a3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01087aa:	e9 97 00 00 00       	jmp    c0108846 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c01087af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01087b5:	75 24                	jne    c01087db <check_vma_struct+0x19e>
c01087b7:	c7 44 24 0c b4 e1 10 	movl   $0xc010e1b4,0xc(%esp)
c01087be:	c0 
c01087bf:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01087c6:	c0 
c01087c7:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c01087ce:	00 
c01087cf:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01087d6:	e8 0b 86 ff ff       	call   c0100de6 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01087db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087de:	83 e8 10             	sub    $0x10,%eax
c01087e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01087e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01087e7:	8b 48 04             	mov    0x4(%eax),%ecx
c01087ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087ed:	89 d0                	mov    %edx,%eax
c01087ef:	c1 e0 02             	shl    $0x2,%eax
c01087f2:	01 d0                	add    %edx,%eax
c01087f4:	39 c1                	cmp    %eax,%ecx
c01087f6:	75 17                	jne    c010880f <check_vma_struct+0x1d2>
c01087f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01087fb:	8b 48 08             	mov    0x8(%eax),%ecx
c01087fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108801:	89 d0                	mov    %edx,%eax
c0108803:	c1 e0 02             	shl    $0x2,%eax
c0108806:	01 d0                	add    %edx,%eax
c0108808:	83 c0 02             	add    $0x2,%eax
c010880b:	39 c1                	cmp    %eax,%ecx
c010880d:	74 24                	je     c0108833 <check_vma_struct+0x1f6>
c010880f:	c7 44 24 0c cc e1 10 	movl   $0xc010e1cc,0xc(%esp)
c0108816:	c0 
c0108817:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c010881e:	c0 
c010881f:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108826:	00 
c0108827:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c010882e:	e8 b3 85 ff ff       	call   c0100de6 <__panic>
c0108833:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108836:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108839:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010883c:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010883f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108842:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108846:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108849:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010884c:	0f 8e 5d ff ff ff    	jle    c01087af <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108852:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108859:	e9 cd 01 00 00       	jmp    c0108a2b <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c010885e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108861:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108865:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108868:	89 04 24             	mov    %eax,(%esp)
c010886b:	e8 db f6 ff ff       	call   c0107f4b <find_vma>
c0108870:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108873:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108877:	75 24                	jne    c010889d <check_vma_struct+0x260>
c0108879:	c7 44 24 0c 01 e2 10 	movl   $0xc010e201,0xc(%esp)
c0108880:	c0 
c0108881:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108888:	c0 
c0108889:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108890:	00 
c0108891:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108898:	e8 49 85 ff ff       	call   c0100de6 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c010889d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088a0:	83 c0 01             	add    $0x1,%eax
c01088a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088aa:	89 04 24             	mov    %eax,(%esp)
c01088ad:	e8 99 f6 ff ff       	call   c0107f4b <find_vma>
c01088b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c01088b5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01088b9:	75 24                	jne    c01088df <check_vma_struct+0x2a2>
c01088bb:	c7 44 24 0c 0e e2 10 	movl   $0xc010e20e,0xc(%esp)
c01088c2:	c0 
c01088c3:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01088ca:	c0 
c01088cb:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c01088d2:	00 
c01088d3:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01088da:	e8 07 85 ff ff       	call   c0100de6 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01088df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088e2:	83 c0 02             	add    $0x2,%eax
c01088e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088ec:	89 04 24             	mov    %eax,(%esp)
c01088ef:	e8 57 f6 ff ff       	call   c0107f4b <find_vma>
c01088f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01088f7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01088fb:	74 24                	je     c0108921 <check_vma_struct+0x2e4>
c01088fd:	c7 44 24 0c 1b e2 10 	movl   $0xc010e21b,0xc(%esp)
c0108904:	c0 
c0108905:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c010890c:	c0 
c010890d:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108914:	00 
c0108915:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c010891c:	e8 c5 84 ff ff       	call   c0100de6 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108921:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108924:	83 c0 03             	add    $0x3,%eax
c0108927:	89 44 24 04          	mov    %eax,0x4(%esp)
c010892b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010892e:	89 04 24             	mov    %eax,(%esp)
c0108931:	e8 15 f6 ff ff       	call   c0107f4b <find_vma>
c0108936:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108939:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010893d:	74 24                	je     c0108963 <check_vma_struct+0x326>
c010893f:	c7 44 24 0c 28 e2 10 	movl   $0xc010e228,0xc(%esp)
c0108946:	c0 
c0108947:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c010894e:	c0 
c010894f:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108956:	00 
c0108957:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c010895e:	e8 83 84 ff ff       	call   c0100de6 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108963:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108966:	83 c0 04             	add    $0x4,%eax
c0108969:	89 44 24 04          	mov    %eax,0x4(%esp)
c010896d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108970:	89 04 24             	mov    %eax,(%esp)
c0108973:	e8 d3 f5 ff ff       	call   c0107f4b <find_vma>
c0108978:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c010897b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c010897f:	74 24                	je     c01089a5 <check_vma_struct+0x368>
c0108981:	c7 44 24 0c 35 e2 10 	movl   $0xc010e235,0xc(%esp)
c0108988:	c0 
c0108989:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108990:	c0 
c0108991:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108998:	00 
c0108999:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01089a0:	e8 41 84 ff ff       	call   c0100de6 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c01089a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01089a8:	8b 50 04             	mov    0x4(%eax),%edx
c01089ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089ae:	39 c2                	cmp    %eax,%edx
c01089b0:	75 10                	jne    c01089c2 <check_vma_struct+0x385>
c01089b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01089b5:	8b 50 08             	mov    0x8(%eax),%edx
c01089b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089bb:	83 c0 02             	add    $0x2,%eax
c01089be:	39 c2                	cmp    %eax,%edx
c01089c0:	74 24                	je     c01089e6 <check_vma_struct+0x3a9>
c01089c2:	c7 44 24 0c 44 e2 10 	movl   $0xc010e244,0xc(%esp)
c01089c9:	c0 
c01089ca:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c01089d1:	c0 
c01089d2:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c01089d9:	00 
c01089da:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c01089e1:	e8 00 84 ff ff       	call   c0100de6 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01089e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01089e9:	8b 50 04             	mov    0x4(%eax),%edx
c01089ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089ef:	39 c2                	cmp    %eax,%edx
c01089f1:	75 10                	jne    c0108a03 <check_vma_struct+0x3c6>
c01089f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01089f6:	8b 50 08             	mov    0x8(%eax),%edx
c01089f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089fc:	83 c0 02             	add    $0x2,%eax
c01089ff:	39 c2                	cmp    %eax,%edx
c0108a01:	74 24                	je     c0108a27 <check_vma_struct+0x3ea>
c0108a03:	c7 44 24 0c 74 e2 10 	movl   $0xc010e274,0xc(%esp)
c0108a0a:	c0 
c0108a0b:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108a12:	c0 
c0108a13:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108a1a:	00 
c0108a1b:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108a22:	e8 bf 83 ff ff       	call   c0100de6 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108a27:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108a2b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a2e:	89 d0                	mov    %edx,%eax
c0108a30:	c1 e0 02             	shl    $0x2,%eax
c0108a33:	01 d0                	add    %edx,%eax
c0108a35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108a38:	0f 8d 20 fe ff ff    	jge    c010885e <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108a3e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108a45:	eb 70                	jmp    c0108ab7 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108a47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a51:	89 04 24             	mov    %eax,(%esp)
c0108a54:	e8 f2 f4 ff ff       	call   c0107f4b <find_vma>
c0108a59:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108a5c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a60:	74 27                	je     c0108a89 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108a62:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a65:	8b 50 08             	mov    0x8(%eax),%edx
c0108a68:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a6b:	8b 40 04             	mov    0x4(%eax),%eax
c0108a6e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108a72:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a7d:	c7 04 24 a4 e2 10 c0 	movl   $0xc010e2a4,(%esp)
c0108a84:	e8 cf 78 ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108a89:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a8d:	74 24                	je     c0108ab3 <check_vma_struct+0x476>
c0108a8f:	c7 44 24 0c c9 e2 10 	movl   $0xc010e2c9,0xc(%esp)
c0108a96:	c0 
c0108a97:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108a9e:	c0 
c0108a9f:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108aa6:	00 
c0108aa7:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108aae:	e8 33 83 ff ff       	call   c0100de6 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108ab3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108ab7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108abb:	79 8a                	jns    c0108a47 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108abd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ac0:	89 04 24             	mov    %eax,(%esp)
c0108ac3:	e8 08 f7 ff ff       	call   c01081d0 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108ac8:	c7 04 24 e0 e2 10 c0 	movl   $0xc010e2e0,(%esp)
c0108acf:	e8 84 78 ff ff       	call   c0100358 <cprintf>
}
c0108ad4:	c9                   	leave  
c0108ad5:	c3                   	ret    

c0108ad6 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108ad6:	55                   	push   %ebp
c0108ad7:	89 e5                	mov    %esp,%ebp
c0108ad9:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108adc:	e8 b8 c6 ff ff       	call   c0105199 <nr_free_pages>
c0108ae1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108ae4:	e8 8e f3 ff ff       	call   c0107e77 <mm_create>
c0108ae9:	a3 6c 1f 1b c0       	mov    %eax,0xc01b1f6c
    assert(check_mm_struct != NULL);
c0108aee:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0108af3:	85 c0                	test   %eax,%eax
c0108af5:	75 24                	jne    c0108b1b <check_pgfault+0x45>
c0108af7:	c7 44 24 0c ff e2 10 	movl   $0xc010e2ff,0xc(%esp)
c0108afe:	c0 
c0108aff:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108b06:	c0 
c0108b07:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108b0e:	00 
c0108b0f:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108b16:	e8 cb 82 ff ff       	call   c0100de6 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108b1b:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0108b20:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108b23:	8b 15 84 fd 1a c0    	mov    0xc01afd84,%edx
c0108b29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b2c:	89 50 0c             	mov    %edx,0xc(%eax)
c0108b2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b32:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108b38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b3b:	8b 00                	mov    (%eax),%eax
c0108b3d:	85 c0                	test   %eax,%eax
c0108b3f:	74 24                	je     c0108b65 <check_pgfault+0x8f>
c0108b41:	c7 44 24 0c 17 e3 10 	movl   $0xc010e317,0xc(%esp)
c0108b48:	c0 
c0108b49:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108b50:	c0 
c0108b51:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108b58:	00 
c0108b59:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108b60:	e8 81 82 ff ff       	call   c0100de6 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108b65:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108b6c:	00 
c0108b6d:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108b74:	00 
c0108b75:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108b7c:	e8 8f f3 ff ff       	call   c0107f10 <vma_create>
c0108b81:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108b84:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108b88:	75 24                	jne    c0108bae <check_pgfault+0xd8>
c0108b8a:	c7 44 24 0c a8 e1 10 	movl   $0xc010e1a8,0xc(%esp)
c0108b91:	c0 
c0108b92:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108b99:	c0 
c0108b9a:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108ba1:	00 
c0108ba2:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108ba9:	e8 38 82 ff ff       	call   c0100de6 <__panic>

    insert_vma_struct(mm, vma);
c0108bae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108bb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bb8:	89 04 24             	mov    %eax,(%esp)
c0108bbb:	e8 e0 f4 ff ff       	call   c01080a0 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108bc0:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108bc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108bca:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bd1:	89 04 24             	mov    %eax,(%esp)
c0108bd4:	e8 72 f3 ff ff       	call   c0107f4b <find_vma>
c0108bd9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108bdc:	74 24                	je     c0108c02 <check_pgfault+0x12c>
c0108bde:	c7 44 24 0c 25 e3 10 	movl   $0xc010e325,0xc(%esp)
c0108be5:	c0 
c0108be6:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108bed:	c0 
c0108bee:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108bf5:	00 
c0108bf6:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108bfd:	e8 e4 81 ff ff       	call   c0100de6 <__panic>

    int i, sum = 0;
c0108c02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108c09:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c10:	eb 17                	jmp    c0108c29 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108c12:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c15:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c18:	01 d0                	add    %edx,%eax
c0108c1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c1d:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c22:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108c25:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c29:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c2d:	7e e3                	jle    c0108c12 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c36:	eb 15                	jmp    c0108c4d <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108c38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c3e:	01 d0                	add    %edx,%eax
c0108c40:	0f b6 00             	movzbl (%eax),%eax
c0108c43:	0f be c0             	movsbl %al,%eax
c0108c46:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c49:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c4d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c51:	7e e5                	jle    c0108c38 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108c53:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108c57:	74 24                	je     c0108c7d <check_pgfault+0x1a7>
c0108c59:	c7 44 24 0c 3f e3 10 	movl   $0xc010e33f,0xc(%esp)
c0108c60:	c0 
c0108c61:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108c68:	c0 
c0108c69:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108c70:	00 
c0108c71:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108c78:	e8 69 81 ff ff       	call   c0100de6 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108c7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c80:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108c83:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108c86:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108c8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c92:	89 04 24             	mov    %eax,(%esp)
c0108c95:	e8 d9 d1 ff ff       	call   c0105e73 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108c9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c9d:	8b 00                	mov    (%eax),%eax
c0108c9f:	89 04 24             	mov    %eax,(%esp)
c0108ca2:	e8 b8 f1 ff ff       	call   c0107e5f <pde2page>
c0108ca7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108cae:	00 
c0108caf:	89 04 24             	mov    %eax,(%esp)
c0108cb2:	e8 b0 c4 ff ff       	call   c0105167 <free_pages>
    pgdir[0] = 0;
c0108cb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108cba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108cc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cc3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108cca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ccd:	89 04 24             	mov    %eax,(%esp)
c0108cd0:	e8 fb f4 ff ff       	call   c01081d0 <mm_destroy>
    check_mm_struct = NULL;
c0108cd5:	c7 05 6c 1f 1b c0 00 	movl   $0x0,0xc01b1f6c
c0108cdc:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108cdf:	e8 b5 c4 ff ff       	call   c0105199 <nr_free_pages>
c0108ce4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108ce7:	74 24                	je     c0108d0d <check_pgfault+0x237>
c0108ce9:	c7 44 24 0c 48 e3 10 	movl   $0xc010e348,0xc(%esp)
c0108cf0:	c0 
c0108cf1:	c7 44 24 08 b7 e0 10 	movl   $0xc010e0b7,0x8(%esp)
c0108cf8:	c0 
c0108cf9:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108d00:	00 
c0108d01:	c7 04 24 cc e0 10 c0 	movl   $0xc010e0cc,(%esp)
c0108d08:	e8 d9 80 ff ff       	call   c0100de6 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108d0d:	c7 04 24 6f e3 10 c0 	movl   $0xc010e36f,(%esp)
c0108d14:	e8 3f 76 ff ff       	call   c0100358 <cprintf>
}
c0108d19:	c9                   	leave  
c0108d1a:	c3                   	ret    

c0108d1b <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108d1b:	55                   	push   %ebp
c0108d1c:	89 e5                	mov    %esp,%ebp
c0108d1e:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108d21:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108d28:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d2b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d32:	89 04 24             	mov    %eax,(%esp)
c0108d35:	e8 11 f2 ff ff       	call   c0107f4b <find_vma>
c0108d3a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108d3d:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0108d42:	83 c0 01             	add    $0x1,%eax
c0108d45:	a3 18 fe 1a c0       	mov    %eax,0xc01afe18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108d4a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108d4e:	74 0b                	je     c0108d5b <do_pgfault+0x40>
c0108d50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d53:	8b 40 04             	mov    0x4(%eax),%eax
c0108d56:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108d59:	76 18                	jbe    c0108d73 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108d5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d62:	c7 04 24 8c e3 10 c0 	movl   $0xc010e38c,(%esp)
c0108d69:	e8 ea 75 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108d6e:	e9 88 01 00 00       	jmp    c0108efb <do_pgfault+0x1e0>
    }
    //check the error_code
    switch (error_code & 3) {
c0108d73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d76:	83 e0 03             	and    $0x3,%eax
c0108d79:	85 c0                	test   %eax,%eax
c0108d7b:	74 36                	je     c0108db3 <do_pgfault+0x98>
c0108d7d:	83 f8 01             	cmp    $0x1,%eax
c0108d80:	74 20                	je     c0108da2 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d85:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d88:	83 e0 02             	and    $0x2,%eax
c0108d8b:	85 c0                	test   %eax,%eax
c0108d8d:	75 11                	jne    c0108da0 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108d8f:	c7 04 24 bc e3 10 c0 	movl   $0xc010e3bc,(%esp)
c0108d96:	e8 bd 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108d9b:	e9 5b 01 00 00       	jmp    c0108efb <do_pgfault+0x1e0>
        }
        break;
c0108da0:	eb 2f                	jmp    c0108dd1 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108da2:	c7 04 24 1c e4 10 c0 	movl   $0xc010e41c,(%esp)
c0108da9:	e8 aa 75 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108dae:	e9 48 01 00 00       	jmp    c0108efb <do_pgfault+0x1e0>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108db3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108db6:	8b 40 0c             	mov    0xc(%eax),%eax
c0108db9:	83 e0 05             	and    $0x5,%eax
c0108dbc:	85 c0                	test   %eax,%eax
c0108dbe:	75 11                	jne    c0108dd1 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108dc0:	c7 04 24 54 e4 10 c0 	movl   $0xc010e454,(%esp)
c0108dc7:	e8 8c 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108dcc:	e9 2a 01 00 00       	jmp    c0108efb <do_pgfault+0x1e0>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108dd1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108dd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ddb:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dde:	83 e0 02             	and    $0x2,%eax
c0108de1:	85 c0                	test   %eax,%eax
c0108de3:	74 04                	je     c0108de9 <do_pgfault+0xce>
        perm |= PTE_W;
c0108de5:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108de9:	8b 45 10             	mov    0x10(%ebp),%eax
c0108dec:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108def:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108df2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108df7:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108dfa:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108e01:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
    ptep = get_pte(mm->pgdir, addr, 1);
c0108e08:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e0b:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e0e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108e15:	00 
c0108e16:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e19:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e1d:	89 04 24             	mov    %eax,(%esp)
c0108e20:	e8 3e ca ff ff       	call   c0105863 <get_pte>
c0108e25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (ptep == NULL)
c0108e28:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108e2c:	75 05                	jne    c0108e33 <do_pgfault+0x118>
    	goto failed;
c0108e2e:	e9 c8 00 00 00       	jmp    c0108efb <do_pgfault+0x1e0>
	if (*ptep == 0) {
c0108e33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e36:	8b 00                	mov    (%eax),%eax
c0108e38:	85 c0                	test   %eax,%eax
c0108e3a:	75 29                	jne    c0108e65 <do_pgfault+0x14a>
		if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL)
c0108e3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e3f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e42:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e45:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108e49:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e4c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e50:	89 04 24             	mov    %eax,(%esp)
c0108e53:	e8 75 d1 ff ff       	call   c0105fcd <pgdir_alloc_page>
c0108e58:	85 c0                	test   %eax,%eax
c0108e5a:	0f 85 94 00 00 00    	jne    c0108ef4 <do_pgfault+0x1d9>
			goto failed;
c0108e60:	e9 96 00 00 00       	jmp    c0108efb <do_pgfault+0x1e0>
	} else {
		if(swap_init_ok) {
c0108e65:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c0108e6a:	85 c0                	test   %eax,%eax
c0108e6c:	74 6f                	je     c0108edd <do_pgfault+0x1c2>
			struct Page *page=NULL;
c0108e6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			if ((ret = swap_in(mm, addr, &page)) != 0)
c0108e75:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108e78:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e83:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e86:	89 04 24             	mov    %eax,(%esp)
c0108e89:	e8 eb e1 ff ff       	call   c0107079 <swap_in>
c0108e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108e91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e95:	75 64                	jne    c0108efb <do_pgfault+0x1e0>
				goto failed;
			page_insert(mm->pgdir, page, addr, perm);
c0108e97:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108e9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e9d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ea0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108ea3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108ea7:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108eaa:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108eae:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108eb2:	89 04 24             	mov    %eax,(%esp)
c0108eb5:	e8 fd cf ff ff       	call   c0105eb7 <page_insert>
			swap_map_swappable(mm, addr, page, 1);
c0108eba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108ebd:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108ec4:	00 
c0108ec5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ec9:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ecc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ed3:	89 04 24             	mov    %eax,(%esp)
c0108ed6:	e8 d5 df ff ff       	call   c0106eb0 <swap_map_swappable>
c0108edb:	eb 17                	jmp    c0108ef4 <do_pgfault+0x1d9>
		} else {
			cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108edd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ee0:	8b 00                	mov    (%eax),%eax
c0108ee2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ee6:	c7 04 24 b8 e4 10 c0 	movl   $0xc010e4b8,(%esp)
c0108eed:	e8 66 74 ff ff       	call   c0100358 <cprintf>
			goto failed;
c0108ef2:	eb 07                	jmp    c0108efb <do_pgfault+0x1e0>
		}
   }
   ret = 0;
c0108ef4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108efb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108efe:	c9                   	leave  
c0108eff:	c3                   	ret    

c0108f00 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108f00:	55                   	push   %ebp
c0108f01:	89 e5                	mov    %esp,%ebp
c0108f03:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108f06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108f0a:	0f 84 e0 00 00 00    	je     c0108ff0 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108f10:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108f17:	76 1c                	jbe    c0108f35 <user_mem_check+0x35>
c0108f19:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f1c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f1f:	01 d0                	add    %edx,%eax
c0108f21:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108f24:	76 0f                	jbe    c0108f35 <user_mem_check+0x35>
c0108f26:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f29:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f2c:	01 d0                	add    %edx,%eax
c0108f2e:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108f33:	76 0a                	jbe    c0108f3f <user_mem_check+0x3f>
            return 0;
c0108f35:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f3a:	e9 e2 00 00 00       	jmp    c0109021 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f42:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108f45:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f48:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f4b:	01 d0                	add    %edx,%eax
c0108f4d:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108f50:	e9 88 00 00 00       	jmp    c0108fdd <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108f55:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f5f:	89 04 24             	mov    %eax,(%esp)
c0108f62:	e8 e4 ef ff ff       	call   c0107f4b <find_vma>
c0108f67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f6e:	74 0b                	je     c0108f7b <user_mem_check+0x7b>
c0108f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f73:	8b 40 04             	mov    0x4(%eax),%eax
c0108f76:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108f79:	76 0a                	jbe    c0108f85 <user_mem_check+0x85>
                return 0;
c0108f7b:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f80:	e9 9c 00 00 00       	jmp    c0109021 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f88:	8b 50 0c             	mov    0xc(%eax),%edx
c0108f8b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108f8f:	74 07                	je     c0108f98 <user_mem_check+0x98>
c0108f91:	b8 02 00 00 00       	mov    $0x2,%eax
c0108f96:	eb 05                	jmp    c0108f9d <user_mem_check+0x9d>
c0108f98:	b8 01 00 00 00       	mov    $0x1,%eax
c0108f9d:	21 d0                	and    %edx,%eax
c0108f9f:	85 c0                	test   %eax,%eax
c0108fa1:	75 07                	jne    c0108faa <user_mem_check+0xaa>
                return 0;
c0108fa3:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fa8:	eb 77                	jmp    c0109021 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108faa:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108fae:	74 24                	je     c0108fd4 <user_mem_check+0xd4>
c0108fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fb3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fb6:	83 e0 08             	and    $0x8,%eax
c0108fb9:	85 c0                	test   %eax,%eax
c0108fbb:	74 17                	je     c0108fd4 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fc0:	8b 40 04             	mov    0x4(%eax),%eax
c0108fc3:	05 00 10 00 00       	add    $0x1000,%eax
c0108fc8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108fcb:	76 07                	jbe    c0108fd4 <user_mem_check+0xd4>
                    return 0;
c0108fcd:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fd2:	eb 4d                	jmp    c0109021 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0108fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fd7:	8b 40 08             	mov    0x8(%eax),%eax
c0108fda:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0108fdd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108fe0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0108fe3:	0f 82 6c ff ff ff    	jb     c0108f55 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0108fe9:	b8 01 00 00 00       	mov    $0x1,%eax
c0108fee:	eb 31                	jmp    c0109021 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0108ff0:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0108ff7:	76 23                	jbe    c010901c <user_mem_check+0x11c>
c0108ff9:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ffc:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108fff:	01 d0                	add    %edx,%eax
c0109001:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109004:	76 16                	jbe    c010901c <user_mem_check+0x11c>
c0109006:	8b 45 10             	mov    0x10(%ebp),%eax
c0109009:	8b 55 0c             	mov    0xc(%ebp),%edx
c010900c:	01 d0                	add    %edx,%eax
c010900e:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0109013:	77 07                	ja     c010901c <user_mem_check+0x11c>
c0109015:	b8 01 00 00 00       	mov    $0x1,%eax
c010901a:	eb 05                	jmp    c0109021 <user_mem_check+0x121>
c010901c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109021:	c9                   	leave  
c0109022:	c3                   	ret    

c0109023 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109023:	55                   	push   %ebp
c0109024:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109026:	8b 55 08             	mov    0x8(%ebp),%edx
c0109029:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c010902e:	29 c2                	sub    %eax,%edx
c0109030:	89 d0                	mov    %edx,%eax
c0109032:	c1 f8 05             	sar    $0x5,%eax
}
c0109035:	5d                   	pop    %ebp
c0109036:	c3                   	ret    

c0109037 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109037:	55                   	push   %ebp
c0109038:	89 e5                	mov    %esp,%ebp
c010903a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010903d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109040:	89 04 24             	mov    %eax,(%esp)
c0109043:	e8 db ff ff ff       	call   c0109023 <page2ppn>
c0109048:	c1 e0 0c             	shl    $0xc,%eax
}
c010904b:	c9                   	leave  
c010904c:	c3                   	ret    

c010904d <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010904d:	55                   	push   %ebp
c010904e:	89 e5                	mov    %esp,%ebp
c0109050:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109053:	8b 45 08             	mov    0x8(%ebp),%eax
c0109056:	89 04 24             	mov    %eax,(%esp)
c0109059:	e8 d9 ff ff ff       	call   c0109037 <page2pa>
c010905e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109061:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109064:	c1 e8 0c             	shr    $0xc,%eax
c0109067:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010906a:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010906f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109072:	72 23                	jb     c0109097 <page2kva+0x4a>
c0109074:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109077:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010907b:	c7 44 24 08 e0 e4 10 	movl   $0xc010e4e0,0x8(%esp)
c0109082:	c0 
c0109083:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010908a:	00 
c010908b:	c7 04 24 03 e5 10 c0 	movl   $0xc010e503,(%esp)
c0109092:	e8 4f 7d ff ff       	call   c0100de6 <__panic>
c0109097:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010909a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010909f:	c9                   	leave  
c01090a0:	c3                   	ret    

c01090a1 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c01090a1:	55                   	push   %ebp
c01090a2:	89 e5                	mov    %esp,%ebp
c01090a4:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c01090a7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01090ae:	e8 83 8a ff ff       	call   c0101b36 <ide_device_valid>
c01090b3:	85 c0                	test   %eax,%eax
c01090b5:	75 1c                	jne    c01090d3 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c01090b7:	c7 44 24 08 11 e5 10 	movl   $0xc010e511,0x8(%esp)
c01090be:	c0 
c01090bf:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c01090c6:	00 
c01090c7:	c7 04 24 2b e5 10 c0 	movl   $0xc010e52b,(%esp)
c01090ce:	e8 13 7d ff ff       	call   c0100de6 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c01090d3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01090da:	e8 96 8a ff ff       	call   c0101b75 <ide_device_size>
c01090df:	c1 e8 03             	shr    $0x3,%eax
c01090e2:	a3 3c 1f 1b c0       	mov    %eax,0xc01b1f3c
}
c01090e7:	c9                   	leave  
c01090e8:	c3                   	ret    

c01090e9 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c01090e9:	55                   	push   %ebp
c01090ea:	89 e5                	mov    %esp,%ebp
c01090ec:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01090ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090f2:	89 04 24             	mov    %eax,(%esp)
c01090f5:	e8 53 ff ff ff       	call   c010904d <page2kva>
c01090fa:	8b 55 08             	mov    0x8(%ebp),%edx
c01090fd:	c1 ea 08             	shr    $0x8,%edx
c0109100:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109103:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109107:	74 0b                	je     c0109114 <swapfs_read+0x2b>
c0109109:	8b 15 3c 1f 1b c0    	mov    0xc01b1f3c,%edx
c010910f:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109112:	72 23                	jb     c0109137 <swapfs_read+0x4e>
c0109114:	8b 45 08             	mov    0x8(%ebp),%eax
c0109117:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010911b:	c7 44 24 08 3c e5 10 	movl   $0xc010e53c,0x8(%esp)
c0109122:	c0 
c0109123:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010912a:	00 
c010912b:	c7 04 24 2b e5 10 c0 	movl   $0xc010e52b,(%esp)
c0109132:	e8 af 7c ff ff       	call   c0100de6 <__panic>
c0109137:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010913a:	c1 e2 03             	shl    $0x3,%edx
c010913d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0109144:	00 
c0109145:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109149:	89 54 24 04          	mov    %edx,0x4(%esp)
c010914d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109154:	e8 5b 8a ff ff       	call   c0101bb4 <ide_read_secs>
}
c0109159:	c9                   	leave  
c010915a:	c3                   	ret    

c010915b <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010915b:	55                   	push   %ebp
c010915c:	89 e5                	mov    %esp,%ebp
c010915e:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109161:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109164:	89 04 24             	mov    %eax,(%esp)
c0109167:	e8 e1 fe ff ff       	call   c010904d <page2kva>
c010916c:	8b 55 08             	mov    0x8(%ebp),%edx
c010916f:	c1 ea 08             	shr    $0x8,%edx
c0109172:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109175:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109179:	74 0b                	je     c0109186 <swapfs_write+0x2b>
c010917b:	8b 15 3c 1f 1b c0    	mov    0xc01b1f3c,%edx
c0109181:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109184:	72 23                	jb     c01091a9 <swapfs_write+0x4e>
c0109186:	8b 45 08             	mov    0x8(%ebp),%eax
c0109189:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010918d:	c7 44 24 08 3c e5 10 	movl   $0xc010e53c,0x8(%esp)
c0109194:	c0 
c0109195:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010919c:	00 
c010919d:	c7 04 24 2b e5 10 c0 	movl   $0xc010e52b,(%esp)
c01091a4:	e8 3d 7c ff ff       	call   c0100de6 <__panic>
c01091a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01091ac:	c1 e2 03             	shl    $0x3,%edx
c01091af:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c01091b6:	00 
c01091b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091bb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01091bf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01091c6:	e8 2b 8c ff ff       	call   c0101df6 <ide_write_secs>
}
c01091cb:	c9                   	leave  
c01091cc:	c3                   	ret    

c01091cd <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c01091cd:	52                   	push   %edx
    call *%ebx              # call fn
c01091ce:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c01091d0:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c01091d1:	e8 ed 0c 00 00       	call   c0109ec3 <do_exit>

c01091d6 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c01091d6:	55                   	push   %ebp
c01091d7:	89 e5                	mov    %esp,%ebp
c01091d9:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c01091dc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091df:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e2:	0f ab 02             	bts    %eax,(%edx)
c01091e5:	19 c0                	sbb    %eax,%eax
c01091e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c01091ea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01091ee:	0f 95 c0             	setne  %al
c01091f1:	0f b6 c0             	movzbl %al,%eax
}
c01091f4:	c9                   	leave  
c01091f5:	c3                   	ret    

c01091f6 <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c01091f6:	55                   	push   %ebp
c01091f7:	89 e5                	mov    %esp,%ebp
c01091f9:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c01091fc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109202:	0f b3 02             	btr    %eax,(%edx)
c0109205:	19 c0                	sbb    %eax,%eax
c0109207:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010920a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010920e:	0f 95 c0             	setne  %al
c0109211:	0f b6 c0             	movzbl %al,%eax
}
c0109214:	c9                   	leave  
c0109215:	c3                   	ret    

c0109216 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109216:	55                   	push   %ebp
c0109217:	89 e5                	mov    %esp,%ebp
c0109219:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010921c:	9c                   	pushf  
c010921d:	58                   	pop    %eax
c010921e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109221:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109224:	25 00 02 00 00       	and    $0x200,%eax
c0109229:	85 c0                	test   %eax,%eax
c010922b:	74 0c                	je     c0109239 <__intr_save+0x23>
        intr_disable();
c010922d:	e8 0c 8e ff ff       	call   c010203e <intr_disable>
        return 1;
c0109232:	b8 01 00 00 00       	mov    $0x1,%eax
c0109237:	eb 05                	jmp    c010923e <__intr_save+0x28>
    }
    return 0;
c0109239:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010923e:	c9                   	leave  
c010923f:	c3                   	ret    

c0109240 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109240:	55                   	push   %ebp
c0109241:	89 e5                	mov    %esp,%ebp
c0109243:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109246:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010924a:	74 05                	je     c0109251 <__intr_restore+0x11>
        intr_enable();
c010924c:	e8 e7 8d ff ff       	call   c0102038 <intr_enable>
    }
}
c0109251:	c9                   	leave  
c0109252:	c3                   	ret    

c0109253 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0109253:	55                   	push   %ebp
c0109254:	89 e5                	mov    %esp,%ebp
c0109256:	83 ec 08             	sub    $0x8,%esp
    return !test_and_set_bit(0, lock);
c0109259:	8b 45 08             	mov    0x8(%ebp),%eax
c010925c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109260:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0109267:	e8 6a ff ff ff       	call   c01091d6 <test_and_set_bit>
c010926c:	85 c0                	test   %eax,%eax
c010926e:	0f 94 c0             	sete   %al
c0109271:	0f b6 c0             	movzbl %al,%eax
}
c0109274:	c9                   	leave  
c0109275:	c3                   	ret    

c0109276 <lock>:

static inline void
lock(lock_t *lock) {
c0109276:	55                   	push   %ebp
c0109277:	89 e5                	mov    %esp,%ebp
c0109279:	83 ec 18             	sub    $0x18,%esp
    while (!try_lock(lock)) {
c010927c:	eb 05                	jmp    c0109283 <lock+0xd>
        schedule();
c010927e:	e8 61 21 00 00       	call   c010b3e4 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0109283:	8b 45 08             	mov    0x8(%ebp),%eax
c0109286:	89 04 24             	mov    %eax,(%esp)
c0109289:	e8 c5 ff ff ff       	call   c0109253 <try_lock>
c010928e:	85 c0                	test   %eax,%eax
c0109290:	74 ec                	je     c010927e <lock+0x8>
        schedule();
    }
}
c0109292:	c9                   	leave  
c0109293:	c3                   	ret    

c0109294 <unlock>:

static inline void
unlock(lock_t *lock) {
c0109294:	55                   	push   %ebp
c0109295:	89 e5                	mov    %esp,%ebp
c0109297:	83 ec 18             	sub    $0x18,%esp
    if (!test_and_clear_bit(0, lock)) {
c010929a:	8b 45 08             	mov    0x8(%ebp),%eax
c010929d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092a1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01092a8:	e8 49 ff ff ff       	call   c01091f6 <test_and_clear_bit>
c01092ad:	85 c0                	test   %eax,%eax
c01092af:	75 1c                	jne    c01092cd <unlock+0x39>
        panic("Unlock failed.\n");
c01092b1:	c7 44 24 08 5c e5 10 	movl   $0xc010e55c,0x8(%esp)
c01092b8:	c0 
c01092b9:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c01092c0:	00 
c01092c1:	c7 04 24 6c e5 10 c0 	movl   $0xc010e56c,(%esp)
c01092c8:	e8 19 7b ff ff       	call   c0100de6 <__panic>
    }
}
c01092cd:	c9                   	leave  
c01092ce:	c3                   	ret    

c01092cf <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01092cf:	55                   	push   %ebp
c01092d0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01092d2:	8b 55 08             	mov    0x8(%ebp),%edx
c01092d5:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01092da:	29 c2                	sub    %eax,%edx
c01092dc:	89 d0                	mov    %edx,%eax
c01092de:	c1 f8 05             	sar    $0x5,%eax
}
c01092e1:	5d                   	pop    %ebp
c01092e2:	c3                   	ret    

c01092e3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01092e3:	55                   	push   %ebp
c01092e4:	89 e5                	mov    %esp,%ebp
c01092e6:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01092e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ec:	89 04 24             	mov    %eax,(%esp)
c01092ef:	e8 db ff ff ff       	call   c01092cf <page2ppn>
c01092f4:	c1 e0 0c             	shl    $0xc,%eax
}
c01092f7:	c9                   	leave  
c01092f8:	c3                   	ret    

c01092f9 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01092f9:	55                   	push   %ebp
c01092fa:	89 e5                	mov    %esp,%ebp
c01092fc:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01092ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109302:	c1 e8 0c             	shr    $0xc,%eax
c0109305:	89 c2                	mov    %eax,%edx
c0109307:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010930c:	39 c2                	cmp    %eax,%edx
c010930e:	72 1c                	jb     c010932c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0109310:	c7 44 24 08 80 e5 10 	movl   $0xc010e580,0x8(%esp)
c0109317:	c0 
c0109318:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010931f:	00 
c0109320:	c7 04 24 9f e5 10 c0 	movl   $0xc010e59f,(%esp)
c0109327:	e8 ba 7a ff ff       	call   c0100de6 <__panic>
    }
    return &pages[PPN(pa)];
c010932c:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0109331:	8b 55 08             	mov    0x8(%ebp),%edx
c0109334:	c1 ea 0c             	shr    $0xc,%edx
c0109337:	c1 e2 05             	shl    $0x5,%edx
c010933a:	01 d0                	add    %edx,%eax
}
c010933c:	c9                   	leave  
c010933d:	c3                   	ret    

c010933e <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010933e:	55                   	push   %ebp
c010933f:	89 e5                	mov    %esp,%ebp
c0109341:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109344:	8b 45 08             	mov    0x8(%ebp),%eax
c0109347:	89 04 24             	mov    %eax,(%esp)
c010934a:	e8 94 ff ff ff       	call   c01092e3 <page2pa>
c010934f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109352:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109355:	c1 e8 0c             	shr    $0xc,%eax
c0109358:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010935b:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0109360:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109363:	72 23                	jb     c0109388 <page2kva+0x4a>
c0109365:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109368:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010936c:	c7 44 24 08 b0 e5 10 	movl   $0xc010e5b0,0x8(%esp)
c0109373:	c0 
c0109374:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010937b:	00 
c010937c:	c7 04 24 9f e5 10 c0 	movl   $0xc010e59f,(%esp)
c0109383:	e8 5e 7a ff ff       	call   c0100de6 <__panic>
c0109388:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010938b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109390:	c9                   	leave  
c0109391:	c3                   	ret    

c0109392 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109392:	55                   	push   %ebp
c0109393:	89 e5                	mov    %esp,%ebp
c0109395:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0109398:	8b 45 08             	mov    0x8(%ebp),%eax
c010939b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010939e:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01093a5:	77 23                	ja     c01093ca <kva2page+0x38>
c01093a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093aa:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01093ae:	c7 44 24 08 d4 e5 10 	movl   $0xc010e5d4,0x8(%esp)
c01093b5:	c0 
c01093b6:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01093bd:	00 
c01093be:	c7 04 24 9f e5 10 c0 	movl   $0xc010e59f,(%esp)
c01093c5:	e8 1c 7a ff ff       	call   c0100de6 <__panic>
c01093ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093cd:	05 00 00 00 40       	add    $0x40000000,%eax
c01093d2:	89 04 24             	mov    %eax,(%esp)
c01093d5:	e8 1f ff ff ff       	call   c01092f9 <pa2page>
}
c01093da:	c9                   	leave  
c01093db:	c3                   	ret    

c01093dc <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c01093dc:	55                   	push   %ebp
c01093dd:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c01093df:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e2:	8b 40 18             	mov    0x18(%eax),%eax
c01093e5:	8d 50 01             	lea    0x1(%eax),%edx
c01093e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01093eb:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c01093ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01093f1:	8b 40 18             	mov    0x18(%eax),%eax
}
c01093f4:	5d                   	pop    %ebp
c01093f5:	c3                   	ret    

c01093f6 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c01093f6:	55                   	push   %ebp
c01093f7:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c01093f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01093fc:	8b 40 18             	mov    0x18(%eax),%eax
c01093ff:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109402:	8b 45 08             	mov    0x8(%ebp),%eax
c0109405:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109408:	8b 45 08             	mov    0x8(%ebp),%eax
c010940b:	8b 40 18             	mov    0x18(%eax),%eax
}
c010940e:	5d                   	pop    %ebp
c010940f:	c3                   	ret    

c0109410 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0109410:	55                   	push   %ebp
c0109411:	89 e5                	mov    %esp,%ebp
c0109413:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109416:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010941a:	74 0e                	je     c010942a <lock_mm+0x1a>
        lock(&(mm->mm_lock));
c010941c:	8b 45 08             	mov    0x8(%ebp),%eax
c010941f:	83 c0 1c             	add    $0x1c,%eax
c0109422:	89 04 24             	mov    %eax,(%esp)
c0109425:	e8 4c fe ff ff       	call   c0109276 <lock>
    }
}
c010942a:	c9                   	leave  
c010942b:	c3                   	ret    

c010942c <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010942c:	55                   	push   %ebp
c010942d:	89 e5                	mov    %esp,%ebp
c010942f:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109432:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109436:	74 0e                	je     c0109446 <unlock_mm+0x1a>
        unlock(&(mm->mm_lock));
c0109438:	8b 45 08             	mov    0x8(%ebp),%eax
c010943b:	83 c0 1c             	add    $0x1c,%eax
c010943e:	89 04 24             	mov    %eax,(%esp)
c0109441:	e8 4e fe ff ff       	call   c0109294 <unlock>
    }
}
c0109446:	c9                   	leave  
c0109447:	c3                   	ret    

c0109448 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0109448:	55                   	push   %ebp
c0109449:	89 e5                	mov    %esp,%ebp
c010944b:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010944e:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c0109455:	e8 2d b8 ff ff       	call   c0104c87 <kmalloc>
c010945a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010945d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109461:	0f 84 4e 01 00 00    	je     c01095b5 <alloc_proc+0x16d>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c0109467:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010946a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c0109470:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109473:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010947a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010947d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0109484:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109487:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010948e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109491:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0109498:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010949b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c01094a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094a5:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c01094ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094af:	83 c0 1c             	add    $0x1c,%eax
c01094b2:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c01094b9:	00 
c01094ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01094c1:	00 
c01094c2:	89 04 24             	mov    %eax,(%esp)
c01094c5:	e8 b2 2f 00 00       	call   c010c47c <memset>
        proc->tf = NULL;
c01094ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094cd:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c01094d4:	8b 15 8c 1e 1b c0    	mov    0xc01b1e8c,%edx
c01094da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094dd:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c01094e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094e3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c01094ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094ed:	83 c0 48             	add    $0x48,%eax
c01094f0:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01094f7:	00 
c01094f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01094ff:	00 
c0109500:	89 04 24             	mov    %eax,(%esp)
c0109503:	e8 74 2f 00 00       	call   c010c47c <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
		proc->wait_state = 0;
c0109508:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010950b:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = proc->yptr = proc->optr = NULL;
c0109512:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109515:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
c010951c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010951f:	8b 50 78             	mov    0x78(%eax),%edx
c0109522:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109525:	89 50 74             	mov    %edx,0x74(%eax)
c0109528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010952b:	8b 50 74             	mov    0x74(%eax),%edx
c010952e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109531:	89 50 70             	mov    %edx,0x70(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->rq = NULL;
c0109534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109537:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
        proc->run_link.prev = proc->run_link.next = NULL;
c010953e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109541:	c7 80 84 00 00 00 00 	movl   $0x0,0x84(%eax)
c0109548:	00 00 00 
c010954b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010954e:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
c0109554:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109557:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
        proc->time_slice = 0;
c010955d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109560:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c0109567:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010956a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010956d:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
c0109574:	00 00 00 
c0109577:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010957a:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c0109580:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109583:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
c0109589:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010958c:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0109592:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109595:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
        proc->lab6_stride = 0;
c010959b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010959e:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c01095a5:	00 00 00 
        proc->lab6_priority = 0;
c01095a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095ab:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c01095b2:	00 00 00 
    }
    return proc;
c01095b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01095b8:	c9                   	leave  
c01095b9:	c3                   	ret    

c01095ba <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c01095ba:	55                   	push   %ebp
c01095bb:	89 e5                	mov    %esp,%ebp
c01095bd:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c01095c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c3:	83 c0 48             	add    $0x48,%eax
c01095c6:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01095cd:	00 
c01095ce:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01095d5:	00 
c01095d6:	89 04 24             	mov    %eax,(%esp)
c01095d9:	e8 9e 2e 00 00       	call   c010c47c <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c01095de:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e1:	8d 50 48             	lea    0x48(%eax),%edx
c01095e4:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01095eb:	00 
c01095ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095f3:	89 14 24             	mov    %edx,(%esp)
c01095f6:	e8 63 2f 00 00       	call   c010c55e <memcpy>
}
c01095fb:	c9                   	leave  
c01095fc:	c3                   	ret    

c01095fd <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c01095fd:	55                   	push   %ebp
c01095fe:	89 e5                	mov    %esp,%ebp
c0109600:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c0109603:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010960a:	00 
c010960b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109612:	00 
c0109613:	c7 04 24 44 1e 1b c0 	movl   $0xc01b1e44,(%esp)
c010961a:	e8 5d 2e 00 00       	call   c010c47c <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010961f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109622:	83 c0 48             	add    $0x48,%eax
c0109625:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c010962c:	00 
c010962d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109631:	c7 04 24 44 1e 1b c0 	movl   $0xc01b1e44,(%esp)
c0109638:	e8 21 2f 00 00       	call   c010c55e <memcpy>
}
c010963d:	c9                   	leave  
c010963e:	c3                   	ret    

c010963f <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010963f:	55                   	push   %ebp
c0109640:	89 e5                	mov    %esp,%ebp
c0109642:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0109645:	8b 45 08             	mov    0x8(%ebp),%eax
c0109648:	83 c0 58             	add    $0x58,%eax
c010964b:	c7 45 fc 70 1f 1b c0 	movl   $0xc01b1f70,-0x4(%ebp)
c0109652:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0109655:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109658:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010965b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010965e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109661:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109664:	8b 40 04             	mov    0x4(%eax),%eax
c0109667:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010966a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010966d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109670:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109673:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109676:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109679:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010967c:	89 10                	mov    %edx,(%eax)
c010967e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109681:	8b 10                	mov    (%eax),%edx
c0109683:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109686:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109689:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010968c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010968f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109692:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109695:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109698:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010969a:	8b 45 08             	mov    0x8(%ebp),%eax
c010969d:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c01096a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a7:	8b 40 14             	mov    0x14(%eax),%eax
c01096aa:	8b 50 70             	mov    0x70(%eax),%edx
c01096ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01096b0:	89 50 78             	mov    %edx,0x78(%eax)
c01096b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096b6:	8b 40 78             	mov    0x78(%eax),%eax
c01096b9:	85 c0                	test   %eax,%eax
c01096bb:	74 0c                	je     c01096c9 <set_links+0x8a>
        proc->optr->yptr = proc;
c01096bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c0:	8b 40 78             	mov    0x78(%eax),%eax
c01096c3:	8b 55 08             	mov    0x8(%ebp),%edx
c01096c6:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c01096c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01096cc:	8b 40 14             	mov    0x14(%eax),%eax
c01096cf:	8b 55 08             	mov    0x8(%ebp),%edx
c01096d2:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c01096d5:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c01096da:	83 c0 01             	add    $0x1,%eax
c01096dd:	a3 40 1e 1b c0       	mov    %eax,0xc01b1e40
}
c01096e2:	c9                   	leave  
c01096e3:	c3                   	ret    

c01096e4 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c01096e4:	55                   	push   %ebp
c01096e5:	89 e5                	mov    %esp,%ebp
c01096e7:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c01096ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ed:	83 c0 58             	add    $0x58,%eax
c01096f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01096f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01096f6:	8b 40 04             	mov    0x4(%eax),%eax
c01096f9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01096fc:	8b 12                	mov    (%edx),%edx
c01096fe:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109701:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109704:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109707:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010970a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010970d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109710:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109713:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c0109715:	8b 45 08             	mov    0x8(%ebp),%eax
c0109718:	8b 40 78             	mov    0x78(%eax),%eax
c010971b:	85 c0                	test   %eax,%eax
c010971d:	74 0f                	je     c010972e <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c010971f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109722:	8b 40 78             	mov    0x78(%eax),%eax
c0109725:	8b 55 08             	mov    0x8(%ebp),%edx
c0109728:	8b 52 74             	mov    0x74(%edx),%edx
c010972b:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c010972e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109731:	8b 40 74             	mov    0x74(%eax),%eax
c0109734:	85 c0                	test   %eax,%eax
c0109736:	74 11                	je     c0109749 <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c0109738:	8b 45 08             	mov    0x8(%ebp),%eax
c010973b:	8b 40 74             	mov    0x74(%eax),%eax
c010973e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109741:	8b 52 78             	mov    0x78(%edx),%edx
c0109744:	89 50 78             	mov    %edx,0x78(%eax)
c0109747:	eb 0f                	jmp    c0109758 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c0109749:	8b 45 08             	mov    0x8(%ebp),%eax
c010974c:	8b 40 14             	mov    0x14(%eax),%eax
c010974f:	8b 55 08             	mov    0x8(%ebp),%edx
c0109752:	8b 52 78             	mov    0x78(%edx),%edx
c0109755:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c0109758:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c010975d:	83 e8 01             	sub    $0x1,%eax
c0109760:	a3 40 1e 1b c0       	mov    %eax,0xc01b1e40
}
c0109765:	c9                   	leave  
c0109766:	c3                   	ret    

c0109767 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0109767:	55                   	push   %ebp
c0109768:	89 e5                	mov    %esp,%ebp
c010976a:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010976d:	c7 45 f8 70 1f 1b c0 	movl   $0xc01b1f70,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0109774:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c0109779:	83 c0 01             	add    $0x1,%eax
c010977c:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c0109781:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c0109786:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010978b:	7e 0c                	jle    c0109799 <get_pid+0x32>
        last_pid = 1;
c010978d:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c0109794:	00 00 00 
        goto inside;
c0109797:	eb 13                	jmp    c01097ac <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109799:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c010979f:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c01097a4:	39 c2                	cmp    %eax,%edx
c01097a6:	0f 8c ac 00 00 00    	jl     c0109858 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c01097ac:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c01097b3:	20 00 00 
    repeat:
        le = list;
c01097b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01097b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c01097bc:	eb 7f                	jmp    c010983d <get_pid+0xd6>
            proc = le2proc(le, list_link);
c01097be:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097c1:	83 e8 58             	sub    $0x58,%eax
c01097c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c01097c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097ca:	8b 50 04             	mov    0x4(%eax),%edx
c01097cd:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01097d2:	39 c2                	cmp    %eax,%edx
c01097d4:	75 3e                	jne    c0109814 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c01097d6:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01097db:	83 c0 01             	add    $0x1,%eax
c01097de:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c01097e3:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c01097e9:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c01097ee:	39 c2                	cmp    %eax,%edx
c01097f0:	7c 4b                	jl     c010983d <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c01097f2:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01097f7:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01097fc:	7e 0a                	jle    c0109808 <get_pid+0xa1>
                        last_pid = 1;
c01097fe:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c0109805:	00 00 00 
                    }
                    next_safe = MAX_PID;
c0109808:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c010980f:	20 00 00 
                    goto repeat;
c0109812:	eb a2                	jmp    c01097b6 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c0109814:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109817:	8b 50 04             	mov    0x4(%eax),%edx
c010981a:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010981f:	39 c2                	cmp    %eax,%edx
c0109821:	7e 1a                	jle    c010983d <get_pid+0xd6>
c0109823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109826:	8b 50 04             	mov    0x4(%eax),%edx
c0109829:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c010982e:	39 c2                	cmp    %eax,%edx
c0109830:	7d 0b                	jge    c010983d <get_pid+0xd6>
                next_safe = proc->pid;
c0109832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109835:	8b 40 04             	mov    0x4(%eax),%eax
c0109838:	a3 84 da 12 c0       	mov    %eax,0xc012da84
c010983d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109840:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109843:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109846:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c0109849:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010984c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010984f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109852:	0f 85 66 ff ff ff    	jne    c01097be <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c0109858:	a1 80 da 12 c0       	mov    0xc012da80,%eax
}
c010985d:	c9                   	leave  
c010985e:	c3                   	ret    

c010985f <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010985f:	55                   	push   %ebp
c0109860:	89 e5                	mov    %esp,%ebp
c0109862:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c0109865:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010986a:	39 45 08             	cmp    %eax,0x8(%ebp)
c010986d:	74 63                	je     c01098d2 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010986f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109874:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109877:	8b 45 08             	mov    0x8(%ebp),%eax
c010987a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010987d:	e8 94 f9 ff ff       	call   c0109216 <__intr_save>
c0109882:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c0109885:	8b 45 08             	mov    0x8(%ebp),%eax
c0109888:	a3 28 fe 1a c0       	mov    %eax,0xc01afe28
            load_esp0(next->kstack + KSTACKSIZE);
c010988d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109890:	8b 40 0c             	mov    0xc(%eax),%eax
c0109893:	05 00 20 00 00       	add    $0x2000,%eax
c0109898:	89 04 24             	mov    %eax,(%esp)
c010989b:	e8 0e b7 ff ff       	call   c0104fae <load_esp0>
            lcr3(next->cr3);
c01098a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098a3:	8b 40 40             	mov    0x40(%eax),%eax
c01098a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01098a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01098ac:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c01098af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098b2:	8d 50 1c             	lea    0x1c(%eax),%edx
c01098b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098b8:	83 c0 1c             	add    $0x1c,%eax
c01098bb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01098bf:	89 04 24             	mov    %eax,(%esp)
c01098c2:	e8 93 15 00 00       	call   c010ae5a <switch_to>
        }
        local_intr_restore(intr_flag);
c01098c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098ca:	89 04 24             	mov    %eax,(%esp)
c01098cd:	e8 6e f9 ff ff       	call   c0109240 <__intr_restore>
    }
}
c01098d2:	c9                   	leave  
c01098d3:	c3                   	ret    

c01098d4 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c01098d4:	55                   	push   %ebp
c01098d5:	89 e5                	mov    %esp,%ebp
c01098d7:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c01098da:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01098df:	8b 40 3c             	mov    0x3c(%eax),%eax
c01098e2:	89 04 24             	mov    %eax,(%esp)
c01098e5:	e8 8e 91 ff ff       	call   c0102a78 <forkrets>
}
c01098ea:	c9                   	leave  
c01098eb:	c3                   	ret    

c01098ec <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01098ec:	55                   	push   %ebp
c01098ed:	89 e5                	mov    %esp,%ebp
c01098ef:	53                   	push   %ebx
c01098f0:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01098f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f6:	8d 58 60             	lea    0x60(%eax),%ebx
c01098f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098fc:	8b 40 04             	mov    0x4(%eax),%eax
c01098ff:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0109906:	00 
c0109907:	89 04 24             	mov    %eax,(%esp)
c010990a:	e8 c0 20 00 00       	call   c010b9cf <hash32>
c010990f:	c1 e0 03             	shl    $0x3,%eax
c0109912:	05 40 fe 1a c0       	add    $0xc01afe40,%eax
c0109917:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010991a:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010991d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109920:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109923:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109926:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109929:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010992c:	8b 40 04             	mov    0x4(%eax),%eax
c010992f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109932:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109935:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109938:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010993b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010993e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109941:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109944:	89 10                	mov    %edx,(%eax)
c0109946:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109949:	8b 10                	mov    (%eax),%edx
c010994b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010994e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109951:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109954:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109957:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010995a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010995d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109960:	89 10                	mov    %edx,(%eax)
}
c0109962:	83 c4 34             	add    $0x34,%esp
c0109965:	5b                   	pop    %ebx
c0109966:	5d                   	pop    %ebp
c0109967:	c3                   	ret    

c0109968 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c0109968:	55                   	push   %ebp
c0109969:	89 e5                	mov    %esp,%ebp
c010996b:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010996e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109971:	83 c0 60             	add    $0x60,%eax
c0109974:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109977:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010997a:	8b 40 04             	mov    0x4(%eax),%eax
c010997d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109980:	8b 12                	mov    (%edx),%edx
c0109982:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109985:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109988:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010998b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010998e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109991:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109994:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109997:	89 10                	mov    %edx,(%eax)
}
c0109999:	c9                   	leave  
c010999a:	c3                   	ret    

c010999b <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010999b:	55                   	push   %ebp
c010999c:	89 e5                	mov    %esp,%ebp
c010999e:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c01099a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099a5:	7e 5f                	jle    c0109a06 <find_proc+0x6b>
c01099a7:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c01099ae:	7f 56                	jg     c0109a06 <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c01099b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01099ba:	00 
c01099bb:	89 04 24             	mov    %eax,(%esp)
c01099be:	e8 0c 20 00 00       	call   c010b9cf <hash32>
c01099c3:	c1 e0 03             	shl    $0x3,%eax
c01099c6:	05 40 fe 1a c0       	add    $0xc01afe40,%eax
c01099cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01099ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01099d4:	eb 19                	jmp    c01099ef <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c01099d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099d9:	83 e8 60             	sub    $0x60,%eax
c01099dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c01099df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099e2:	8b 40 04             	mov    0x4(%eax),%eax
c01099e5:	3b 45 08             	cmp    0x8(%ebp),%eax
c01099e8:	75 05                	jne    c01099ef <find_proc+0x54>
                return proc;
c01099ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099ed:	eb 1c                	jmp    c0109a0b <find_proc+0x70>
c01099ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01099f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01099f8:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c01099fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a01:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109a04:	75 d0                	jne    c01099d6 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c0109a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a0b:	c9                   	leave  
c0109a0c:	c3                   	ret    

c0109a0d <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c0109a0d:	55                   	push   %ebp
c0109a0e:	89 e5                	mov    %esp,%ebp
c0109a10:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c0109a13:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c0109a1a:	00 
c0109a1b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109a22:	00 
c0109a23:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109a26:	89 04 24             	mov    %eax,(%esp)
c0109a29:	e8 4e 2a 00 00       	call   c010c47c <memset>
    tf.tf_cs = KERNEL_CS;
c0109a2e:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c0109a34:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109a3a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109a3e:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c0109a42:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c0109a46:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a4d:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0109a50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a53:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109a56:	b8 cd 91 10 c0       	mov    $0xc01091cd,%eax
c0109a5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109a5e:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a61:	80 cc 01             	or     $0x1,%ah
c0109a64:	89 c2                	mov    %eax,%edx
c0109a66:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109a69:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a6d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109a74:	00 
c0109a75:	89 14 24             	mov    %edx,(%esp)
c0109a78:	e8 25 03 00 00       	call   c0109da2 <do_fork>
}
c0109a7d:	c9                   	leave  
c0109a7e:	c3                   	ret    

c0109a7f <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109a7f:	55                   	push   %ebp
c0109a80:	89 e5                	mov    %esp,%ebp
c0109a82:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c0109a85:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0109a8c:	e8 6b b6 ff ff       	call   c01050fc <alloc_pages>
c0109a91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0109a94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a98:	74 1a                	je     c0109ab4 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c0109a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a9d:	89 04 24             	mov    %eax,(%esp)
c0109aa0:	e8 99 f8 ff ff       	call   c010933e <page2kva>
c0109aa5:	89 c2                	mov    %eax,%edx
c0109aa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aaa:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109aad:	b8 00 00 00 00       	mov    $0x0,%eax
c0109ab2:	eb 05                	jmp    c0109ab9 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c0109ab4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109ab9:	c9                   	leave  
c0109aba:	c3                   	ret    

c0109abb <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109abb:	55                   	push   %ebp
c0109abc:	89 e5                	mov    %esp,%ebp
c0109abe:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0109ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac4:	8b 40 0c             	mov    0xc(%eax),%eax
c0109ac7:	89 04 24             	mov    %eax,(%esp)
c0109aca:	e8 c3 f8 ff ff       	call   c0109392 <kva2page>
c0109acf:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0109ad6:	00 
c0109ad7:	89 04 24             	mov    %eax,(%esp)
c0109ada:	e8 88 b6 ff ff       	call   c0105167 <free_pages>
}
c0109adf:	c9                   	leave  
c0109ae0:	c3                   	ret    

c0109ae1 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c0109ae1:	55                   	push   %ebp
c0109ae2:	89 e5                	mov    %esp,%ebp
c0109ae4:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c0109ae7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109aee:	e8 09 b6 ff ff       	call   c01050fc <alloc_pages>
c0109af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109af6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109afa:	75 0a                	jne    c0109b06 <setup_pgdir+0x25>
        return -E_NO_MEM;
c0109afc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109b01:	e9 80 00 00 00       	jmp    c0109b86 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c0109b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b09:	89 04 24             	mov    %eax,(%esp)
c0109b0c:	e8 2d f8 ff ff       	call   c010933e <page2kva>
c0109b11:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c0109b14:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0109b19:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0109b20:	00 
c0109b21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b28:	89 04 24             	mov    %eax,(%esp)
c0109b2b:	e8 2e 2a 00 00       	call   c010c55e <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109b30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b33:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109b39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109b3f:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c0109b46:	77 23                	ja     c0109b6b <setup_pgdir+0x8a>
c0109b48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109b4f:	c7 44 24 08 d4 e5 10 	movl   $0xc010e5d4,0x8(%esp)
c0109b56:	c0 
c0109b57:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0109b5e:	00 
c0109b5f:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c0109b66:	e8 7b 72 ff ff       	call   c0100de6 <__panic>
c0109b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b6e:	05 00 00 00 40       	add    $0x40000000,%eax
c0109b73:	83 c8 03             	or     $0x3,%eax
c0109b76:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109b78:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b7e:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0109b81:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b86:	c9                   	leave  
c0109b87:	c3                   	ret    

c0109b88 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109b88:	55                   	push   %ebp
c0109b89:	89 e5                	mov    %esp,%ebp
c0109b8b:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c0109b8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b91:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b94:	89 04 24             	mov    %eax,(%esp)
c0109b97:	e8 f6 f7 ff ff       	call   c0109392 <kva2page>
c0109b9c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109ba3:	00 
c0109ba4:	89 04 24             	mov    %eax,(%esp)
c0109ba7:	e8 bb b5 ff ff       	call   c0105167 <free_pages>
}
c0109bac:	c9                   	leave  
c0109bad:	c3                   	ret    

c0109bae <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0109bae:	55                   	push   %ebp
c0109baf:	89 e5                	mov    %esp,%ebp
c0109bb1:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109bb4:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109bb9:	8b 40 18             	mov    0x18(%eax),%eax
c0109bbc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0109bbf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109bc3:	75 0a                	jne    c0109bcf <copy_mm+0x21>
        return 0;
c0109bc5:	b8 00 00 00 00       	mov    $0x0,%eax
c0109bca:	e9 f9 00 00 00       	jmp    c0109cc8 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c0109bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd2:	25 00 01 00 00       	and    $0x100,%eax
c0109bd7:	85 c0                	test   %eax,%eax
c0109bd9:	74 08                	je     c0109be3 <copy_mm+0x35>
        mm = oldmm;
c0109bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109bde:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c0109be1:	eb 78                	jmp    c0109c5b <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c0109be3:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109bea:	e8 88 e2 ff ff       	call   c0107e77 <mm_create>
c0109bef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bf2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109bf6:	75 05                	jne    c0109bfd <copy_mm+0x4f>
        goto bad_mm;
c0109bf8:	e9 c8 00 00 00       	jmp    c0109cc5 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c0109bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c00:	89 04 24             	mov    %eax,(%esp)
c0109c03:	e8 d9 fe ff ff       	call   c0109ae1 <setup_pgdir>
c0109c08:	85 c0                	test   %eax,%eax
c0109c0a:	74 05                	je     c0109c11 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c0109c0c:	e9 a9 00 00 00       	jmp    c0109cba <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c0109c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c14:	89 04 24             	mov    %eax,(%esp)
c0109c17:	e8 f4 f7 ff ff       	call   c0109410 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c0109c1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c26:	89 04 24             	mov    %eax,(%esp)
c0109c29:	e8 60 e7 ff ff       	call   c010838e <dup_mmap>
c0109c2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109c31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c34:	89 04 24             	mov    %eax,(%esp)
c0109c37:	e8 f0 f7 ff ff       	call   c010942c <unlock_mm>

    if (ret != 0) {
c0109c3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109c40:	74 19                	je     c0109c5b <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c0109c42:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c46:	89 04 24             	mov    %eax,(%esp)
c0109c49:	e8 41 e8 ff ff       	call   c010848f <exit_mmap>
    put_pgdir(mm);
c0109c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c51:	89 04 24             	mov    %eax,(%esp)
c0109c54:	e8 2f ff ff ff       	call   c0109b88 <put_pgdir>
c0109c59:	eb 5f                	jmp    c0109cba <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c5e:	89 04 24             	mov    %eax,(%esp)
c0109c61:	e8 76 f7 ff ff       	call   c01093dc <mm_count_inc>
    proc->mm = mm;
c0109c66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c69:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c6c:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c72:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c75:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109c78:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109c7f:	77 23                	ja     c0109ca4 <copy_mm+0xf6>
c0109c81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c84:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109c88:	c7 44 24 08 d4 e5 10 	movl   $0xc010e5d4,0x8(%esp)
c0109c8f:	c0 
c0109c90:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c0109c97:	00 
c0109c98:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c0109c9f:	e8 42 71 ff ff       	call   c0100de6 <__panic>
c0109ca4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ca7:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109cad:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cb0:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109cb3:	b8 00 00 00 00       	mov    $0x0,%eax
c0109cb8:	eb 0e                	jmp    c0109cc8 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cbd:	89 04 24             	mov    %eax,(%esp)
c0109cc0:	e8 0b e5 ff ff       	call   c01081d0 <mm_destroy>
bad_mm:
    return ret;
c0109cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109cc8:	c9                   	leave  
c0109cc9:	c3                   	ret    

c0109cca <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0109cca:	55                   	push   %ebp
c0109ccb:	89 e5                	mov    %esp,%ebp
c0109ccd:	57                   	push   %edi
c0109cce:	56                   	push   %esi
c0109ccf:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0109cd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cd3:	8b 40 0c             	mov    0xc(%eax),%eax
c0109cd6:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109cdb:	89 c2                	mov    %eax,%edx
c0109cdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce0:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c0109ce3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109ce9:	8b 55 10             	mov    0x10(%ebp),%edx
c0109cec:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c0109cf1:	89 c1                	mov    %eax,%ecx
c0109cf3:	83 e1 01             	and    $0x1,%ecx
c0109cf6:	85 c9                	test   %ecx,%ecx
c0109cf8:	74 0e                	je     c0109d08 <copy_thread+0x3e>
c0109cfa:	0f b6 0a             	movzbl (%edx),%ecx
c0109cfd:	88 08                	mov    %cl,(%eax)
c0109cff:	83 c0 01             	add    $0x1,%eax
c0109d02:	83 c2 01             	add    $0x1,%edx
c0109d05:	83 eb 01             	sub    $0x1,%ebx
c0109d08:	89 c1                	mov    %eax,%ecx
c0109d0a:	83 e1 02             	and    $0x2,%ecx
c0109d0d:	85 c9                	test   %ecx,%ecx
c0109d0f:	74 0f                	je     c0109d20 <copy_thread+0x56>
c0109d11:	0f b7 0a             	movzwl (%edx),%ecx
c0109d14:	66 89 08             	mov    %cx,(%eax)
c0109d17:	83 c0 02             	add    $0x2,%eax
c0109d1a:	83 c2 02             	add    $0x2,%edx
c0109d1d:	83 eb 02             	sub    $0x2,%ebx
c0109d20:	89 d9                	mov    %ebx,%ecx
c0109d22:	c1 e9 02             	shr    $0x2,%ecx
c0109d25:	89 c7                	mov    %eax,%edi
c0109d27:	89 d6                	mov    %edx,%esi
c0109d29:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0109d2b:	89 f2                	mov    %esi,%edx
c0109d2d:	89 f8                	mov    %edi,%eax
c0109d2f:	b9 00 00 00 00       	mov    $0x0,%ecx
c0109d34:	89 de                	mov    %ebx,%esi
c0109d36:	83 e6 02             	and    $0x2,%esi
c0109d39:	85 f6                	test   %esi,%esi
c0109d3b:	74 0b                	je     c0109d48 <copy_thread+0x7e>
c0109d3d:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0109d41:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0109d45:	83 c1 02             	add    $0x2,%ecx
c0109d48:	83 e3 01             	and    $0x1,%ebx
c0109d4b:	85 db                	test   %ebx,%ebx
c0109d4d:	74 07                	je     c0109d56 <copy_thread+0x8c>
c0109d4f:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0109d53:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c0109d56:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d59:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109d5c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109d63:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d66:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109d69:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d6c:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109d6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d72:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109d75:	8b 55 08             	mov    0x8(%ebp),%edx
c0109d78:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109d7b:	8b 52 40             	mov    0x40(%edx),%edx
c0109d7e:	80 ce 02             	or     $0x2,%dh
c0109d81:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109d84:	ba d4 98 10 c0       	mov    $0xc01098d4,%edx
c0109d89:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d8c:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d92:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109d95:	89 c2                	mov    %eax,%edx
c0109d97:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d9a:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109d9d:	5b                   	pop    %ebx
c0109d9e:	5e                   	pop    %esi
c0109d9f:	5f                   	pop    %edi
c0109da0:	5d                   	pop    %ebp
c0109da1:	c3                   	ret    

c0109da2 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109da2:	55                   	push   %ebp
c0109da3:	89 e5                	mov    %esp,%ebp
c0109da5:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c0109da8:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0109daf:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c0109db4:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109db9:	7e 05                	jle    c0109dc0 <do_fork+0x1e>
        goto fork_out;
c0109dbb:	e9 ef 00 00 00       	jmp    c0109eaf <do_fork+0x10d>
    }
    ret = -E_NO_MEM;
c0109dc0:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
c0109dc7:	e8 7c f6 ff ff       	call   c0109448 <alloc_proc>
c0109dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109dcf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109dd3:	75 05                	jne    c0109dda <do_fork+0x38>
        goto fork_out;
c0109dd5:	e9 d5 00 00 00       	jmp    c0109eaf <do_fork+0x10d>
    }
    proc->parent = current;
c0109dda:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0109de0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109de3:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c0109de6:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109deb:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109dee:	85 c0                	test   %eax,%eax
c0109df0:	74 24                	je     c0109e16 <do_fork+0x74>
c0109df2:	c7 44 24 0c 0c e6 10 	movl   $0xc010e60c,0xc(%esp)
c0109df9:	c0 
c0109dfa:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c0109e01:	c0 
c0109e02:	c7 44 24 04 b0 01 00 	movl   $0x1b0,0x4(%esp)
c0109e09:	00 
c0109e0a:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c0109e11:	e8 d0 6f ff ff       	call   c0100de6 <__panic>
    if (setup_kstack(proc) != 0) {
c0109e16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e19:	89 04 24             	mov    %eax,(%esp)
c0109e1c:	e8 5e fc ff ff       	call   c0109a7f <setup_kstack>
c0109e21:	85 c0                	test   %eax,%eax
c0109e23:	74 05                	je     c0109e2a <do_fork+0x88>
        goto bad_fork_cleanup_proc;
c0109e25:	e9 8a 00 00 00       	jmp    c0109eb4 <do_fork+0x112>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c0109e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e31:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e34:	89 04 24             	mov    %eax,(%esp)
c0109e37:	e8 72 fd ff ff       	call   c0109bae <copy_mm>
c0109e3c:	85 c0                	test   %eax,%eax
c0109e3e:	74 0e                	je     c0109e4e <do_fork+0xac>
        goto bad_fork_cleanup_kstack;
c0109e40:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e44:	89 04 24             	mov    %eax,(%esp)
c0109e47:	e8 6f fc ff ff       	call   c0109abb <put_kstack>
c0109e4c:	eb 66                	jmp    c0109eb4 <do_fork+0x112>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c0109e4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e5f:	89 04 24             	mov    %eax,(%esp)
c0109e62:	e8 63 fe ff ff       	call   c0109cca <copy_thread>
    bool intr_flag;
    local_intr_save(intr_flag);
c0109e67:	e8 aa f3 ff ff       	call   c0109216 <__intr_save>
c0109e6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c0109e6f:	e8 f3 f8 ff ff       	call   c0109767 <get_pid>
c0109e74:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109e77:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c0109e7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e7d:	89 04 24             	mov    %eax,(%esp)
c0109e80:	e8 67 fa ff ff       	call   c01098ec <hash_proc>
        set_links(proc);
c0109e85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e88:	89 04 24             	mov    %eax,(%esp)
c0109e8b:	e8 af f7 ff ff       	call   c010963f <set_links>
    }
    local_intr_restore(intr_flag);
c0109e90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e93:	89 04 24             	mov    %eax,(%esp)
c0109e96:	e8 a5 f3 ff ff       	call   c0109240 <__intr_restore>
    wakeup_proc(proc);
c0109e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e9e:	89 04 24             	mov    %eax,(%esp)
c0109ea1:	e8 a5 14 00 00       	call   c010b34b <wakeup_proc>
    ret = proc->pid;
c0109ea6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ea9:	8b 40 04             	mov    0x4(%eax),%eax
c0109eac:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	
fork_out:
    return ret;
c0109eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109eb2:	eb 0d                	jmp    c0109ec1 <do_fork+0x11f>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c0109eb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109eb7:	89 04 24             	mov    %eax,(%esp)
c0109eba:	e8 e3 ad ff ff       	call   c0104ca2 <kfree>
    goto fork_out;
c0109ebf:	eb ee                	jmp    c0109eaf <do_fork+0x10d>
}
c0109ec1:	c9                   	leave  
c0109ec2:	c3                   	ret    

c0109ec3 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c0109ec3:	55                   	push   %ebp
c0109ec4:	89 e5                	mov    %esp,%ebp
c0109ec6:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c0109ec9:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0109ecf:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c0109ed4:	39 c2                	cmp    %eax,%edx
c0109ed6:	75 1c                	jne    c0109ef4 <do_exit+0x31>
        panic("idleproc exit.\n");
c0109ed8:	c7 44 24 08 3a e6 10 	movl   $0xc010e63a,0x8(%esp)
c0109edf:	c0 
c0109ee0:	c7 44 24 04 db 01 00 	movl   $0x1db,0x4(%esp)
c0109ee7:	00 
c0109ee8:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c0109eef:	e8 f2 6e ff ff       	call   c0100de6 <__panic>
    }
    if (current == initproc) {
c0109ef4:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0109efa:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c0109eff:	39 c2                	cmp    %eax,%edx
c0109f01:	75 1c                	jne    c0109f1f <do_exit+0x5c>
        panic("initproc exit.\n");
c0109f03:	c7 44 24 08 4a e6 10 	movl   $0xc010e64a,0x8(%esp)
c0109f0a:	c0 
c0109f0b:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
c0109f12:	00 
c0109f13:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c0109f1a:	e8 c7 6e ff ff       	call   c0100de6 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c0109f1f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109f24:	8b 40 18             	mov    0x18(%eax),%eax
c0109f27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c0109f2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f2e:	74 4a                	je     c0109f7a <do_exit+0xb7>
        lcr3(boot_cr3);
c0109f30:	a1 8c 1e 1b c0       	mov    0xc01b1e8c,%eax
c0109f35:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109f38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109f3b:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f41:	89 04 24             	mov    %eax,(%esp)
c0109f44:	e8 ad f4 ff ff       	call   c01093f6 <mm_count_dec>
c0109f49:	85 c0                	test   %eax,%eax
c0109f4b:	75 21                	jne    c0109f6e <do_exit+0xab>
            exit_mmap(mm);
c0109f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f50:	89 04 24             	mov    %eax,(%esp)
c0109f53:	e8 37 e5 ff ff       	call   c010848f <exit_mmap>
            put_pgdir(mm);
c0109f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f5b:	89 04 24             	mov    %eax,(%esp)
c0109f5e:	e8 25 fc ff ff       	call   c0109b88 <put_pgdir>
            mm_destroy(mm);
c0109f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f66:	89 04 24             	mov    %eax,(%esp)
c0109f69:	e8 62 e2 ff ff       	call   c01081d0 <mm_destroy>
        }
        current->mm = NULL;
c0109f6e:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109f73:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c0109f7a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109f7f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c0109f85:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109f8a:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f8d:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c0109f90:	e8 81 f2 ff ff       	call   c0109216 <__intr_save>
c0109f95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c0109f98:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109f9d:	8b 40 14             	mov    0x14(%eax),%eax
c0109fa0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c0109fa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fa6:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109fa9:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109fae:	75 10                	jne    c0109fc0 <do_exit+0xfd>
            wakeup_proc(proc);
c0109fb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fb3:	89 04 24             	mov    %eax,(%esp)
c0109fb6:	e8 90 13 00 00       	call   c010b34b <wakeup_proc>
        }
        while (current->cptr != NULL) {
c0109fbb:	e9 8b 00 00 00       	jmp    c010a04b <do_exit+0x188>
c0109fc0:	e9 86 00 00 00       	jmp    c010a04b <do_exit+0x188>
            proc = current->cptr;
c0109fc5:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109fca:	8b 40 70             	mov    0x70(%eax),%eax
c0109fcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c0109fd0:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109fd5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109fd8:	8b 52 78             	mov    0x78(%edx),%edx
c0109fdb:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c0109fde:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fe1:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c0109fe8:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c0109fed:	8b 50 70             	mov    0x70(%eax),%edx
c0109ff0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ff3:	89 50 78             	mov    %edx,0x78(%eax)
c0109ff6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ff9:	8b 40 78             	mov    0x78(%eax),%eax
c0109ffc:	85 c0                	test   %eax,%eax
c0109ffe:	74 0e                	je     c010a00e <do_exit+0x14b>
                initproc->cptr->yptr = proc;
c010a000:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a005:	8b 40 70             	mov    0x70(%eax),%eax
c010a008:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a00b:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010a00e:	8b 15 24 fe 1a c0    	mov    0xc01afe24,%edx
c010a014:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a017:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010a01a:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a01f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a022:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010a025:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a028:	8b 00                	mov    (%eax),%eax
c010a02a:	83 f8 03             	cmp    $0x3,%eax
c010a02d:	75 1c                	jne    c010a04b <do_exit+0x188>
                if (initproc->wait_state == WT_CHILD) {
c010a02f:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a034:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a037:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a03c:	75 0d                	jne    c010a04b <do_exit+0x188>
                    wakeup_proc(initproc);
c010a03e:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a043:	89 04 24             	mov    %eax,(%esp)
c010a046:	e8 00 13 00 00       	call   c010b34b <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010a04b:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a050:	8b 40 70             	mov    0x70(%eax),%eax
c010a053:	85 c0                	test   %eax,%eax
c010a055:	0f 85 6a ff ff ff    	jne    c0109fc5 <do_exit+0x102>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010a05b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a05e:	89 04 24             	mov    %eax,(%esp)
c010a061:	e8 da f1 ff ff       	call   c0109240 <__intr_restore>
    
    schedule();
c010a066:	e8 79 13 00 00       	call   c010b3e4 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010a06b:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a070:	8b 40 04             	mov    0x4(%eax),%eax
c010a073:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a077:	c7 44 24 08 5c e6 10 	movl   $0xc010e65c,0x8(%esp)
c010a07e:	c0 
c010a07f:	c7 44 24 04 0a 02 00 	movl   $0x20a,0x4(%esp)
c010a086:	00 
c010a087:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a08e:	e8 53 6d ff ff       	call   c0100de6 <__panic>

c010a093 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a093:	55                   	push   %ebp
c010a094:	89 e5                	mov    %esp,%ebp
c010a096:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010a099:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a09e:	8b 40 18             	mov    0x18(%eax),%eax
c010a0a1:	85 c0                	test   %eax,%eax
c010a0a3:	74 1c                	je     c010a0c1 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010a0a5:	c7 44 24 08 7c e6 10 	movl   $0xc010e67c,0x8(%esp)
c010a0ac:	c0 
c010a0ad:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c010a0b4:	00 
c010a0b5:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a0bc:	e8 25 6d ff ff       	call   c0100de6 <__panic>
    }

    int ret = -E_NO_MEM;
c010a0c1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a0c8:	e8 aa dd ff ff       	call   c0107e77 <mm_create>
c010a0cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a0d0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a0d4:	75 06                	jne    c010a0dc <load_icode+0x49>
        goto bad_mm;
c010a0d6:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010a0d7:	e9 ef 05 00 00       	jmp    c010a6cb <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a0dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a0df:	89 04 24             	mov    %eax,(%esp)
c010a0e2:	e8 fa f9 ff ff       	call   c0109ae1 <setup_pgdir>
c010a0e7:	85 c0                	test   %eax,%eax
c010a0e9:	74 05                	je     c010a0f0 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010a0eb:	e9 f6 05 00 00       	jmp    c010a6e6 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a0f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a0f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a0f9:	8b 50 1c             	mov    0x1c(%eax),%edx
c010a0fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0ff:	01 d0                	add    %edx,%eax
c010a101:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a104:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a107:	8b 00                	mov    (%eax),%eax
c010a109:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a10e:	74 0c                	je     c010a11c <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010a110:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a117:	e9 bf 05 00 00       	jmp    c010a6db <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a11c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a11f:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a123:	0f b7 c0             	movzwl %ax,%eax
c010a126:	c1 e0 05             	shl    $0x5,%eax
c010a129:	89 c2                	mov    %eax,%edx
c010a12b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a12e:	01 d0                	add    %edx,%eax
c010a130:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a133:	e9 13 03 00 00       	jmp    c010a44b <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a138:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a13b:	8b 00                	mov    (%eax),%eax
c010a13d:	83 f8 01             	cmp    $0x1,%eax
c010a140:	74 05                	je     c010a147 <load_icode+0xb4>
            continue ;
c010a142:	e9 00 03 00 00       	jmp    c010a447 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a147:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a14a:	8b 50 10             	mov    0x10(%eax),%edx
c010a14d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a150:	8b 40 14             	mov    0x14(%eax),%eax
c010a153:	39 c2                	cmp    %eax,%edx
c010a155:	76 0c                	jbe    c010a163 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010a157:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a15e:	e9 6d 05 00 00       	jmp    c010a6d0 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010a163:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a166:	8b 40 10             	mov    0x10(%eax),%eax
c010a169:	85 c0                	test   %eax,%eax
c010a16b:	75 05                	jne    c010a172 <load_icode+0xdf>
            continue ;
c010a16d:	e9 d5 02 00 00       	jmp    c010a447 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a172:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a179:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a183:	8b 40 18             	mov    0x18(%eax),%eax
c010a186:	83 e0 01             	and    $0x1,%eax
c010a189:	85 c0                	test   %eax,%eax
c010a18b:	74 04                	je     c010a191 <load_icode+0xfe>
c010a18d:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a191:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a194:	8b 40 18             	mov    0x18(%eax),%eax
c010a197:	83 e0 02             	and    $0x2,%eax
c010a19a:	85 c0                	test   %eax,%eax
c010a19c:	74 04                	je     c010a1a2 <load_icode+0x10f>
c010a19e:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a1a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1a5:	8b 40 18             	mov    0x18(%eax),%eax
c010a1a8:	83 e0 04             	and    $0x4,%eax
c010a1ab:	85 c0                	test   %eax,%eax
c010a1ad:	74 04                	je     c010a1b3 <load_icode+0x120>
c010a1af:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a1b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a1b6:	83 e0 02             	and    $0x2,%eax
c010a1b9:	85 c0                	test   %eax,%eax
c010a1bb:	74 04                	je     c010a1c1 <load_icode+0x12e>
c010a1bd:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a1c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1c4:	8b 50 14             	mov    0x14(%eax),%edx
c010a1c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1ca:	8b 40 08             	mov    0x8(%eax),%eax
c010a1cd:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a1d4:	00 
c010a1d5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a1d8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a1dc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a1e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a1e7:	89 04 24             	mov    %eax,(%esp)
c010a1ea:	e8 83 e0 ff ff       	call   c0108272 <mm_map>
c010a1ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1f6:	74 05                	je     c010a1fd <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010a1f8:	e9 d3 04 00 00       	jmp    c010a6d0 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010a1fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a200:	8b 50 04             	mov    0x4(%eax),%edx
c010a203:	8b 45 08             	mov    0x8(%ebp),%eax
c010a206:	01 d0                	add    %edx,%eax
c010a208:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a20b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a20e:	8b 40 08             	mov    0x8(%eax),%eax
c010a211:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a214:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a217:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a21a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a21d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a222:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a225:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a22c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a22f:	8b 50 08             	mov    0x8(%eax),%edx
c010a232:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a235:	8b 40 10             	mov    0x10(%eax),%eax
c010a238:	01 d0                	add    %edx,%eax
c010a23a:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a23d:	e9 90 00 00 00       	jmp    c010a2d2 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a242:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a245:	8b 40 0c             	mov    0xc(%eax),%eax
c010a248:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a24b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a24f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a252:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a256:	89 04 24             	mov    %eax,(%esp)
c010a259:	e8 6f bd ff ff       	call   c0105fcd <pgdir_alloc_page>
c010a25e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a261:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a265:	75 05                	jne    c010a26c <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010a267:	e9 64 04 00 00       	jmp    c010a6d0 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a26c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a26f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a272:	29 c2                	sub    %eax,%edx
c010a274:	89 d0                	mov    %edx,%eax
c010a276:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a279:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a27e:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a281:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a284:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a28b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a28e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a291:	73 0d                	jae    c010a2a0 <load_icode+0x20d>
                size -= la - end;
c010a293:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a296:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a299:	29 c2                	sub    %eax,%edx
c010a29b:	89 d0                	mov    %edx,%eax
c010a29d:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010a2a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2a3:	89 04 24             	mov    %eax,(%esp)
c010a2a6:	e8 93 f0 ff ff       	call   c010933e <page2kva>
c010a2ab:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a2ae:	01 c2                	add    %eax,%edx
c010a2b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a2b3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a2b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a2ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2be:	89 14 24             	mov    %edx,(%esp)
c010a2c1:	e8 98 22 00 00       	call   c010c55e <memcpy>
            start += size, from += size;
c010a2c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a2c9:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a2cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a2cf:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a2d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2d5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a2d8:	0f 82 64 ff ff ff    	jb     c010a242 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010a2de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2e1:	8b 50 08             	mov    0x8(%eax),%edx
c010a2e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2e7:	8b 40 14             	mov    0x14(%eax),%eax
c010a2ea:	01 d0                	add    %edx,%eax
c010a2ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010a2ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2f2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a2f5:	0f 83 b0 00 00 00    	jae    c010a3ab <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010a2fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2fe:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a301:	75 05                	jne    c010a308 <load_icode+0x275>
                continue ;
c010a303:	e9 3f 01 00 00       	jmp    c010a447 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010a308:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a30b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a30e:	29 c2                	sub    %eax,%edx
c010a310:	89 d0                	mov    %edx,%eax
c010a312:	05 00 10 00 00       	add    $0x1000,%eax
c010a317:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a31a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a31f:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a322:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010a325:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a328:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a32b:	73 0d                	jae    c010a33a <load_icode+0x2a7>
                size -= la - end;
c010a32d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a330:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a333:	29 c2                	sub    %eax,%edx
c010a335:	89 d0                	mov    %edx,%eax
c010a337:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a33a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a33d:	89 04 24             	mov    %eax,(%esp)
c010a340:	e8 f9 ef ff ff       	call   c010933e <page2kva>
c010a345:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a348:	01 c2                	add    %eax,%edx
c010a34a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a34d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a351:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a358:	00 
c010a359:	89 14 24             	mov    %edx,(%esp)
c010a35c:	e8 1b 21 00 00       	call   c010c47c <memset>
            start += size;
c010a361:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a364:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010a367:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a36a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a36d:	73 08                	jae    c010a377 <load_icode+0x2e4>
c010a36f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a372:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a375:	74 34                	je     c010a3ab <load_icode+0x318>
c010a377:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a37a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a37d:	72 08                	jb     c010a387 <load_icode+0x2f4>
c010a37f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a382:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a385:	74 24                	je     c010a3ab <load_icode+0x318>
c010a387:	c7 44 24 0c a4 e6 10 	movl   $0xc010e6a4,0xc(%esp)
c010a38e:	c0 
c010a38f:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010a396:	c0 
c010a397:	c7 44 24 04 66 02 00 	movl   $0x266,0x4(%esp)
c010a39e:	00 
c010a39f:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a3a6:	e8 3b 6a ff ff       	call   c0100de6 <__panic>
        }
        while (start < end) {
c010a3ab:	e9 8b 00 00 00       	jmp    c010a43b <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a3b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a3b3:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a3b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a3bd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a3c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a3c4:	89 04 24             	mov    %eax,(%esp)
c010a3c7:	e8 01 bc ff ff       	call   c0105fcd <pgdir_alloc_page>
c010a3cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a3cf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a3d3:	75 05                	jne    c010a3da <load_icode+0x347>
                goto bad_cleanup_mmap;
c010a3d5:	e9 f6 02 00 00       	jmp    c010a6d0 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a3da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a3dd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a3e0:	29 c2                	sub    %eax,%edx
c010a3e2:	89 d0                	mov    %edx,%eax
c010a3e4:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a3e7:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a3ec:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a3ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a3f2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a3f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a3fc:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a3ff:	73 0d                	jae    c010a40e <load_icode+0x37b>
                size -= la - end;
c010a401:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a404:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a407:	29 c2                	sub    %eax,%edx
c010a409:	89 d0                	mov    %edx,%eax
c010a40b:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a40e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a411:	89 04 24             	mov    %eax,(%esp)
c010a414:	e8 25 ef ff ff       	call   c010933e <page2kva>
c010a419:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a41c:	01 c2                	add    %eax,%edx
c010a41e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a421:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a425:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a42c:	00 
c010a42d:	89 14 24             	mov    %edx,(%esp)
c010a430:	e8 47 20 00 00       	call   c010c47c <memset>
            start += size;
c010a435:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a438:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010a43b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a43e:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a441:	0f 82 69 ff ff ff    	jb     c010a3b0 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010a447:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010a44b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a44e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010a451:	0f 82 e1 fc ff ff    	jb     c010a138 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010a457:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010a45e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a465:	00 
c010a466:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a469:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a46d:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010a474:	00 
c010a475:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010a47c:	af 
c010a47d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a480:	89 04 24             	mov    %eax,(%esp)
c010a483:	e8 ea dd ff ff       	call   c0108272 <mm_map>
c010a488:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a48b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a48f:	74 05                	je     c010a496 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010a491:	e9 3a 02 00 00       	jmp    c010a6d0 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010a496:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a499:	8b 40 0c             	mov    0xc(%eax),%eax
c010a49c:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a4a3:	00 
c010a4a4:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010a4ab:	af 
c010a4ac:	89 04 24             	mov    %eax,(%esp)
c010a4af:	e8 19 bb ff ff       	call   c0105fcd <pgdir_alloc_page>
c010a4b4:	85 c0                	test   %eax,%eax
c010a4b6:	75 24                	jne    c010a4dc <load_icode+0x449>
c010a4b8:	c7 44 24 0c e0 e6 10 	movl   $0xc010e6e0,0xc(%esp)
c010a4bf:	c0 
c010a4c0:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010a4c7:	c0 
c010a4c8:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c010a4cf:	00 
c010a4d0:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a4d7:	e8 0a 69 ff ff       	call   c0100de6 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010a4dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a4df:	8b 40 0c             	mov    0xc(%eax),%eax
c010a4e2:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a4e9:	00 
c010a4ea:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010a4f1:	af 
c010a4f2:	89 04 24             	mov    %eax,(%esp)
c010a4f5:	e8 d3 ba ff ff       	call   c0105fcd <pgdir_alloc_page>
c010a4fa:	85 c0                	test   %eax,%eax
c010a4fc:	75 24                	jne    c010a522 <load_icode+0x48f>
c010a4fe:	c7 44 24 0c 24 e7 10 	movl   $0xc010e724,0xc(%esp)
c010a505:	c0 
c010a506:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010a50d:	c0 
c010a50e:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c010a515:	00 
c010a516:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a51d:	e8 c4 68 ff ff       	call   c0100de6 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010a522:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a525:	8b 40 0c             	mov    0xc(%eax),%eax
c010a528:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a52f:	00 
c010a530:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010a537:	af 
c010a538:	89 04 24             	mov    %eax,(%esp)
c010a53b:	e8 8d ba ff ff       	call   c0105fcd <pgdir_alloc_page>
c010a540:	85 c0                	test   %eax,%eax
c010a542:	75 24                	jne    c010a568 <load_icode+0x4d5>
c010a544:	c7 44 24 0c 68 e7 10 	movl   $0xc010e768,0xc(%esp)
c010a54b:	c0 
c010a54c:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010a553:	c0 
c010a554:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
c010a55b:	00 
c010a55c:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a563:	e8 7e 68 ff ff       	call   c0100de6 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010a568:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a56b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a56e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a575:	00 
c010a576:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010a57d:	af 
c010a57e:	89 04 24             	mov    %eax,(%esp)
c010a581:	e8 47 ba ff ff       	call   c0105fcd <pgdir_alloc_page>
c010a586:	85 c0                	test   %eax,%eax
c010a588:	75 24                	jne    c010a5ae <load_icode+0x51b>
c010a58a:	c7 44 24 0c ac e7 10 	movl   $0xc010e7ac,0xc(%esp)
c010a591:	c0 
c010a592:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010a599:	c0 
c010a59a:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
c010a5a1:	00 
c010a5a2:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a5a9:	e8 38 68 ff ff       	call   c0100de6 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010a5ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a5b1:	89 04 24             	mov    %eax,(%esp)
c010a5b4:	e8 23 ee ff ff       	call   c01093dc <mm_count_inc>
    current->mm = mm;
c010a5b9:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a5be:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a5c1:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010a5c4:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a5c9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a5cc:	8b 52 0c             	mov    0xc(%edx),%edx
c010a5cf:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010a5d2:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010a5d9:	77 23                	ja     c010a5fe <load_icode+0x56b>
c010a5db:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010a5de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a5e2:	c7 44 24 08 d4 e5 10 	movl   $0xc010e5d4,0x8(%esp)
c010a5e9:	c0 
c010a5ea:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010a5f1:	00 
c010a5f2:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a5f9:	e8 e8 67 ff ff       	call   c0100de6 <__panic>
c010a5fe:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010a601:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010a607:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010a60a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a60d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a610:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a613:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010a61a:	77 23                	ja     c010a63f <load_icode+0x5ac>
c010a61c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a61f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a623:	c7 44 24 08 d4 e5 10 	movl   $0xc010e5d4,0x8(%esp)
c010a62a:	c0 
c010a62b:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010a632:	00 
c010a633:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a63a:	e8 a7 67 ff ff       	call   c0100de6 <__panic>
c010a63f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a642:	05 00 00 00 40       	add    $0x40000000,%eax
c010a647:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010a64a:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010a64d:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010a650:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a655:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a658:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010a65b:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a662:	00 
c010a663:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a66a:	00 
c010a66b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a66e:	89 04 24             	mov    %eax,(%esp)
c010a671:	e8 06 1e 00 00       	call   c010c47c <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010a676:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a679:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010a67f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a682:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010a688:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a68b:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010a68f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a692:	66 89 50 28          	mov    %dx,0x28(%eax)
c010a696:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a699:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010a69d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a6a0:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010a6a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a6a7:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010a6ae:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a6b1:	8b 50 18             	mov    0x18(%eax),%edx
c010a6b4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a6b7:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010a6ba:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a6bd:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010a6c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010a6cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6ce:	eb 23                	jmp    c010a6f3 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010a6d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6d3:	89 04 24             	mov    %eax,(%esp)
c010a6d6:	e8 b4 dd ff ff       	call   c010848f <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010a6db:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6de:	89 04 24             	mov    %eax,(%esp)
c010a6e1:	e8 a2 f4 ff ff       	call   c0109b88 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a6e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6e9:	89 04 24             	mov    %eax,(%esp)
c010a6ec:	e8 df da ff ff       	call   c01081d0 <mm_destroy>
bad_mm:
    goto out;
c010a6f1:	eb d8                	jmp    c010a6cb <load_icode+0x638>
}
c010a6f3:	c9                   	leave  
c010a6f4:	c3                   	ret    

c010a6f5 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010a6f5:	55                   	push   %ebp
c010a6f6:	89 e5                	mov    %esp,%ebp
c010a6f8:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010a6fb:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a700:	8b 40 18             	mov    0x18(%eax),%eax
c010a703:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010a706:	8b 45 08             	mov    0x8(%ebp),%eax
c010a709:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a710:	00 
c010a711:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a714:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a718:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a71c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a71f:	89 04 24             	mov    %eax,(%esp)
c010a722:	e8 d9 e7 ff ff       	call   c0108f00 <user_mem_check>
c010a727:	85 c0                	test   %eax,%eax
c010a729:	75 0a                	jne    c010a735 <do_execve+0x40>
        return -E_INVAL;
c010a72b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a730:	e9 f4 00 00 00       	jmp    c010a829 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010a735:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010a739:	76 07                	jbe    c010a742 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010a73b:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010a742:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010a749:	00 
c010a74a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a751:	00 
c010a752:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a755:	89 04 24             	mov    %eax,(%esp)
c010a758:	e8 1f 1d 00 00       	call   c010c47c <memset>
    memcpy(local_name, name, len);
c010a75d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a760:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a764:	8b 45 08             	mov    0x8(%ebp),%eax
c010a767:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a76b:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a76e:	89 04 24             	mov    %eax,(%esp)
c010a771:	e8 e8 1d 00 00       	call   c010c55e <memcpy>

    if (mm != NULL) {
c010a776:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a77a:	74 4a                	je     c010a7c6 <do_execve+0xd1>
        lcr3(boot_cr3);
c010a77c:	a1 8c 1e 1b c0       	mov    0xc01b1e8c,%eax
c010a781:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a784:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a787:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a78a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a78d:	89 04 24             	mov    %eax,(%esp)
c010a790:	e8 61 ec ff ff       	call   c01093f6 <mm_count_dec>
c010a795:	85 c0                	test   %eax,%eax
c010a797:	75 21                	jne    c010a7ba <do_execve+0xc5>
            exit_mmap(mm);
c010a799:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a79c:	89 04 24             	mov    %eax,(%esp)
c010a79f:	e8 eb dc ff ff       	call   c010848f <exit_mmap>
            put_pgdir(mm);
c010a7a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7a7:	89 04 24             	mov    %eax,(%esp)
c010a7aa:	e8 d9 f3 ff ff       	call   c0109b88 <put_pgdir>
            mm_destroy(mm);
c010a7af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7b2:	89 04 24             	mov    %eax,(%esp)
c010a7b5:	e8 16 da ff ff       	call   c01081d0 <mm_destroy>
        }
        current->mm = NULL;
c010a7ba:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a7bf:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a7c6:	8b 45 14             	mov    0x14(%ebp),%eax
c010a7c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7cd:	8b 45 10             	mov    0x10(%ebp),%eax
c010a7d0:	89 04 24             	mov    %eax,(%esp)
c010a7d3:	e8 bb f8 ff ff       	call   c010a093 <load_icode>
c010a7d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a7db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a7df:	74 2f                	je     c010a810 <do_execve+0x11b>
        goto execve_exit;
c010a7e1:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a7e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7e5:	89 04 24             	mov    %eax,(%esp)
c010a7e8:	e8 d6 f6 ff ff       	call   c0109ec3 <do_exit>
    panic("already exit: %e.\n", ret);
c010a7ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a7f4:	c7 44 24 08 ef e7 10 	movl   $0xc010e7ef,0x8(%esp)
c010a7fb:	c0 
c010a7fc:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c010a803:	00 
c010a804:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a80b:	e8 d6 65 ff ff       	call   c0100de6 <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a810:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a815:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a818:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a81c:	89 04 24             	mov    %eax,(%esp)
c010a81f:	e8 96 ed ff ff       	call   c01095ba <set_proc_name>
    return 0;
c010a824:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010a829:	c9                   	leave  
c010a82a:	c3                   	ret    

c010a82b <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a82b:	55                   	push   %ebp
c010a82c:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a82e:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a833:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a83a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a83f:	5d                   	pop    %ebp
c010a840:	c3                   	ret    

c010a841 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a841:	55                   	push   %ebp
c010a842:	89 e5                	mov    %esp,%ebp
c010a844:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a847:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a84c:	8b 40 18             	mov    0x18(%eax),%eax
c010a84f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a852:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a856:	74 30                	je     c010a888 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a858:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a85b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a862:	00 
c010a863:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010a86a:	00 
c010a86b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a86f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a872:	89 04 24             	mov    %eax,(%esp)
c010a875:	e8 86 e6 ff ff       	call   c0108f00 <user_mem_check>
c010a87a:	85 c0                	test   %eax,%eax
c010a87c:	75 0a                	jne    c010a888 <do_wait+0x47>
            return -E_INVAL;
c010a87e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a883:	e9 4b 01 00 00       	jmp    c010a9d3 <do_wait+0x192>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a888:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a88f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a893:	74 39                	je     c010a8ce <do_wait+0x8d>
        proc = find_proc(pid);
c010a895:	8b 45 08             	mov    0x8(%ebp),%eax
c010a898:	89 04 24             	mov    %eax,(%esp)
c010a89b:	e8 fb f0 ff ff       	call   c010999b <find_proc>
c010a8a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a8a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8a7:	74 54                	je     c010a8fd <do_wait+0xbc>
c010a8a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8ac:	8b 50 14             	mov    0x14(%eax),%edx
c010a8af:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a8b4:	39 c2                	cmp    %eax,%edx
c010a8b6:	75 45                	jne    c010a8fd <do_wait+0xbc>
            haskid = 1;
c010a8b8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a8bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8c2:	8b 00                	mov    (%eax),%eax
c010a8c4:	83 f8 03             	cmp    $0x3,%eax
c010a8c7:	75 34                	jne    c010a8fd <do_wait+0xbc>
                goto found;
c010a8c9:	e9 80 00 00 00       	jmp    c010a94e <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
c010a8ce:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a8d3:	8b 40 70             	mov    0x70(%eax),%eax
c010a8d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a8d9:	eb 1c                	jmp    c010a8f7 <do_wait+0xb6>
            haskid = 1;
c010a8db:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e5:	8b 00                	mov    (%eax),%eax
c010a8e7:	83 f8 03             	cmp    $0x3,%eax
c010a8ea:	75 02                	jne    c010a8ee <do_wait+0xad>
                goto found;
c010a8ec:	eb 60                	jmp    c010a94e <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f1:	8b 40 78             	mov    0x78(%eax),%eax
c010a8f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8fb:	75 de                	jne    c010a8db <do_wait+0x9a>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a8fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a901:	74 41                	je     c010a944 <do_wait+0x103>
        current->state = PROC_SLEEPING;
c010a903:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a908:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a90e:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a913:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a91a:	e8 c5 0a 00 00       	call   c010b3e4 <schedule>
        if (current->flags & PF_EXITING) {
c010a91f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a924:	8b 40 44             	mov    0x44(%eax),%eax
c010a927:	83 e0 01             	and    $0x1,%eax
c010a92a:	85 c0                	test   %eax,%eax
c010a92c:	74 11                	je     c010a93f <do_wait+0xfe>
            do_exit(-E_KILLED);
c010a92e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010a935:	e8 89 f5 ff ff       	call   c0109ec3 <do_exit>
        }
        goto repeat;
c010a93a:	e9 49 ff ff ff       	jmp    c010a888 <do_wait+0x47>
c010a93f:	e9 44 ff ff ff       	jmp    c010a888 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010a944:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010a949:	e9 85 00 00 00       	jmp    c010a9d3 <do_wait+0x192>

found:
    if (proc == idleproc || proc == initproc) {
c010a94e:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010a953:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a956:	74 0a                	je     c010a962 <do_wait+0x121>
c010a958:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a95d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a960:	75 1c                	jne    c010a97e <do_wait+0x13d>
        panic("wait idleproc or initproc.\n");
c010a962:	c7 44 24 08 02 e8 10 	movl   $0xc010e802,0x8(%esp)
c010a969:	c0 
c010a96a:	c7 44 24 04 fd 02 00 	movl   $0x2fd,0x4(%esp)
c010a971:	00 
c010a972:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010a979:	e8 68 64 ff ff       	call   c0100de6 <__panic>
    }
    if (code_store != NULL) {
c010a97e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a982:	74 0b                	je     c010a98f <do_wait+0x14e>
        *code_store = proc->exit_code;
c010a984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a987:	8b 50 68             	mov    0x68(%eax),%edx
c010a98a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a98d:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010a98f:	e8 82 e8 ff ff       	call   c0109216 <__intr_save>
c010a994:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010a997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a99a:	89 04 24             	mov    %eax,(%esp)
c010a99d:	e8 c6 ef ff ff       	call   c0109968 <unhash_proc>
        remove_links(proc);
c010a9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9a5:	89 04 24             	mov    %eax,(%esp)
c010a9a8:	e8 37 ed ff ff       	call   c01096e4 <remove_links>
    }
    local_intr_restore(intr_flag);
c010a9ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9b0:	89 04 24             	mov    %eax,(%esp)
c010a9b3:	e8 88 e8 ff ff       	call   c0109240 <__intr_restore>
    put_kstack(proc);
c010a9b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9bb:	89 04 24             	mov    %eax,(%esp)
c010a9be:	e8 f8 f0 ff ff       	call   c0109abb <put_kstack>
    kfree(proc);
c010a9c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9c6:	89 04 24             	mov    %eax,(%esp)
c010a9c9:	e8 d4 a2 ff ff       	call   c0104ca2 <kfree>
    return 0;
c010a9ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a9d3:	c9                   	leave  
c010a9d4:	c3                   	ret    

c010a9d5 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010a9d5:	55                   	push   %ebp
c010a9d6:	89 e5                	mov    %esp,%ebp
c010a9d8:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010a9db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9de:	89 04 24             	mov    %eax,(%esp)
c010a9e1:	e8 b5 ef ff ff       	call   c010999b <find_proc>
c010a9e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9ed:	74 41                	je     c010aa30 <do_kill+0x5b>
        if (!(proc->flags & PF_EXITING)) {
c010a9ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9f2:	8b 40 44             	mov    0x44(%eax),%eax
c010a9f5:	83 e0 01             	and    $0x1,%eax
c010a9f8:	85 c0                	test   %eax,%eax
c010a9fa:	75 2d                	jne    c010aa29 <do_kill+0x54>
            proc->flags |= PF_EXITING;
c010a9fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9ff:	8b 40 44             	mov    0x44(%eax),%eax
c010aa02:	83 c8 01             	or     $0x1,%eax
c010aa05:	89 c2                	mov    %eax,%edx
c010aa07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa0a:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010aa0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa10:	8b 40 6c             	mov    0x6c(%eax),%eax
c010aa13:	85 c0                	test   %eax,%eax
c010aa15:	79 0b                	jns    c010aa22 <do_kill+0x4d>
                wakeup_proc(proc);
c010aa17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa1a:	89 04 24             	mov    %eax,(%esp)
c010aa1d:	e8 29 09 00 00       	call   c010b34b <wakeup_proc>
            }
            return 0;
c010aa22:	b8 00 00 00 00       	mov    $0x0,%eax
c010aa27:	eb 0c                	jmp    c010aa35 <do_kill+0x60>
        }
        return -E_KILLED;
c010aa29:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010aa2e:	eb 05                	jmp    c010aa35 <do_kill+0x60>
    }
    return -E_INVAL;
c010aa30:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010aa35:	c9                   	leave  
c010aa36:	c3                   	ret    

c010aa37 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010aa37:	55                   	push   %ebp
c010aa38:	89 e5                	mov    %esp,%ebp
c010aa3a:	57                   	push   %edi
c010aa3b:	56                   	push   %esi
c010aa3c:	53                   	push   %ebx
c010aa3d:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010aa40:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa43:	89 04 24             	mov    %eax,(%esp)
c010aa46:	e8 02 17 00 00       	call   c010c14d <strlen>
c010aa4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010aa4e:	b8 04 00 00 00       	mov    $0x4,%eax
c010aa53:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa56:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010aa59:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010aa5c:	8b 75 10             	mov    0x10(%ebp),%esi
c010aa5f:	89 f7                	mov    %esi,%edi
c010aa61:	cd 80                	int    $0x80
c010aa63:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010aa66:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010aa69:	83 c4 2c             	add    $0x2c,%esp
c010aa6c:	5b                   	pop    %ebx
c010aa6d:	5e                   	pop    %esi
c010aa6e:	5f                   	pop    %edi
c010aa6f:	5d                   	pop    %ebp
c010aa70:	c3                   	ret    

c010aa71 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010aa71:	55                   	push   %ebp
c010aa72:	89 e5                	mov    %esp,%ebp
c010aa74:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010aa77:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010aa7c:	8b 40 04             	mov    0x4(%eax),%eax
c010aa7f:	c7 44 24 08 1e e8 10 	movl   $0xc010e81e,0x8(%esp)
c010aa86:	c0 
c010aa87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa8b:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010aa92:	e8 c1 58 ff ff       	call   c0100358 <cprintf>
c010aa97:	b8 c7 79 00 00       	mov    $0x79c7,%eax
c010aa9c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aaa0:	c7 44 24 04 11 15 18 	movl   $0xc0181511,0x4(%esp)
c010aaa7:	c0 
c010aaa8:	c7 04 24 1e e8 10 c0 	movl   $0xc010e81e,(%esp)
c010aaaf:	e8 83 ff ff ff       	call   c010aa37 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010aab4:	c7 44 24 08 4f e8 10 	movl   $0xc010e84f,0x8(%esp)
c010aabb:	c0 
c010aabc:	c7 44 24 04 46 03 00 	movl   $0x346,0x4(%esp)
c010aac3:	00 
c010aac4:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010aacb:	e8 16 63 ff ff       	call   c0100de6 <__panic>

c010aad0 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010aad0:	55                   	push   %ebp
c010aad1:	89 e5                	mov    %esp,%ebp
c010aad3:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010aad6:	e8 be a6 ff ff       	call   c0105199 <nr_free_pages>
c010aadb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010aade:	e8 87 a0 ff ff       	call   c0104b6a <kallocated>
c010aae3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010aae6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010aaed:	00 
c010aaee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aaf5:	00 
c010aaf6:	c7 04 24 71 aa 10 c0 	movl   $0xc010aa71,(%esp)
c010aafd:	e8 0b ef ff ff       	call   c0109a0d <kernel_thread>
c010ab02:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010ab05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab09:	7f 1c                	jg     c010ab27 <init_main+0x57>
        panic("create user_main failed.\n");
c010ab0b:	c7 44 24 08 69 e8 10 	movl   $0xc010e869,0x8(%esp)
c010ab12:	c0 
c010ab13:	c7 44 24 04 51 03 00 	movl   $0x351,0x4(%esp)
c010ab1a:	00 
c010ab1b:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010ab22:	e8 bf 62 ff ff       	call   c0100de6 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
c010ab27:	eb 05                	jmp    c010ab2e <init_main+0x5e>
        schedule();
c010ab29:	e8 b6 08 00 00       	call   c010b3e4 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010ab2e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ab35:	00 
c010ab36:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ab3d:	e8 ff fc ff ff       	call   c010a841 <do_wait>
c010ab42:	85 c0                	test   %eax,%eax
c010ab44:	74 e3                	je     c010ab29 <init_main+0x59>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010ab46:	c7 04 24 84 e8 10 c0 	movl   $0xc010e884,(%esp)
c010ab4d:	e8 06 58 ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010ab52:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ab57:	8b 40 70             	mov    0x70(%eax),%eax
c010ab5a:	85 c0                	test   %eax,%eax
c010ab5c:	75 18                	jne    c010ab76 <init_main+0xa6>
c010ab5e:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ab63:	8b 40 74             	mov    0x74(%eax),%eax
c010ab66:	85 c0                	test   %eax,%eax
c010ab68:	75 0c                	jne    c010ab76 <init_main+0xa6>
c010ab6a:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ab6f:	8b 40 78             	mov    0x78(%eax),%eax
c010ab72:	85 c0                	test   %eax,%eax
c010ab74:	74 24                	je     c010ab9a <init_main+0xca>
c010ab76:	c7 44 24 0c a8 e8 10 	movl   $0xc010e8a8,0xc(%esp)
c010ab7d:	c0 
c010ab7e:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010ab85:	c0 
c010ab86:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c010ab8d:	00 
c010ab8e:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010ab95:	e8 4c 62 ff ff       	call   c0100de6 <__panic>
    assert(nr_process == 2);
c010ab9a:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c010ab9f:	83 f8 02             	cmp    $0x2,%eax
c010aba2:	74 24                	je     c010abc8 <init_main+0xf8>
c010aba4:	c7 44 24 0c f3 e8 10 	movl   $0xc010e8f3,0xc(%esp)
c010abab:	c0 
c010abac:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010abb3:	c0 
c010abb4:	c7 44 24 04 5a 03 00 	movl   $0x35a,0x4(%esp)
c010abbb:	00 
c010abbc:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010abc3:	e8 1e 62 ff ff       	call   c0100de6 <__panic>
c010abc8:	c7 45 e8 70 1f 1b c0 	movl   $0xc01b1f70,-0x18(%ebp)
c010abcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010abd2:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010abd5:	8b 15 24 fe 1a c0    	mov    0xc01afe24,%edx
c010abdb:	83 c2 58             	add    $0x58,%edx
c010abde:	39 d0                	cmp    %edx,%eax
c010abe0:	74 24                	je     c010ac06 <init_main+0x136>
c010abe2:	c7 44 24 0c 04 e9 10 	movl   $0xc010e904,0xc(%esp)
c010abe9:	c0 
c010abea:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010abf1:	c0 
c010abf2:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c010abf9:	00 
c010abfa:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010ac01:	e8 e0 61 ff ff       	call   c0100de6 <__panic>
c010ac06:	c7 45 e4 70 1f 1b c0 	movl   $0xc01b1f70,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010ac0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac10:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010ac12:	8b 15 24 fe 1a c0    	mov    0xc01afe24,%edx
c010ac18:	83 c2 58             	add    $0x58,%edx
c010ac1b:	39 d0                	cmp    %edx,%eax
c010ac1d:	74 24                	je     c010ac43 <init_main+0x173>
c010ac1f:	c7 44 24 0c 34 e9 10 	movl   $0xc010e934,0xc(%esp)
c010ac26:	c0 
c010ac27:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010ac2e:	c0 
c010ac2f:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
c010ac36:	00 
c010ac37:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010ac3e:	e8 a3 61 ff ff       	call   c0100de6 <__panic>

    cprintf("init check memory pass.\n");
c010ac43:	c7 04 24 64 e9 10 c0 	movl   $0xc010e964,(%esp)
c010ac4a:	e8 09 57 ff ff       	call   c0100358 <cprintf>
    return 0;
c010ac4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ac54:	c9                   	leave  
c010ac55:	c3                   	ret    

c010ac56 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010ac56:	55                   	push   %ebp
c010ac57:	89 e5                	mov    %esp,%ebp
c010ac59:	83 ec 28             	sub    $0x28,%esp
c010ac5c:	c7 45 ec 70 1f 1b c0 	movl   $0xc01b1f70,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ac63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac66:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ac69:	89 50 04             	mov    %edx,0x4(%eax)
c010ac6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac6f:	8b 50 04             	mov    0x4(%eax),%edx
c010ac72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac75:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ac77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ac7e:	eb 26                	jmp    c010aca6 <proc_init+0x50>
        list_init(hash_list + i);
c010ac80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac83:	c1 e0 03             	shl    $0x3,%eax
c010ac86:	05 40 fe 1a c0       	add    $0xc01afe40,%eax
c010ac8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ac8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac91:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ac94:	89 50 04             	mov    %edx,0x4(%eax)
c010ac97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac9a:	8b 50 04             	mov    0x4(%eax),%edx
c010ac9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aca0:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010aca2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010aca6:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010acad:	7e d1                	jle    c010ac80 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010acaf:	e8 94 e7 ff ff       	call   c0109448 <alloc_proc>
c010acb4:	a3 20 fe 1a c0       	mov    %eax,0xc01afe20
c010acb9:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010acbe:	85 c0                	test   %eax,%eax
c010acc0:	75 1c                	jne    c010acde <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010acc2:	c7 44 24 08 7d e9 10 	movl   $0xc010e97d,0x8(%esp)
c010acc9:	c0 
c010acca:	c7 44 24 04 6e 03 00 	movl   $0x36e,0x4(%esp)
c010acd1:	00 
c010acd2:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010acd9:	e8 08 61 ff ff       	call   c0100de6 <__panic>
    }

    idleproc->pid = 0;
c010acde:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ace3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010acea:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010acef:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010acf5:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010acfa:	ba 00 b0 12 c0       	mov    $0xc012b000,%edx
c010acff:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010ad02:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ad07:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010ad0e:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ad13:	c7 44 24 04 95 e9 10 	movl   $0xc010e995,0x4(%esp)
c010ad1a:	c0 
c010ad1b:	89 04 24             	mov    %eax,(%esp)
c010ad1e:	e8 97 e8 ff ff       	call   c01095ba <set_proc_name>
    nr_process ++;
c010ad23:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c010ad28:	83 c0 01             	add    $0x1,%eax
c010ad2b:	a3 40 1e 1b c0       	mov    %eax,0xc01b1e40

    current = idleproc;
c010ad30:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ad35:	a3 28 fe 1a c0       	mov    %eax,0xc01afe28

    int pid = kernel_thread(init_main, NULL, 0);
c010ad3a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ad41:	00 
c010ad42:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ad49:	00 
c010ad4a:	c7 04 24 d0 aa 10 c0 	movl   $0xc010aad0,(%esp)
c010ad51:	e8 b7 ec ff ff       	call   c0109a0d <kernel_thread>
c010ad56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010ad59:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad5d:	7f 1c                	jg     c010ad7b <proc_init+0x125>
        panic("create init_main failed.\n");
c010ad5f:	c7 44 24 08 9a e9 10 	movl   $0xc010e99a,0x8(%esp)
c010ad66:	c0 
c010ad67:	c7 44 24 04 7c 03 00 	movl   $0x37c,0x4(%esp)
c010ad6e:	00 
c010ad6f:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010ad76:	e8 6b 60 ff ff       	call   c0100de6 <__panic>
    }

    initproc = find_proc(pid);
c010ad7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad7e:	89 04 24             	mov    %eax,(%esp)
c010ad81:	e8 15 ec ff ff       	call   c010999b <find_proc>
c010ad86:	a3 24 fe 1a c0       	mov    %eax,0xc01afe24
    set_proc_name(initproc, "init");
c010ad8b:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ad90:	c7 44 24 04 b4 e9 10 	movl   $0xc010e9b4,0x4(%esp)
c010ad97:	c0 
c010ad98:	89 04 24             	mov    %eax,(%esp)
c010ad9b:	e8 1a e8 ff ff       	call   c01095ba <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010ada0:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ada5:	85 c0                	test   %eax,%eax
c010ada7:	74 0c                	je     c010adb5 <proc_init+0x15f>
c010ada9:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010adae:	8b 40 04             	mov    0x4(%eax),%eax
c010adb1:	85 c0                	test   %eax,%eax
c010adb3:	74 24                	je     c010add9 <proc_init+0x183>
c010adb5:	c7 44 24 0c bc e9 10 	movl   $0xc010e9bc,0xc(%esp)
c010adbc:	c0 
c010adbd:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010adc4:	c0 
c010adc5:	c7 44 24 04 82 03 00 	movl   $0x382,0x4(%esp)
c010adcc:	00 
c010adcd:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010add4:	e8 0d 60 ff ff       	call   c0100de6 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010add9:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010adde:	85 c0                	test   %eax,%eax
c010ade0:	74 0d                	je     c010adef <proc_init+0x199>
c010ade2:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ade7:	8b 40 04             	mov    0x4(%eax),%eax
c010adea:	83 f8 01             	cmp    $0x1,%eax
c010aded:	74 24                	je     c010ae13 <proc_init+0x1bd>
c010adef:	c7 44 24 0c e4 e9 10 	movl   $0xc010e9e4,0xc(%esp)
c010adf6:	c0 
c010adf7:	c7 44 24 08 25 e6 10 	movl   $0xc010e625,0x8(%esp)
c010adfe:	c0 
c010adff:	c7 44 24 04 83 03 00 	movl   $0x383,0x4(%esp)
c010ae06:	00 
c010ae07:	c7 04 24 f8 e5 10 c0 	movl   $0xc010e5f8,(%esp)
c010ae0e:	e8 d3 5f ff ff       	call   c0100de6 <__panic>
}
c010ae13:	c9                   	leave  
c010ae14:	c3                   	ret    

c010ae15 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010ae15:	55                   	push   %ebp
c010ae16:	89 e5                	mov    %esp,%ebp
c010ae18:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010ae1b:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010ae20:	8b 40 10             	mov    0x10(%eax),%eax
c010ae23:	85 c0                	test   %eax,%eax
c010ae25:	74 07                	je     c010ae2e <cpu_idle+0x19>
            schedule();
c010ae27:	e8 b8 05 00 00       	call   c010b3e4 <schedule>
        }
    }
c010ae2c:	eb ed                	jmp    c010ae1b <cpu_idle+0x6>
c010ae2e:	eb eb                	jmp    c010ae1b <cpu_idle+0x6>

c010ae30 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010ae30:	55                   	push   %ebp
c010ae31:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010ae33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ae37:	75 11                	jne    c010ae4a <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010ae39:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010ae3e:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010ae45:	00 00 00 
c010ae48:	eb 0e                	jmp    c010ae58 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010ae4a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010ae4f:	8b 55 08             	mov    0x8(%ebp),%edx
c010ae52:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010ae58:	5d                   	pop    %ebp
c010ae59:	c3                   	ret    

c010ae5a <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010ae5a:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010ae5e:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010ae60:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010ae63:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010ae66:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010ae69:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010ae6c:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010ae6f:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010ae72:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010ae75:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010ae79:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010ae7c:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010ae7f:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010ae82:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010ae85:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010ae88:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010ae8b:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010ae8e:	ff 30                	pushl  (%eax)

    ret
c010ae90:	c3                   	ret    

c010ae91 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010ae91:	55                   	push   %ebp
c010ae92:	89 e5                	mov    %esp,%ebp
c010ae94:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010ae97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ae9b:	75 08                	jne    c010aea5 <skew_heap_merge+0x14>
c010ae9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aea0:	e9 bd 00 00 00       	jmp    c010af62 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010aea5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aea9:	75 08                	jne    c010aeb3 <skew_heap_merge+0x22>
c010aeab:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeae:	e9 af 00 00 00       	jmp    c010af62 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010aeb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aeb6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aeba:	8b 45 08             	mov    0x8(%ebp),%eax
c010aebd:	89 04 24             	mov    %eax,(%esp)
c010aec0:	8b 45 10             	mov    0x10(%ebp),%eax
c010aec3:	ff d0                	call   *%eax
c010aec5:	83 f8 ff             	cmp    $0xffffffff,%eax
c010aec8:	75 4d                	jne    c010af17 <skew_heap_merge+0x86>
     {
          r = a->left;
c010aeca:	8b 45 08             	mov    0x8(%ebp),%eax
c010aecd:	8b 40 04             	mov    0x4(%eax),%eax
c010aed0:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010aed3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed6:	8b 40 08             	mov    0x8(%eax),%eax
c010aed9:	8b 55 10             	mov    0x10(%ebp),%edx
c010aedc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010aee0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010aee3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aee7:	89 04 24             	mov    %eax,(%esp)
c010aeea:	e8 a2 ff ff ff       	call   c010ae91 <skew_heap_merge>
c010aeef:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010aef2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aef5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aef8:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010aefb:	8b 45 08             	mov    0x8(%ebp),%eax
c010aefe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010af01:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010af04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af08:	74 08                	je     c010af12 <skew_heap_merge+0x81>
c010af0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af0d:	8b 55 08             	mov    0x8(%ebp),%edx
c010af10:	89 10                	mov    %edx,(%eax)

          return a;
c010af12:	8b 45 08             	mov    0x8(%ebp),%eax
c010af15:	eb 4b                	jmp    c010af62 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010af17:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af1a:	8b 40 04             	mov    0x4(%eax),%eax
c010af1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010af20:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af23:	8b 40 08             	mov    0x8(%eax),%eax
c010af26:	8b 55 10             	mov    0x10(%ebp),%edx
c010af29:	89 54 24 08          	mov    %edx,0x8(%esp)
c010af2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af31:	8b 45 08             	mov    0x8(%ebp),%eax
c010af34:	89 04 24             	mov    %eax,(%esp)
c010af37:	e8 55 ff ff ff       	call   c010ae91 <skew_heap_merge>
c010af3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010af3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af42:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af45:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010af48:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010af4e:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010af51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af55:	74 08                	je     c010af5f <skew_heap_merge+0xce>
c010af57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010af5d:	89 10                	mov    %edx,(%eax)

          return b;
c010af5f:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010af62:	c9                   	leave  
c010af63:	c3                   	ret    

c010af64 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010af64:	55                   	push   %ebp
c010af65:	89 e5                	mov    %esp,%ebp
c010af67:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010af6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010af6d:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010af72:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010af75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af78:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010af7d:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010af80:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010af83:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010af89:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010af8c:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010af92:	29 c2                	sub    %eax,%edx
c010af94:	89 d0                	mov    %edx,%eax
c010af96:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010af99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af9d:	7e 07                	jle    c010afa6 <proc_stride_comp_f+0x42>
c010af9f:	b8 01 00 00 00       	mov    $0x1,%eax
c010afa4:	eb 12                	jmp    c010afb8 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010afa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afaa:	75 07                	jne    c010afb3 <proc_stride_comp_f+0x4f>
c010afac:	b8 00 00 00 00       	mov    $0x0,%eax
c010afb1:	eb 05                	jmp    c010afb8 <proc_stride_comp_f+0x54>
     else return -1;
c010afb3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010afb8:	c9                   	leave  
c010afb9:	c3                   	ret    

c010afba <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010afba:	55                   	push   %ebp
c010afbb:	89 e5                	mov    %esp,%ebp
c010afbd:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2012011277
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0
      */
	list_init(&(rq->run_list));
c010afc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010afc3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010afc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010afc9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010afcc:	89 50 04             	mov    %edx,0x4(%eax)
c010afcf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010afd2:	8b 50 04             	mov    0x4(%eax),%edx
c010afd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010afd8:	89 10                	mov    %edx,(%eax)
    rq->lab6_run_pool = NULL;
c010afda:	8b 45 08             	mov    0x8(%ebp),%eax
c010afdd:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    rq->proc_num = 0;
c010afe4:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010afee:	c9                   	leave  
c010afef:	c3                   	ret    

c010aff0 <stride_enqueue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010aff0:	55                   	push   %ebp
c010aff1:	89 e5                	mov    %esp,%ebp
c010aff3:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
     rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010aff6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aff9:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010afff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b002:	8b 40 10             	mov    0x10(%eax),%eax
c010b005:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b008:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b00b:	c7 45 ec 64 af 10 c0 	movl   $0xc010af64,-0x14(%ebp)
c010b012:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b015:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010b018:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b01b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010b021:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b024:	8b 10                	mov    (%eax),%edx
c010b026:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b029:	89 50 08             	mov    %edx,0x8(%eax)
c010b02c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b02f:	8b 50 08             	mov    0x8(%eax),%edx
c010b032:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b035:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010b038:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b03b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b03f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b042:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b046:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b049:	89 04 24             	mov    %eax,(%esp)
c010b04c:	e8 40 fe ff ff       	call   c010ae91 <skew_heap_merge>
c010b051:	89 c2                	mov    %eax,%edx
c010b053:	8b 45 08             	mov    0x8(%ebp),%eax
c010b056:	89 50 10             	mov    %edx,0x10(%eax)
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice)
c010b059:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b05c:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b062:	85 c0                	test   %eax,%eax
c010b064:	74 13                	je     c010b079 <stride_enqueue+0x89>
c010b066:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b069:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010b06f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b072:	8b 40 0c             	mov    0xc(%eax),%eax
c010b075:	39 c2                	cmp    %eax,%edx
c010b077:	7e 0f                	jle    c010b088 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010b079:	8b 45 08             	mov    0x8(%ebp),%eax
c010b07c:	8b 50 0c             	mov    0xc(%eax),%edx
c010b07f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b082:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
     proc->rq = rq;
c010b088:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b08b:	8b 55 08             	mov    0x8(%ebp),%edx
c010b08e:	89 50 7c             	mov    %edx,0x7c(%eax)
     rq->proc_num ++;
c010b091:	8b 45 08             	mov    0x8(%ebp),%eax
c010b094:	8b 40 08             	mov    0x8(%eax),%eax
c010b097:	8d 50 01             	lea    0x1(%eax),%edx
c010b09a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b09d:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b0a0:	c9                   	leave  
c010b0a1:	c3                   	ret    

c010b0a2 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010b0a2:	55                   	push   %ebp
c010b0a3:	89 e5                	mov    %esp,%ebp
c010b0a5:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010b0a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0ab:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b0b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b4:	8b 40 10             	mov    0x10(%eax),%eax
c010b0b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0ba:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b0bd:	c7 45 ec 64 af 10 c0 	movl   $0xc010af64,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010b0c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0c7:	8b 00                	mov    (%eax),%eax
c010b0c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010b0cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0cf:	8b 50 08             	mov    0x8(%eax),%edx
c010b0d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0d5:	8b 40 04             	mov    0x4(%eax),%eax
c010b0d8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b0db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b0df:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b0e3:	89 04 24             	mov    %eax,(%esp)
c010b0e6:	e8 a6 fd ff ff       	call   c010ae91 <skew_heap_merge>
c010b0eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010b0ee:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b0f2:	74 08                	je     c010b0fc <stride_dequeue+0x5a>
c010b0f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b0f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b0fa:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010b0fc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b100:	74 24                	je     c010b126 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010b102:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b105:	8b 40 04             	mov    0x4(%eax),%eax
c010b108:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b10b:	75 0b                	jne    c010b118 <stride_dequeue+0x76>
               p->left = rep;
c010b10d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b110:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b113:	89 50 04             	mov    %edx,0x4(%eax)
c010b116:	eb 09                	jmp    c010b121 <stride_dequeue+0x7f>
          else p->right = rep;
c010b118:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b11e:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010b121:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b124:	eb 03                	jmp    c010b129 <stride_dequeue+0x87>
     }
     else return rep;
c010b126:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b129:	89 c2                	mov    %eax,%edx
c010b12b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b12e:	89 50 10             	mov    %edx,0x10(%eax)
	rq->proc_num --;
c010b131:	8b 45 08             	mov    0x8(%ebp),%eax
c010b134:	8b 40 08             	mov    0x8(%eax),%eax
c010b137:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b13a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b13d:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b140:	c9                   	leave  
c010b141:	c3                   	ret    

c010b142 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010b142:	55                   	push   %ebp
c010b143:	89 e5                	mov    %esp,%ebp
c010b145:	53                   	push   %ebx
c010b146:	83 ec 10             	sub    $0x10,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
	if (rq->lab6_run_pool == NULL) return NULL;
c010b149:	8b 45 08             	mov    0x8(%ebp),%eax
c010b14c:	8b 40 10             	mov    0x10(%eax),%eax
c010b14f:	85 c0                	test   %eax,%eax
c010b151:	75 07                	jne    c010b15a <stride_pick_next+0x18>
c010b153:	b8 00 00 00 00       	mov    $0x0,%eax
c010b158:	eb 62                	jmp    c010b1bc <stride_pick_next+0x7a>
	struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010b15a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15d:	8b 40 10             	mov    0x10(%eax),%eax
c010b160:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b165:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (p->lab6_priority == 0)
c010b168:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b16b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b171:	85 c0                	test   %eax,%eax
c010b173:	75 1a                	jne    c010b18f <stride_pick_next+0x4d>
	    p->lab6_stride += BIG_STRIDE;
c010b175:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b178:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b17e:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010b184:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b187:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010b18d:	eb 2a                	jmp    c010b1b9 <stride_pick_next+0x77>
	else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010b18f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b192:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010b198:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b19b:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
c010b1a1:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010b1a6:	ba 00 00 00 00       	mov    $0x0,%edx
c010b1ab:	f7 f3                	div    %ebx
c010b1ad:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010b1b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b1b3:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
	return p;
c010b1b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b1bc:	83 c4 10             	add    $0x10,%esp
c010b1bf:	5b                   	pop    %ebx
c010b1c0:	5d                   	pop    %ebp
c010b1c1:	c3                   	ret    

c010b1c2 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010b1c2:	55                   	push   %ebp
c010b1c3:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2012011277 */
    if (proc->time_slice > 0)
c010b1c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1c8:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b1ce:	85 c0                	test   %eax,%eax
c010b1d0:	7e 15                	jle    c010b1e7 <stride_proc_tick+0x25>
         proc->time_slice --;
c010b1d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1d5:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b1db:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b1de:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1e1:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    if (proc->time_slice == 0)
c010b1e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1ea:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b1f0:	85 c0                	test   %eax,%eax
c010b1f2:	75 0a                	jne    c010b1fe <stride_proc_tick+0x3c>
         proc->need_resched = 1;
c010b1f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1f7:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010b1fe:	5d                   	pop    %ebp
c010b1ff:	c3                   	ret    

c010b200 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b200:	55                   	push   %ebp
c010b201:	89 e5                	mov    %esp,%ebp
c010b203:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b206:	9c                   	pushf  
c010b207:	58                   	pop    %eax
c010b208:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b20b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b20e:	25 00 02 00 00       	and    $0x200,%eax
c010b213:	85 c0                	test   %eax,%eax
c010b215:	74 0c                	je     c010b223 <__intr_save+0x23>
        intr_disable();
c010b217:	e8 22 6e ff ff       	call   c010203e <intr_disable>
        return 1;
c010b21c:	b8 01 00 00 00       	mov    $0x1,%eax
c010b221:	eb 05                	jmp    c010b228 <__intr_save+0x28>
    }
    return 0;
c010b223:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b228:	c9                   	leave  
c010b229:	c3                   	ret    

c010b22a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b22a:	55                   	push   %ebp
c010b22b:	89 e5                	mov    %esp,%ebp
c010b22d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b230:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b234:	74 05                	je     c010b23b <__intr_restore+0x11>
        intr_enable();
c010b236:	e8 fd 6d ff ff       	call   c0102038 <intr_enable>
    }
}
c010b23b:	c9                   	leave  
c010b23c:	c3                   	ret    

c010b23d <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b23d:	55                   	push   %ebp
c010b23e:	89 e5                	mov    %esp,%ebp
c010b240:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b243:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010b248:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b24b:	74 1a                	je     c010b267 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010b24d:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b252:	8b 40 08             	mov    0x8(%eax),%eax
c010b255:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b25b:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b25e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b262:	89 14 24             	mov    %edx,(%esp)
c010b265:	ff d0                	call   *%eax
    }
}
c010b267:	c9                   	leave  
c010b268:	c3                   	ret    

c010b269 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b269:	55                   	push   %ebp
c010b26a:	89 e5                	mov    %esp,%ebp
c010b26c:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010b26f:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b274:	8b 40 0c             	mov    0xc(%eax),%eax
c010b277:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b27d:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b280:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b284:	89 14 24             	mov    %edx,(%esp)
c010b287:	ff d0                	call   *%eax
}
c010b289:	c9                   	leave  
c010b28a:	c3                   	ret    

c010b28b <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b28b:	55                   	push   %ebp
c010b28c:	89 e5                	mov    %esp,%ebp
c010b28e:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010b291:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b296:	8b 40 10             	mov    0x10(%eax),%eax
c010b299:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b29f:	89 14 24             	mov    %edx,(%esp)
c010b2a2:	ff d0                	call   *%eax
}
c010b2a4:	c9                   	leave  
c010b2a5:	c3                   	ret    

c010b2a6 <sched_class_proc_tick>:

void
sched_class_proc_tick(struct proc_struct *proc) {
c010b2a6:	55                   	push   %ebp
c010b2a7:	89 e5                	mov    %esp,%ebp
c010b2a9:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b2ac:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010b2b1:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b2b4:	74 1c                	je     c010b2d2 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010b2b6:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b2bb:	8b 40 14             	mov    0x14(%eax),%eax
c010b2be:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b2c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b2c7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b2cb:	89 14 24             	mov    %edx,(%esp)
c010b2ce:	ff d0                	call   *%eax
c010b2d0:	eb 0a                	jmp    c010b2dc <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010b2d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2d5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b2dc:	c9                   	leave  
c010b2dd:	c3                   	ret    

c010b2de <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b2de:	55                   	push   %ebp
c010b2df:	89 e5                	mov    %esp,%ebp
c010b2e1:	83 ec 28             	sub    $0x28,%esp
c010b2e4:	c7 45 f4 54 1e 1b c0 	movl   $0xc01b1e54,-0xc(%ebp)
c010b2eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b2f1:	89 50 04             	mov    %edx,0x4(%eax)
c010b2f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2f7:	8b 50 04             	mov    0x4(%eax),%edx
c010b2fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2fd:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010b2ff:	c7 05 5c 1e 1b c0 88 	movl   $0xc012da88,0xc01b1e5c
c010b306:	da 12 c0 

    rq = &__rq;
c010b309:	c7 05 60 1e 1b c0 64 	movl   $0xc01b1e64,0xc01b1e60
c010b310:	1e 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010b313:	a1 60 1e 1b c0       	mov    0xc01b1e60,%eax
c010b318:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010b31f:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b324:	8b 40 04             	mov    0x4(%eax),%eax
c010b327:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b32d:	89 14 24             	mov    %edx,(%esp)
c010b330:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010b332:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b337:	8b 00                	mov    (%eax),%eax
c010b339:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b33d:	c7 04 24 1c ea 10 c0 	movl   $0xc010ea1c,(%esp)
c010b344:	e8 0f 50 ff ff       	call   c0100358 <cprintf>
}
c010b349:	c9                   	leave  
c010b34a:	c3                   	ret    

c010b34b <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010b34b:	55                   	push   %ebp
c010b34c:	89 e5                	mov    %esp,%ebp
c010b34e:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010b351:	8b 45 08             	mov    0x8(%ebp),%eax
c010b354:	8b 00                	mov    (%eax),%eax
c010b356:	83 f8 03             	cmp    $0x3,%eax
c010b359:	75 24                	jne    c010b37f <wakeup_proc+0x34>
c010b35b:	c7 44 24 0c 2d ea 10 	movl   $0xc010ea2d,0xc(%esp)
c010b362:	c0 
c010b363:	c7 44 24 08 48 ea 10 	movl   $0xc010ea48,0x8(%esp)
c010b36a:	c0 
c010b36b:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010b372:	00 
c010b373:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b37a:	e8 67 5a ff ff       	call   c0100de6 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010b37f:	e8 7c fe ff ff       	call   c010b200 <__intr_save>
c010b384:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010b387:	8b 45 08             	mov    0x8(%ebp),%eax
c010b38a:	8b 00                	mov    (%eax),%eax
c010b38c:	83 f8 02             	cmp    $0x2,%eax
c010b38f:	74 2a                	je     c010b3bb <wakeup_proc+0x70>
            proc->state = PROC_RUNNABLE;
c010b391:	8b 45 08             	mov    0x8(%ebp),%eax
c010b394:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010b39a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b39d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010b3a4:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b3a9:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b3ac:	74 29                	je     c010b3d7 <wakeup_proc+0x8c>
                sched_class_enqueue(proc);
c010b3ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3b1:	89 04 24             	mov    %eax,(%esp)
c010b3b4:	e8 84 fe ff ff       	call   c010b23d <sched_class_enqueue>
c010b3b9:	eb 1c                	jmp    c010b3d7 <wakeup_proc+0x8c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010b3bb:	c7 44 24 08 73 ea 10 	movl   $0xc010ea73,0x8(%esp)
c010b3c2:	c0 
c010b3c3:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010b3ca:	00 
c010b3cb:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b3d2:	e8 7b 5a ff ff       	call   c0100e52 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010b3d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3da:	89 04 24             	mov    %eax,(%esp)
c010b3dd:	e8 48 fe ff ff       	call   c010b22a <__intr_restore>
}
c010b3e2:	c9                   	leave  
c010b3e3:	c3                   	ret    

c010b3e4 <schedule>:

void
schedule(void) {
c010b3e4:	55                   	push   %ebp
c010b3e5:	89 e5                	mov    %esp,%ebp
c010b3e7:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010b3ea:	e8 11 fe ff ff       	call   c010b200 <__intr_save>
c010b3ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010b3f2:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b3f7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010b3fe:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b403:	8b 00                	mov    (%eax),%eax
c010b405:	83 f8 02             	cmp    $0x2,%eax
c010b408:	75 0d                	jne    c010b417 <schedule+0x33>
            sched_class_enqueue(current);
c010b40a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b40f:	89 04 24             	mov    %eax,(%esp)
c010b412:	e8 26 fe ff ff       	call   c010b23d <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010b417:	e8 6f fe ff ff       	call   c010b28b <sched_class_pick_next>
c010b41c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b41f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b423:	74 0b                	je     c010b430 <schedule+0x4c>
            sched_class_dequeue(next);
c010b425:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b428:	89 04 24             	mov    %eax,(%esp)
c010b42b:	e8 39 fe ff ff       	call   c010b269 <sched_class_dequeue>
        }
        if (next == NULL) {
c010b430:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b434:	75 08                	jne    c010b43e <schedule+0x5a>
            next = idleproc;
c010b436:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010b43b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010b43e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b441:	8b 40 08             	mov    0x8(%eax),%eax
c010b444:	8d 50 01             	lea    0x1(%eax),%edx
c010b447:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b44a:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010b44d:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b452:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b455:	74 0b                	je     c010b462 <schedule+0x7e>
            proc_run(next);
c010b457:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b45a:	89 04 24             	mov    %eax,(%esp)
c010b45d:	e8 fd e3 ff ff       	call   c010985f <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010b462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b465:	89 04 24             	mov    %eax,(%esp)
c010b468:	e8 bd fd ff ff       	call   c010b22a <__intr_restore>
}
c010b46d:	c9                   	leave  
c010b46e:	c3                   	ret    

c010b46f <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010b46f:	55                   	push   %ebp
c010b470:	89 e5                	mov    %esp,%ebp
c010b472:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b475:	e8 86 fd ff ff       	call   c010b200 <__intr_save>
c010b47a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010b47d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b480:	8b 00                	mov    (%eax),%eax
c010b482:	85 c0                	test   %eax,%eax
c010b484:	74 0a                	je     c010b490 <add_timer+0x21>
c010b486:	8b 45 08             	mov    0x8(%ebp),%eax
c010b489:	8b 40 04             	mov    0x4(%eax),%eax
c010b48c:	85 c0                	test   %eax,%eax
c010b48e:	75 24                	jne    c010b4b4 <add_timer+0x45>
c010b490:	c7 44 24 0c 90 ea 10 	movl   $0xc010ea90,0xc(%esp)
c010b497:	c0 
c010b498:	c7 44 24 08 48 ea 10 	movl   $0xc010ea48,0x8(%esp)
c010b49f:	c0 
c010b4a0:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010b4a7:	00 
c010b4a8:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b4af:	e8 32 59 ff ff       	call   c0100de6 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010b4b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b7:	83 c0 08             	add    $0x8,%eax
c010b4ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b4bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4c0:	8b 40 04             	mov    0x4(%eax),%eax
c010b4c3:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010b4c6:	0f 94 c0             	sete   %al
c010b4c9:	0f b6 c0             	movzbl %al,%eax
c010b4cc:	85 c0                	test   %eax,%eax
c010b4ce:	75 24                	jne    c010b4f4 <add_timer+0x85>
c010b4d0:	c7 44 24 0c bc ea 10 	movl   $0xc010eabc,0xc(%esp)
c010b4d7:	c0 
c010b4d8:	c7 44 24 08 48 ea 10 	movl   $0xc010ea48,0x8(%esp)
c010b4df:	c0 
c010b4e0:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010b4e7:	00 
c010b4e8:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b4ef:	e8 f2 58 ff ff       	call   c0100de6 <__panic>
c010b4f4:	c7 45 e4 54 1e 1b c0 	movl   $0xc01b1e54,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b4fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4fe:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010b501:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010b504:	eb 4a                	jmp    c010b550 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010b506:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b509:	83 e8 08             	sub    $0x8,%eax
c010b50c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010b50f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b512:	8b 10                	mov    (%eax),%edx
c010b514:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b517:	8b 00                	mov    (%eax),%eax
c010b519:	39 c2                	cmp    %eax,%edx
c010b51b:	73 13                	jae    c010b530 <add_timer+0xc1>
                next->expires -= timer->expires;
c010b51d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b520:	8b 10                	mov    (%eax),%edx
c010b522:	8b 45 08             	mov    0x8(%ebp),%eax
c010b525:	8b 00                	mov    (%eax),%eax
c010b527:	29 c2                	sub    %eax,%edx
c010b529:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b52c:	89 10                	mov    %edx,(%eax)
                break;
c010b52e:	eb 29                	jmp    c010b559 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010b530:	8b 45 08             	mov    0x8(%ebp),%eax
c010b533:	8b 10                	mov    (%eax),%edx
c010b535:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b538:	8b 00                	mov    (%eax),%eax
c010b53a:	29 c2                	sub    %eax,%edx
c010b53c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b53f:	89 10                	mov    %edx,(%eax)
c010b541:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b544:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b547:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b54a:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010b54d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010b550:	81 7d f4 54 1e 1b c0 	cmpl   $0xc01b1e54,-0xc(%ebp)
c010b557:	75 ad                	jne    c010b506 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010b559:	8b 45 08             	mov    0x8(%ebp),%eax
c010b55c:	8d 50 08             	lea    0x8(%eax),%edx
c010b55f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b562:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b565:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b568:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b56b:	8b 00                	mov    (%eax),%eax
c010b56d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b570:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b573:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b576:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b579:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b57c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b57f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b582:	89 10                	mov    %edx,(%eax)
c010b584:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b587:	8b 10                	mov    (%eax),%edx
c010b589:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b58c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b58f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b592:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b595:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b598:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b59b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b59e:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010b5a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5a3:	89 04 24             	mov    %eax,(%esp)
c010b5a6:	e8 7f fc ff ff       	call   c010b22a <__intr_restore>
}
c010b5ab:	c9                   	leave  
c010b5ac:	c3                   	ret    

c010b5ad <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010b5ad:	55                   	push   %ebp
c010b5ae:	89 e5                	mov    %esp,%ebp
c010b5b0:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b5b3:	e8 48 fc ff ff       	call   c010b200 <__intr_save>
c010b5b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010b5bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5be:	83 c0 08             	add    $0x8,%eax
c010b5c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b5c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5c7:	8b 40 04             	mov    0x4(%eax),%eax
c010b5ca:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010b5cd:	0f 94 c0             	sete   %al
c010b5d0:	0f b6 c0             	movzbl %al,%eax
c010b5d3:	85 c0                	test   %eax,%eax
c010b5d5:	0f 85 89 00 00 00    	jne    c010b664 <del_timer+0xb7>
            if (timer->expires != 0) {
c010b5db:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5de:	8b 00                	mov    (%eax),%eax
c010b5e0:	85 c0                	test   %eax,%eax
c010b5e2:	74 35                	je     c010b619 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010b5e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e7:	83 c0 08             	add    $0x8,%eax
c010b5ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b5ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5f0:	8b 40 04             	mov    0x4(%eax),%eax
c010b5f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010b5f6:	81 7d f0 54 1e 1b c0 	cmpl   $0xc01b1e54,-0x10(%ebp)
c010b5fd:	74 1a                	je     c010b619 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010b5ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b602:	83 e8 08             	sub    $0x8,%eax
c010b605:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010b608:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b60b:	8b 10                	mov    (%eax),%edx
c010b60d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b610:	8b 00                	mov    (%eax),%eax
c010b612:	01 c2                	add    %eax,%edx
c010b614:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b617:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010b619:	8b 45 08             	mov    0x8(%ebp),%eax
c010b61c:	83 c0 08             	add    $0x8,%eax
c010b61f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b622:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b625:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b628:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b62b:	8b 40 04             	mov    0x4(%eax),%eax
c010b62e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b631:	8b 12                	mov    (%edx),%edx
c010b633:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010b636:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b639:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b63c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b63f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b642:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b645:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b648:	89 10                	mov    %edx,(%eax)
c010b64a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b64d:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b650:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b653:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b656:	89 50 04             	mov    %edx,0x4(%eax)
c010b659:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b65c:	8b 50 04             	mov    0x4(%eax),%edx
c010b65f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b662:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010b664:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b667:	89 04 24             	mov    %eax,(%esp)
c010b66a:	e8 bb fb ff ff       	call   c010b22a <__intr_restore>
}
c010b66f:	c9                   	leave  
c010b670:	c3                   	ret    

c010b671 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010b671:	55                   	push   %ebp
c010b672:	89 e5                	mov    %esp,%ebp
c010b674:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b677:	e8 84 fb ff ff       	call   c010b200 <__intr_save>
c010b67c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b67f:	c7 45 e4 54 1e 1b c0 	movl   $0xc01b1e54,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b686:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b689:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010b68c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010b68f:	81 7d f4 54 1e 1b c0 	cmpl   $0xc01b1e54,-0xc(%ebp)
c010b696:	0f 84 f5 00 00 00    	je     c010b791 <run_timer_list+0x120>
            timer_t *timer = le2timer(le, timer_link);
c010b69c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b69f:	83 e8 08             	sub    $0x8,%eax
c010b6a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010b6a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6a8:	8b 00                	mov    (%eax),%eax
c010b6aa:	85 c0                	test   %eax,%eax
c010b6ac:	75 24                	jne    c010b6d2 <run_timer_list+0x61>
c010b6ae:	c7 44 24 0c dd ea 10 	movl   $0xc010eadd,0xc(%esp)
c010b6b5:	c0 
c010b6b6:	c7 44 24 08 48 ea 10 	movl   $0xc010ea48,0x8(%esp)
c010b6bd:	c0 
c010b6be:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010b6c5:	00 
c010b6c6:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b6cd:	e8 14 57 ff ff       	call   c0100de6 <__panic>
            timer->expires --;
c010b6d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6d5:	8b 00                	mov    (%eax),%eax
c010b6d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b6da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6dd:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010b6df:	e9 a0 00 00 00       	jmp    c010b784 <run_timer_list+0x113>
c010b6e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b6ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b6ed:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010b6f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010b6f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6f6:	8b 40 04             	mov    0x4(%eax),%eax
c010b6f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010b6fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6ff:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b702:	85 c0                	test   %eax,%eax
c010b704:	74 2e                	je     c010b734 <run_timer_list+0xc3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010b706:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b709:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b70c:	85 c0                	test   %eax,%eax
c010b70e:	78 4a                	js     c010b75a <run_timer_list+0xe9>
c010b710:	c7 44 24 0c f4 ea 10 	movl   $0xc010eaf4,0xc(%esp)
c010b717:	c0 
c010b718:	c7 44 24 08 48 ea 10 	movl   $0xc010ea48,0x8(%esp)
c010b71f:	c0 
c010b720:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010b727:	00 
c010b728:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b72f:	e8 b2 56 ff ff       	call   c0100de6 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010b734:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b737:	8b 40 04             	mov    0x4(%eax),%eax
c010b73a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b73e:	c7 44 24 08 18 eb 10 	movl   $0xc010eb18,0x8(%esp)
c010b745:	c0 
c010b746:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010b74d:	00 
c010b74e:	c7 04 24 5d ea 10 c0 	movl   $0xc010ea5d,(%esp)
c010b755:	e8 f8 56 ff ff       	call   c0100e52 <__warn>
                }
                wakeup_proc(proc);
c010b75a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b75d:	89 04 24             	mov    %eax,(%esp)
c010b760:	e8 e6 fb ff ff       	call   c010b34b <wakeup_proc>
                del_timer(timer);
c010b765:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b768:	89 04 24             	mov    %eax,(%esp)
c010b76b:	e8 3d fe ff ff       	call   c010b5ad <del_timer>
                if (le == &timer_list) {
c010b770:	81 7d f4 54 1e 1b c0 	cmpl   $0xc01b1e54,-0xc(%ebp)
c010b777:	75 02                	jne    c010b77b <run_timer_list+0x10a>
                    break;
c010b779:	eb 16                	jmp    c010b791 <run_timer_list+0x120>
                }
                timer = le2timer(le, timer_link);
c010b77b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b77e:	83 e8 08             	sub    $0x8,%eax
c010b781:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010b784:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b787:	8b 00                	mov    (%eax),%eax
c010b789:	85 c0                	test   %eax,%eax
c010b78b:	0f 84 53 ff ff ff    	je     c010b6e4 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010b791:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b796:	89 04 24             	mov    %eax,(%esp)
c010b799:	e8 08 fb ff ff       	call   c010b2a6 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010b79e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7a1:	89 04 24             	mov    %eax,(%esp)
c010b7a4:	e8 81 fa ff ff       	call   c010b22a <__intr_restore>
}
c010b7a9:	c9                   	leave  
c010b7aa:	c3                   	ret    

c010b7ab <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010b7ab:	55                   	push   %ebp
c010b7ac:	89 e5                	mov    %esp,%ebp
c010b7ae:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010b7b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7b4:	8b 00                	mov    (%eax),%eax
c010b7b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010b7b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7bc:	89 04 24             	mov    %eax,(%esp)
c010b7bf:	e8 ff e6 ff ff       	call   c0109ec3 <do_exit>
}
c010b7c4:	c9                   	leave  
c010b7c5:	c3                   	ret    

c010b7c6 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010b7c6:	55                   	push   %ebp
c010b7c7:	89 e5                	mov    %esp,%ebp
c010b7c9:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010b7cc:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b7d1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b7d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010b7d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7da:	8b 40 44             	mov    0x44(%eax),%eax
c010b7dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010b7e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7e3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7ee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010b7f5:	e8 a8 e5 ff ff       	call   c0109da2 <do_fork>
}
c010b7fa:	c9                   	leave  
c010b7fb:	c3                   	ret    

c010b7fc <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010b7fc:	55                   	push   %ebp
c010b7fd:	89 e5                	mov    %esp,%ebp
c010b7ff:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010b802:	8b 45 08             	mov    0x8(%ebp),%eax
c010b805:	8b 00                	mov    (%eax),%eax
c010b807:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010b80a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b80d:	83 c0 04             	add    $0x4,%eax
c010b810:	8b 00                	mov    (%eax),%eax
c010b812:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010b815:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b818:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b81c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b81f:	89 04 24             	mov    %eax,(%esp)
c010b822:	e8 1a f0 ff ff       	call   c010a841 <do_wait>
}
c010b827:	c9                   	leave  
c010b828:	c3                   	ret    

c010b829 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010b829:	55                   	push   %ebp
c010b82a:	89 e5                	mov    %esp,%ebp
c010b82c:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010b82f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b832:	8b 00                	mov    (%eax),%eax
c010b834:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010b837:	8b 45 08             	mov    0x8(%ebp),%eax
c010b83a:	8b 40 04             	mov    0x4(%eax),%eax
c010b83d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010b840:	8b 45 08             	mov    0x8(%ebp),%eax
c010b843:	83 c0 08             	add    $0x8,%eax
c010b846:	8b 00                	mov    (%eax),%eax
c010b848:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010b84b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b84e:	8b 40 0c             	mov    0xc(%eax),%eax
c010b851:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010b854:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b857:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b85b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b85e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b862:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b865:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b869:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b86c:	89 04 24             	mov    %eax,(%esp)
c010b86f:	e8 81 ee ff ff       	call   c010a6f5 <do_execve>
}
c010b874:	c9                   	leave  
c010b875:	c3                   	ret    

c010b876 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010b876:	55                   	push   %ebp
c010b877:	89 e5                	mov    %esp,%ebp
c010b879:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010b87c:	e8 aa ef ff ff       	call   c010a82b <do_yield>
}
c010b881:	c9                   	leave  
c010b882:	c3                   	ret    

c010b883 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010b883:	55                   	push   %ebp
c010b884:	89 e5                	mov    %esp,%ebp
c010b886:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010b889:	8b 45 08             	mov    0x8(%ebp),%eax
c010b88c:	8b 00                	mov    (%eax),%eax
c010b88e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010b891:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b894:	89 04 24             	mov    %eax,(%esp)
c010b897:	e8 39 f1 ff ff       	call   c010a9d5 <do_kill>
}
c010b89c:	c9                   	leave  
c010b89d:	c3                   	ret    

c010b89e <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010b89e:	55                   	push   %ebp
c010b89f:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010b8a1:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b8a6:	8b 40 04             	mov    0x4(%eax),%eax
}
c010b8a9:	5d                   	pop    %ebp
c010b8aa:	c3                   	ret    

c010b8ab <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010b8ab:	55                   	push   %ebp
c010b8ac:	89 e5                	mov    %esp,%ebp
c010b8ae:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010b8b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8b4:	8b 00                	mov    (%eax),%eax
c010b8b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010b8b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8bc:	89 04 24             	mov    %eax,(%esp)
c010b8bf:	e8 ba 4a ff ff       	call   c010037e <cputchar>
    return 0;
c010b8c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b8c9:	c9                   	leave  
c010b8ca:	c3                   	ret    

c010b8cb <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010b8cb:	55                   	push   %ebp
c010b8cc:	89 e5                	mov    %esp,%ebp
c010b8ce:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010b8d1:	e8 11 b3 ff ff       	call   c0106be7 <print_pgdir>
    return 0;
c010b8d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b8db:	c9                   	leave  
c010b8dc:	c3                   	ret    

c010b8dd <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010b8dd:	55                   	push   %ebp
c010b8de:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010b8e0:	a1 78 1e 1b c0       	mov    0xc01b1e78,%eax
}
c010b8e5:	5d                   	pop    %ebp
c010b8e6:	c3                   	ret    

c010b8e7 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010b8e7:	55                   	push   %ebp
c010b8e8:	89 e5                	mov    %esp,%ebp
c010b8ea:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010b8ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f0:	8b 00                	mov    (%eax),%eax
c010b8f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010b8f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8f8:	89 04 24             	mov    %eax,(%esp)
c010b8fb:	e8 30 f5 ff ff       	call   c010ae30 <lab6_set_priority>
    return 0;
c010b900:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b905:	c9                   	leave  
c010b906:	c3                   	ret    

c010b907 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010b907:	55                   	push   %ebp
c010b908:	89 e5                	mov    %esp,%ebp
c010b90a:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010b90d:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b912:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b915:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010b918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b91b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010b91e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010b921:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b925:	78 60                	js     c010b987 <syscall+0x80>
c010b927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b92a:	3d ff 00 00 00       	cmp    $0xff,%eax
c010b92f:	77 56                	ja     c010b987 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010b931:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b934:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010b93b:	85 c0                	test   %eax,%eax
c010b93d:	74 48                	je     c010b987 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010b93f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b942:	8b 40 14             	mov    0x14(%eax),%eax
c010b945:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010b948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b94b:	8b 40 18             	mov    0x18(%eax),%eax
c010b94e:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010b951:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b954:	8b 40 10             	mov    0x10(%eax),%eax
c010b957:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010b95a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b95d:	8b 00                	mov    (%eax),%eax
c010b95f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010b962:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b965:	8b 40 04             	mov    0x4(%eax),%eax
c010b968:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010b96b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b96e:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010b975:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010b978:	89 14 24             	mov    %edx,(%esp)
c010b97b:	ff d0                	call   *%eax
c010b97d:	89 c2                	mov    %eax,%edx
c010b97f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b982:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010b985:	eb 46                	jmp    c010b9cd <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010b987:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b98a:	89 04 24             	mov    %eax,(%esp)
c010b98d:	e8 6f 6a ff ff       	call   c0102401 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010b992:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b997:	8d 50 48             	lea    0x48(%eax),%edx
c010b99a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b99f:	8b 40 04             	mov    0x4(%eax),%eax
c010b9a2:	89 54 24 14          	mov    %edx,0x14(%esp)
c010b9a6:	89 44 24 10          	mov    %eax,0x10(%esp)
c010b9aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9ad:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b9b1:	c7 44 24 08 38 eb 10 	movl   $0xc010eb38,0x8(%esp)
c010b9b8:	c0 
c010b9b9:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010b9c0:	00 
c010b9c1:	c7 04 24 64 eb 10 c0 	movl   $0xc010eb64,(%esp)
c010b9c8:	e8 19 54 ff ff       	call   c0100de6 <__panic>
            num, current->pid, current->name);
}
c010b9cd:	c9                   	leave  
c010b9ce:	c3                   	ret    

c010b9cf <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010b9cf:	55                   	push   %ebp
c010b9d0:	89 e5                	mov    %esp,%ebp
c010b9d2:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010b9d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9d8:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010b9de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010b9e1:	b8 20 00 00 00       	mov    $0x20,%eax
c010b9e6:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b9e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b9ec:	89 c1                	mov    %eax,%ecx
c010b9ee:	d3 ea                	shr    %cl,%edx
c010b9f0:	89 d0                	mov    %edx,%eax
}
c010b9f2:	c9                   	leave  
c010b9f3:	c3                   	ret    

c010b9f4 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b9f4:	55                   	push   %ebp
c010b9f5:	89 e5                	mov    %esp,%ebp
c010b9f7:	83 ec 58             	sub    $0x58,%esp
c010b9fa:	8b 45 10             	mov    0x10(%ebp),%eax
c010b9fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ba00:	8b 45 14             	mov    0x14(%ebp),%eax
c010ba03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010ba06:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba09:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ba0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ba0f:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010ba12:	8b 45 18             	mov    0x18(%ebp),%eax
c010ba15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ba18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ba1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ba21:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010ba24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ba2e:	74 1c                	je     c010ba4c <printnum+0x58>
c010ba30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba33:	ba 00 00 00 00       	mov    $0x0,%edx
c010ba38:	f7 75 e4             	divl   -0x1c(%ebp)
c010ba3b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ba3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba41:	ba 00 00 00 00       	mov    $0x0,%edx
c010ba46:	f7 75 e4             	divl   -0x1c(%ebp)
c010ba49:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ba4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ba4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ba52:	f7 75 e4             	divl   -0x1c(%ebp)
c010ba55:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ba58:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010ba5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ba5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ba61:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ba64:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ba67:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ba6a:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010ba6d:	8b 45 18             	mov    0x18(%ebp),%eax
c010ba70:	ba 00 00 00 00       	mov    $0x0,%edx
c010ba75:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010ba78:	77 56                	ja     c010bad0 <printnum+0xdc>
c010ba7a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010ba7d:	72 05                	jb     c010ba84 <printnum+0x90>
c010ba7f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010ba82:	77 4c                	ja     c010bad0 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010ba84:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010ba87:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ba8a:	8b 45 20             	mov    0x20(%ebp),%eax
c010ba8d:	89 44 24 18          	mov    %eax,0x18(%esp)
c010ba91:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ba95:	8b 45 18             	mov    0x18(%ebp),%eax
c010ba98:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ba9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba9f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010baa2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010baa6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010baaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010baad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bab1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bab4:	89 04 24             	mov    %eax,(%esp)
c010bab7:	e8 38 ff ff ff       	call   c010b9f4 <printnum>
c010babc:	eb 1c                	jmp    c010bada <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010babe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bac1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bac5:	8b 45 20             	mov    0x20(%ebp),%eax
c010bac8:	89 04 24             	mov    %eax,(%esp)
c010bacb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bace:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010bad0:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010bad4:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010bad8:	7f e4                	jg     c010babe <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010bada:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010badd:	05 84 ec 10 c0       	add    $0xc010ec84,%eax
c010bae2:	0f b6 00             	movzbl (%eax),%eax
c010bae5:	0f be c0             	movsbl %al,%eax
c010bae8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010baeb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010baef:	89 04 24             	mov    %eax,(%esp)
c010baf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010baf5:	ff d0                	call   *%eax
}
c010baf7:	c9                   	leave  
c010baf8:	c3                   	ret    

c010baf9 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010baf9:	55                   	push   %ebp
c010bafa:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010bafc:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bb00:	7e 14                	jle    c010bb16 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010bb02:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb05:	8b 00                	mov    (%eax),%eax
c010bb07:	8d 48 08             	lea    0x8(%eax),%ecx
c010bb0a:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb0d:	89 0a                	mov    %ecx,(%edx)
c010bb0f:	8b 50 04             	mov    0x4(%eax),%edx
c010bb12:	8b 00                	mov    (%eax),%eax
c010bb14:	eb 30                	jmp    c010bb46 <getuint+0x4d>
    }
    else if (lflag) {
c010bb16:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb1a:	74 16                	je     c010bb32 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010bb1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb1f:	8b 00                	mov    (%eax),%eax
c010bb21:	8d 48 04             	lea    0x4(%eax),%ecx
c010bb24:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb27:	89 0a                	mov    %ecx,(%edx)
c010bb29:	8b 00                	mov    (%eax),%eax
c010bb2b:	ba 00 00 00 00       	mov    $0x0,%edx
c010bb30:	eb 14                	jmp    c010bb46 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010bb32:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb35:	8b 00                	mov    (%eax),%eax
c010bb37:	8d 48 04             	lea    0x4(%eax),%ecx
c010bb3a:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb3d:	89 0a                	mov    %ecx,(%edx)
c010bb3f:	8b 00                	mov    (%eax),%eax
c010bb41:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010bb46:	5d                   	pop    %ebp
c010bb47:	c3                   	ret    

c010bb48 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010bb48:	55                   	push   %ebp
c010bb49:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010bb4b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bb4f:	7e 14                	jle    c010bb65 <getint+0x1d>
        return va_arg(*ap, long long);
c010bb51:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb54:	8b 00                	mov    (%eax),%eax
c010bb56:	8d 48 08             	lea    0x8(%eax),%ecx
c010bb59:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb5c:	89 0a                	mov    %ecx,(%edx)
c010bb5e:	8b 50 04             	mov    0x4(%eax),%edx
c010bb61:	8b 00                	mov    (%eax),%eax
c010bb63:	eb 28                	jmp    c010bb8d <getint+0x45>
    }
    else if (lflag) {
c010bb65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb69:	74 12                	je     c010bb7d <getint+0x35>
        return va_arg(*ap, long);
c010bb6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb6e:	8b 00                	mov    (%eax),%eax
c010bb70:	8d 48 04             	lea    0x4(%eax),%ecx
c010bb73:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb76:	89 0a                	mov    %ecx,(%edx)
c010bb78:	8b 00                	mov    (%eax),%eax
c010bb7a:	99                   	cltd   
c010bb7b:	eb 10                	jmp    c010bb8d <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010bb7d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb80:	8b 00                	mov    (%eax),%eax
c010bb82:	8d 48 04             	lea    0x4(%eax),%ecx
c010bb85:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb88:	89 0a                	mov    %ecx,(%edx)
c010bb8a:	8b 00                	mov    (%eax),%eax
c010bb8c:	99                   	cltd   
    }
}
c010bb8d:	5d                   	pop    %ebp
c010bb8e:	c3                   	ret    

c010bb8f <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010bb8f:	55                   	push   %ebp
c010bb90:	89 e5                	mov    %esp,%ebp
c010bb92:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010bb95:	8d 45 14             	lea    0x14(%ebp),%eax
c010bb98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010bb9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bba2:	8b 45 10             	mov    0x10(%ebp),%eax
c010bba5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bba9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbb3:	89 04 24             	mov    %eax,(%esp)
c010bbb6:	e8 02 00 00 00       	call   c010bbbd <vprintfmt>
    va_end(ap);
}
c010bbbb:	c9                   	leave  
c010bbbc:	c3                   	ret    

c010bbbd <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010bbbd:	55                   	push   %ebp
c010bbbe:	89 e5                	mov    %esp,%ebp
c010bbc0:	56                   	push   %esi
c010bbc1:	53                   	push   %ebx
c010bbc2:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bbc5:	eb 18                	jmp    c010bbdf <vprintfmt+0x22>
            if (ch == '\0') {
c010bbc7:	85 db                	test   %ebx,%ebx
c010bbc9:	75 05                	jne    c010bbd0 <vprintfmt+0x13>
                return;
c010bbcb:	e9 d1 03 00 00       	jmp    c010bfa1 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010bbd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbd7:	89 1c 24             	mov    %ebx,(%esp)
c010bbda:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbdd:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bbdf:	8b 45 10             	mov    0x10(%ebp),%eax
c010bbe2:	8d 50 01             	lea    0x1(%eax),%edx
c010bbe5:	89 55 10             	mov    %edx,0x10(%ebp)
c010bbe8:	0f b6 00             	movzbl (%eax),%eax
c010bbeb:	0f b6 d8             	movzbl %al,%ebx
c010bbee:	83 fb 25             	cmp    $0x25,%ebx
c010bbf1:	75 d4                	jne    c010bbc7 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010bbf3:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010bbf7:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010bbfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc01:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010bc04:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010bc0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bc0e:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010bc11:	8b 45 10             	mov    0x10(%ebp),%eax
c010bc14:	8d 50 01             	lea    0x1(%eax),%edx
c010bc17:	89 55 10             	mov    %edx,0x10(%ebp)
c010bc1a:	0f b6 00             	movzbl (%eax),%eax
c010bc1d:	0f b6 d8             	movzbl %al,%ebx
c010bc20:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010bc23:	83 f8 55             	cmp    $0x55,%eax
c010bc26:	0f 87 44 03 00 00    	ja     c010bf70 <vprintfmt+0x3b3>
c010bc2c:	8b 04 85 a8 ec 10 c0 	mov    -0x3fef1358(,%eax,4),%eax
c010bc33:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010bc35:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010bc39:	eb d6                	jmp    c010bc11 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010bc3b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010bc3f:	eb d0                	jmp    c010bc11 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bc41:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010bc48:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bc4b:	89 d0                	mov    %edx,%eax
c010bc4d:	c1 e0 02             	shl    $0x2,%eax
c010bc50:	01 d0                	add    %edx,%eax
c010bc52:	01 c0                	add    %eax,%eax
c010bc54:	01 d8                	add    %ebx,%eax
c010bc56:	83 e8 30             	sub    $0x30,%eax
c010bc59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010bc5c:	8b 45 10             	mov    0x10(%ebp),%eax
c010bc5f:	0f b6 00             	movzbl (%eax),%eax
c010bc62:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010bc65:	83 fb 2f             	cmp    $0x2f,%ebx
c010bc68:	7e 0b                	jle    c010bc75 <vprintfmt+0xb8>
c010bc6a:	83 fb 39             	cmp    $0x39,%ebx
c010bc6d:	7f 06                	jg     c010bc75 <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bc6f:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010bc73:	eb d3                	jmp    c010bc48 <vprintfmt+0x8b>
            goto process_precision;
c010bc75:	eb 33                	jmp    c010bcaa <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010bc77:	8b 45 14             	mov    0x14(%ebp),%eax
c010bc7a:	8d 50 04             	lea    0x4(%eax),%edx
c010bc7d:	89 55 14             	mov    %edx,0x14(%ebp)
c010bc80:	8b 00                	mov    (%eax),%eax
c010bc82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010bc85:	eb 23                	jmp    c010bcaa <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010bc87:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bc8b:	79 0c                	jns    c010bc99 <vprintfmt+0xdc>
                width = 0;
c010bc8d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010bc94:	e9 78 ff ff ff       	jmp    c010bc11 <vprintfmt+0x54>
c010bc99:	e9 73 ff ff ff       	jmp    c010bc11 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010bc9e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010bca5:	e9 67 ff ff ff       	jmp    c010bc11 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010bcaa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bcae:	79 12                	jns    c010bcc2 <vprintfmt+0x105>
                width = precision, precision = -1;
c010bcb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bcb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bcb6:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010bcbd:	e9 4f ff ff ff       	jmp    c010bc11 <vprintfmt+0x54>
c010bcc2:	e9 4a ff ff ff       	jmp    c010bc11 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010bcc7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010bccb:	e9 41 ff ff ff       	jmp    c010bc11 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010bcd0:	8b 45 14             	mov    0x14(%ebp),%eax
c010bcd3:	8d 50 04             	lea    0x4(%eax),%edx
c010bcd6:	89 55 14             	mov    %edx,0x14(%ebp)
c010bcd9:	8b 00                	mov    (%eax),%eax
c010bcdb:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bcde:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bce2:	89 04 24             	mov    %eax,(%esp)
c010bce5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bce8:	ff d0                	call   *%eax
            break;
c010bcea:	e9 ac 02 00 00       	jmp    c010bf9b <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010bcef:	8b 45 14             	mov    0x14(%ebp),%eax
c010bcf2:	8d 50 04             	lea    0x4(%eax),%edx
c010bcf5:	89 55 14             	mov    %edx,0x14(%ebp)
c010bcf8:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010bcfa:	85 db                	test   %ebx,%ebx
c010bcfc:	79 02                	jns    c010bd00 <vprintfmt+0x143>
                err = -err;
c010bcfe:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010bd00:	83 fb 18             	cmp    $0x18,%ebx
c010bd03:	7f 0b                	jg     c010bd10 <vprintfmt+0x153>
c010bd05:	8b 34 9d 20 ec 10 c0 	mov    -0x3fef13e0(,%ebx,4),%esi
c010bd0c:	85 f6                	test   %esi,%esi
c010bd0e:	75 23                	jne    c010bd33 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010bd10:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010bd14:	c7 44 24 08 95 ec 10 	movl   $0xc010ec95,0x8(%esp)
c010bd1b:	c0 
c010bd1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd23:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd26:	89 04 24             	mov    %eax,(%esp)
c010bd29:	e8 61 fe ff ff       	call   c010bb8f <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010bd2e:	e9 68 02 00 00       	jmp    c010bf9b <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010bd33:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bd37:	c7 44 24 08 9e ec 10 	movl   $0xc010ec9e,0x8(%esp)
c010bd3e:	c0 
c010bd3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd42:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd46:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd49:	89 04 24             	mov    %eax,(%esp)
c010bd4c:	e8 3e fe ff ff       	call   c010bb8f <printfmt>
            }
            break;
c010bd51:	e9 45 02 00 00       	jmp    c010bf9b <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010bd56:	8b 45 14             	mov    0x14(%ebp),%eax
c010bd59:	8d 50 04             	lea    0x4(%eax),%edx
c010bd5c:	89 55 14             	mov    %edx,0x14(%ebp)
c010bd5f:	8b 30                	mov    (%eax),%esi
c010bd61:	85 f6                	test   %esi,%esi
c010bd63:	75 05                	jne    c010bd6a <vprintfmt+0x1ad>
                p = "(null)";
c010bd65:	be a1 ec 10 c0       	mov    $0xc010eca1,%esi
            }
            if (width > 0 && padc != '-') {
c010bd6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bd6e:	7e 3e                	jle    c010bdae <vprintfmt+0x1f1>
c010bd70:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010bd74:	74 38                	je     c010bdae <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010bd76:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010bd79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd80:	89 34 24             	mov    %esi,(%esp)
c010bd83:	e8 ed 03 00 00       	call   c010c175 <strnlen>
c010bd88:	29 c3                	sub    %eax,%ebx
c010bd8a:	89 d8                	mov    %ebx,%eax
c010bd8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bd8f:	eb 17                	jmp    c010bda8 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010bd91:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010bd95:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bd98:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bd9c:	89 04 24             	mov    %eax,(%esp)
c010bd9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bda2:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010bda4:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bda8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bdac:	7f e3                	jg     c010bd91 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010bdae:	eb 38                	jmp    c010bde8 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010bdb0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010bdb4:	74 1f                	je     c010bdd5 <vprintfmt+0x218>
c010bdb6:	83 fb 1f             	cmp    $0x1f,%ebx
c010bdb9:	7e 05                	jle    c010bdc0 <vprintfmt+0x203>
c010bdbb:	83 fb 7e             	cmp    $0x7e,%ebx
c010bdbe:	7e 15                	jle    c010bdd5 <vprintfmt+0x218>
                    putch('?', putdat);
c010bdc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdc3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bdc7:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010bdce:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd1:	ff d0                	call   *%eax
c010bdd3:	eb 0f                	jmp    c010bde4 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010bdd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdd8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bddc:	89 1c 24             	mov    %ebx,(%esp)
c010bddf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bde2:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010bde4:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bde8:	89 f0                	mov    %esi,%eax
c010bdea:	8d 70 01             	lea    0x1(%eax),%esi
c010bded:	0f b6 00             	movzbl (%eax),%eax
c010bdf0:	0f be d8             	movsbl %al,%ebx
c010bdf3:	85 db                	test   %ebx,%ebx
c010bdf5:	74 10                	je     c010be07 <vprintfmt+0x24a>
c010bdf7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bdfb:	78 b3                	js     c010bdb0 <vprintfmt+0x1f3>
c010bdfd:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010be01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010be05:	79 a9                	jns    c010bdb0 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010be07:	eb 17                	jmp    c010be20 <vprintfmt+0x263>
                putch(' ', putdat);
c010be09:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be10:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010be17:	8b 45 08             	mov    0x8(%ebp),%eax
c010be1a:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010be1c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010be20:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010be24:	7f e3                	jg     c010be09 <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010be26:	e9 70 01 00 00       	jmp    c010bf9b <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010be2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010be2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be32:	8d 45 14             	lea    0x14(%ebp),%eax
c010be35:	89 04 24             	mov    %eax,(%esp)
c010be38:	e8 0b fd ff ff       	call   c010bb48 <getint>
c010be3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be40:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010be43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be46:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010be49:	85 d2                	test   %edx,%edx
c010be4b:	79 26                	jns    c010be73 <vprintfmt+0x2b6>
                putch('-', putdat);
c010be4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be50:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be54:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010be5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be5e:	ff d0                	call   *%eax
                num = -(long long)num;
c010be60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be63:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010be66:	f7 d8                	neg    %eax
c010be68:	83 d2 00             	adc    $0x0,%edx
c010be6b:	f7 da                	neg    %edx
c010be6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be70:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010be73:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010be7a:	e9 a8 00 00 00       	jmp    c010bf27 <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010be7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010be82:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be86:	8d 45 14             	lea    0x14(%ebp),%eax
c010be89:	89 04 24             	mov    %eax,(%esp)
c010be8c:	e8 68 fc ff ff       	call   c010baf9 <getuint>
c010be91:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be94:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010be97:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010be9e:	e9 84 00 00 00       	jmp    c010bf27 <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010bea3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bea6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010beaa:	8d 45 14             	lea    0x14(%ebp),%eax
c010bead:	89 04 24             	mov    %eax,(%esp)
c010beb0:	e8 44 fc ff ff       	call   c010baf9 <getuint>
c010beb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010beb8:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010bebb:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010bec2:	eb 63                	jmp    c010bf27 <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010bec4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bec7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010becb:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010bed2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bed5:	ff d0                	call   *%eax
            putch('x', putdat);
c010bed7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010beda:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bede:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010bee5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee8:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010beea:	8b 45 14             	mov    0x14(%ebp),%eax
c010beed:	8d 50 04             	lea    0x4(%eax),%edx
c010bef0:	89 55 14             	mov    %edx,0x14(%ebp)
c010bef3:	8b 00                	mov    (%eax),%eax
c010bef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bef8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010beff:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010bf06:	eb 1f                	jmp    c010bf27 <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010bf08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bf0b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf0f:	8d 45 14             	lea    0x14(%ebp),%eax
c010bf12:	89 04 24             	mov    %eax,(%esp)
c010bf15:	e8 df fb ff ff       	call   c010baf9 <getuint>
c010bf1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf1d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010bf20:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010bf27:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010bf2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf2e:	89 54 24 18          	mov    %edx,0x18(%esp)
c010bf32:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bf35:	89 54 24 14          	mov    %edx,0x14(%esp)
c010bf39:	89 44 24 10          	mov    %eax,0x10(%esp)
c010bf3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf40:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bf43:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf47:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf52:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf55:	89 04 24             	mov    %eax,(%esp)
c010bf58:	e8 97 fa ff ff       	call   c010b9f4 <printnum>
            break;
c010bf5d:	eb 3c                	jmp    c010bf9b <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010bf5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf62:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf66:	89 1c 24             	mov    %ebx,(%esp)
c010bf69:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf6c:	ff d0                	call   *%eax
            break;
c010bf6e:	eb 2b                	jmp    c010bf9b <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010bf70:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf73:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf77:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010bf7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf81:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010bf83:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010bf87:	eb 04                	jmp    c010bf8d <vprintfmt+0x3d0>
c010bf89:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010bf8d:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf90:	83 e8 01             	sub    $0x1,%eax
c010bf93:	0f b6 00             	movzbl (%eax),%eax
c010bf96:	3c 25                	cmp    $0x25,%al
c010bf98:	75 ef                	jne    c010bf89 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010bf9a:	90                   	nop
        }
    }
c010bf9b:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bf9c:	e9 3e fc ff ff       	jmp    c010bbdf <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010bfa1:	83 c4 40             	add    $0x40,%esp
c010bfa4:	5b                   	pop    %ebx
c010bfa5:	5e                   	pop    %esi
c010bfa6:	5d                   	pop    %ebp
c010bfa7:	c3                   	ret    

c010bfa8 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010bfa8:	55                   	push   %ebp
c010bfa9:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010bfab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfae:	8b 40 08             	mov    0x8(%eax),%eax
c010bfb1:	8d 50 01             	lea    0x1(%eax),%edx
c010bfb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfb7:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010bfba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfbd:	8b 10                	mov    (%eax),%edx
c010bfbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfc2:	8b 40 04             	mov    0x4(%eax),%eax
c010bfc5:	39 c2                	cmp    %eax,%edx
c010bfc7:	73 12                	jae    c010bfdb <sprintputch+0x33>
        *b->buf ++ = ch;
c010bfc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfcc:	8b 00                	mov    (%eax),%eax
c010bfce:	8d 48 01             	lea    0x1(%eax),%ecx
c010bfd1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bfd4:	89 0a                	mov    %ecx,(%edx)
c010bfd6:	8b 55 08             	mov    0x8(%ebp),%edx
c010bfd9:	88 10                	mov    %dl,(%eax)
    }
}
c010bfdb:	5d                   	pop    %ebp
c010bfdc:	c3                   	ret    

c010bfdd <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010bfdd:	55                   	push   %ebp
c010bfde:	89 e5                	mov    %esp,%ebp
c010bfe0:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010bfe3:	8d 45 14             	lea    0x14(%ebp),%eax
c010bfe6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010bfe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bff0:	8b 45 10             	mov    0x10(%ebp),%eax
c010bff3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bff7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bffa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bffe:	8b 45 08             	mov    0x8(%ebp),%eax
c010c001:	89 04 24             	mov    %eax,(%esp)
c010c004:	e8 08 00 00 00       	call   c010c011 <vsnprintf>
c010c009:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010c00c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c00f:	c9                   	leave  
c010c010:	c3                   	ret    

c010c011 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010c011:	55                   	push   %ebp
c010c012:	89 e5                	mov    %esp,%ebp
c010c014:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010c017:	8b 45 08             	mov    0x8(%ebp),%eax
c010c01a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c01d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c020:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c023:	8b 45 08             	mov    0x8(%ebp),%eax
c010c026:	01 d0                	add    %edx,%eax
c010c028:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c02b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010c032:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c036:	74 0a                	je     c010c042 <vsnprintf+0x31>
c010c038:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c03b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c03e:	39 c2                	cmp    %eax,%edx
c010c040:	76 07                	jbe    c010c049 <vsnprintf+0x38>
        return -E_INVAL;
c010c042:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010c047:	eb 2a                	jmp    c010c073 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010c049:	8b 45 14             	mov    0x14(%ebp),%eax
c010c04c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c050:	8b 45 10             	mov    0x10(%ebp),%eax
c010c053:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c057:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010c05a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c05e:	c7 04 24 a8 bf 10 c0 	movl   $0xc010bfa8,(%esp)
c010c065:	e8 53 fb ff ff       	call   c010bbbd <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010c06a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c06d:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010c070:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c073:	c9                   	leave  
c010c074:	c3                   	ret    

c010c075 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010c075:	55                   	push   %ebp
c010c076:	89 e5                	mov    %esp,%ebp
c010c078:	57                   	push   %edi
c010c079:	56                   	push   %esi
c010c07a:	53                   	push   %ebx
c010c07b:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010c07e:	a1 a0 de 12 c0       	mov    0xc012dea0,%eax
c010c083:	8b 15 a4 de 12 c0    	mov    0xc012dea4,%edx
c010c089:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010c08f:	6b f0 05             	imul   $0x5,%eax,%esi
c010c092:	01 f7                	add    %esi,%edi
c010c094:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010c099:	f7 e6                	mul    %esi
c010c09b:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010c09e:	89 f2                	mov    %esi,%edx
c010c0a0:	83 c0 0b             	add    $0xb,%eax
c010c0a3:	83 d2 00             	adc    $0x0,%edx
c010c0a6:	89 c7                	mov    %eax,%edi
c010c0a8:	83 e7 ff             	and    $0xffffffff,%edi
c010c0ab:	89 f9                	mov    %edi,%ecx
c010c0ad:	0f b7 da             	movzwl %dx,%ebx
c010c0b0:	89 0d a0 de 12 c0    	mov    %ecx,0xc012dea0
c010c0b6:	89 1d a4 de 12 c0    	mov    %ebx,0xc012dea4
    unsigned long long result = (next >> 12);
c010c0bc:	a1 a0 de 12 c0       	mov    0xc012dea0,%eax
c010c0c1:	8b 15 a4 de 12 c0    	mov    0xc012dea4,%edx
c010c0c7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010c0cb:	c1 ea 0c             	shr    $0xc,%edx
c010c0ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c0d1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010c0d4:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010c0db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c0de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c0e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c0e4:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c0e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c0ed:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c0f1:	74 1c                	je     c010c10f <rand+0x9a>
c010c0f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0f6:	ba 00 00 00 00       	mov    $0x0,%edx
c010c0fb:	f7 75 dc             	divl   -0x24(%ebp)
c010c0fe:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c101:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c104:	ba 00 00 00 00       	mov    $0x0,%edx
c010c109:	f7 75 dc             	divl   -0x24(%ebp)
c010c10c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c10f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c112:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c115:	f7 75 dc             	divl   -0x24(%ebp)
c010c118:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c11b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c11e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c121:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c124:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c127:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c12a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010c12d:	83 c4 24             	add    $0x24,%esp
c010c130:	5b                   	pop    %ebx
c010c131:	5e                   	pop    %esi
c010c132:	5f                   	pop    %edi
c010c133:	5d                   	pop    %ebp
c010c134:	c3                   	ret    

c010c135 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010c135:	55                   	push   %ebp
c010c136:	89 e5                	mov    %esp,%ebp
    next = seed;
c010c138:	8b 45 08             	mov    0x8(%ebp),%eax
c010c13b:	ba 00 00 00 00       	mov    $0x0,%edx
c010c140:	a3 a0 de 12 c0       	mov    %eax,0xc012dea0
c010c145:	89 15 a4 de 12 c0    	mov    %edx,0xc012dea4
}
c010c14b:	5d                   	pop    %ebp
c010c14c:	c3                   	ret    

c010c14d <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c14d:	55                   	push   %ebp
c010c14e:	89 e5                	mov    %esp,%ebp
c010c150:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c153:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c15a:	eb 04                	jmp    c010c160 <strlen+0x13>
        cnt ++;
c010c15c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c160:	8b 45 08             	mov    0x8(%ebp),%eax
c010c163:	8d 50 01             	lea    0x1(%eax),%edx
c010c166:	89 55 08             	mov    %edx,0x8(%ebp)
c010c169:	0f b6 00             	movzbl (%eax),%eax
c010c16c:	84 c0                	test   %al,%al
c010c16e:	75 ec                	jne    c010c15c <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c170:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c173:	c9                   	leave  
c010c174:	c3                   	ret    

c010c175 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c175:	55                   	push   %ebp
c010c176:	89 e5                	mov    %esp,%ebp
c010c178:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c17b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c182:	eb 04                	jmp    c010c188 <strnlen+0x13>
        cnt ++;
c010c184:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c188:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c18b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c18e:	73 10                	jae    c010c1a0 <strnlen+0x2b>
c010c190:	8b 45 08             	mov    0x8(%ebp),%eax
c010c193:	8d 50 01             	lea    0x1(%eax),%edx
c010c196:	89 55 08             	mov    %edx,0x8(%ebp)
c010c199:	0f b6 00             	movzbl (%eax),%eax
c010c19c:	84 c0                	test   %al,%al
c010c19e:	75 e4                	jne    c010c184 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c1a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c1a3:	c9                   	leave  
c010c1a4:	c3                   	ret    

c010c1a5 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c1a5:	55                   	push   %ebp
c010c1a6:	89 e5                	mov    %esp,%ebp
c010c1a8:	57                   	push   %edi
c010c1a9:	56                   	push   %esi
c010c1aa:	83 ec 20             	sub    $0x20,%esp
c010c1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c1b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c1b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c1bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1bf:	89 d1                	mov    %edx,%ecx
c010c1c1:	89 c2                	mov    %eax,%edx
c010c1c3:	89 ce                	mov    %ecx,%esi
c010c1c5:	89 d7                	mov    %edx,%edi
c010c1c7:	ac                   	lods   %ds:(%esi),%al
c010c1c8:	aa                   	stos   %al,%es:(%edi)
c010c1c9:	84 c0                	test   %al,%al
c010c1cb:	75 fa                	jne    c010c1c7 <strcpy+0x22>
c010c1cd:	89 fa                	mov    %edi,%edx
c010c1cf:	89 f1                	mov    %esi,%ecx
c010c1d1:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c1d4:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c1d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c1da:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c1dd:	83 c4 20             	add    $0x20,%esp
c010c1e0:	5e                   	pop    %esi
c010c1e1:	5f                   	pop    %edi
c010c1e2:	5d                   	pop    %ebp
c010c1e3:	c3                   	ret    

c010c1e4 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c1e4:	55                   	push   %ebp
c010c1e5:	89 e5                	mov    %esp,%ebp
c010c1e7:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c1ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c1f0:	eb 21                	jmp    c010c213 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c1f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1f5:	0f b6 10             	movzbl (%eax),%edx
c010c1f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c1fb:	88 10                	mov    %dl,(%eax)
c010c1fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c200:	0f b6 00             	movzbl (%eax),%eax
c010c203:	84 c0                	test   %al,%al
c010c205:	74 04                	je     c010c20b <strncpy+0x27>
            src ++;
c010c207:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c20b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c20f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c213:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c217:	75 d9                	jne    c010c1f2 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c219:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c21c:	c9                   	leave  
c010c21d:	c3                   	ret    

c010c21e <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c21e:	55                   	push   %ebp
c010c21f:	89 e5                	mov    %esp,%ebp
c010c221:	57                   	push   %edi
c010c222:	56                   	push   %esi
c010c223:	83 ec 20             	sub    $0x20,%esp
c010c226:	8b 45 08             	mov    0x8(%ebp),%eax
c010c229:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c22c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c22f:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c232:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c235:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c238:	89 d1                	mov    %edx,%ecx
c010c23a:	89 c2                	mov    %eax,%edx
c010c23c:	89 ce                	mov    %ecx,%esi
c010c23e:	89 d7                	mov    %edx,%edi
c010c240:	ac                   	lods   %ds:(%esi),%al
c010c241:	ae                   	scas   %es:(%edi),%al
c010c242:	75 08                	jne    c010c24c <strcmp+0x2e>
c010c244:	84 c0                	test   %al,%al
c010c246:	75 f8                	jne    c010c240 <strcmp+0x22>
c010c248:	31 c0                	xor    %eax,%eax
c010c24a:	eb 04                	jmp    c010c250 <strcmp+0x32>
c010c24c:	19 c0                	sbb    %eax,%eax
c010c24e:	0c 01                	or     $0x1,%al
c010c250:	89 fa                	mov    %edi,%edx
c010c252:	89 f1                	mov    %esi,%ecx
c010c254:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c257:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c25a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c25d:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c260:	83 c4 20             	add    $0x20,%esp
c010c263:	5e                   	pop    %esi
c010c264:	5f                   	pop    %edi
c010c265:	5d                   	pop    %ebp
c010c266:	c3                   	ret    

c010c267 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c267:	55                   	push   %ebp
c010c268:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c26a:	eb 0c                	jmp    c010c278 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c26c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c270:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c274:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c278:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c27c:	74 1a                	je     c010c298 <strncmp+0x31>
c010c27e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c281:	0f b6 00             	movzbl (%eax),%eax
c010c284:	84 c0                	test   %al,%al
c010c286:	74 10                	je     c010c298 <strncmp+0x31>
c010c288:	8b 45 08             	mov    0x8(%ebp),%eax
c010c28b:	0f b6 10             	movzbl (%eax),%edx
c010c28e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c291:	0f b6 00             	movzbl (%eax),%eax
c010c294:	38 c2                	cmp    %al,%dl
c010c296:	74 d4                	je     c010c26c <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c298:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c29c:	74 18                	je     c010c2b6 <strncmp+0x4f>
c010c29e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2a1:	0f b6 00             	movzbl (%eax),%eax
c010c2a4:	0f b6 d0             	movzbl %al,%edx
c010c2a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2aa:	0f b6 00             	movzbl (%eax),%eax
c010c2ad:	0f b6 c0             	movzbl %al,%eax
c010c2b0:	29 c2                	sub    %eax,%edx
c010c2b2:	89 d0                	mov    %edx,%eax
c010c2b4:	eb 05                	jmp    c010c2bb <strncmp+0x54>
c010c2b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c2bb:	5d                   	pop    %ebp
c010c2bc:	c3                   	ret    

c010c2bd <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c2bd:	55                   	push   %ebp
c010c2be:	89 e5                	mov    %esp,%ebp
c010c2c0:	83 ec 04             	sub    $0x4,%esp
c010c2c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2c6:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c2c9:	eb 14                	jmp    c010c2df <strchr+0x22>
        if (*s == c) {
c010c2cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ce:	0f b6 00             	movzbl (%eax),%eax
c010c2d1:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c2d4:	75 05                	jne    c010c2db <strchr+0x1e>
            return (char *)s;
c010c2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2d9:	eb 13                	jmp    c010c2ee <strchr+0x31>
        }
        s ++;
c010c2db:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c2df:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e2:	0f b6 00             	movzbl (%eax),%eax
c010c2e5:	84 c0                	test   %al,%al
c010c2e7:	75 e2                	jne    c010c2cb <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c2e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c2ee:	c9                   	leave  
c010c2ef:	c3                   	ret    

c010c2f0 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c2f0:	55                   	push   %ebp
c010c2f1:	89 e5                	mov    %esp,%ebp
c010c2f3:	83 ec 04             	sub    $0x4,%esp
c010c2f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2f9:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c2fc:	eb 11                	jmp    c010c30f <strfind+0x1f>
        if (*s == c) {
c010c2fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010c301:	0f b6 00             	movzbl (%eax),%eax
c010c304:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c307:	75 02                	jne    c010c30b <strfind+0x1b>
            break;
c010c309:	eb 0e                	jmp    c010c319 <strfind+0x29>
        }
        s ++;
c010c30b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c30f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c312:	0f b6 00             	movzbl (%eax),%eax
c010c315:	84 c0                	test   %al,%al
c010c317:	75 e5                	jne    c010c2fe <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010c319:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c31c:	c9                   	leave  
c010c31d:	c3                   	ret    

c010c31e <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c31e:	55                   	push   %ebp
c010c31f:	89 e5                	mov    %esp,%ebp
c010c321:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c324:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c32b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c332:	eb 04                	jmp    c010c338 <strtol+0x1a>
        s ++;
c010c334:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c338:	8b 45 08             	mov    0x8(%ebp),%eax
c010c33b:	0f b6 00             	movzbl (%eax),%eax
c010c33e:	3c 20                	cmp    $0x20,%al
c010c340:	74 f2                	je     c010c334 <strtol+0x16>
c010c342:	8b 45 08             	mov    0x8(%ebp),%eax
c010c345:	0f b6 00             	movzbl (%eax),%eax
c010c348:	3c 09                	cmp    $0x9,%al
c010c34a:	74 e8                	je     c010c334 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c34c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c34f:	0f b6 00             	movzbl (%eax),%eax
c010c352:	3c 2b                	cmp    $0x2b,%al
c010c354:	75 06                	jne    c010c35c <strtol+0x3e>
        s ++;
c010c356:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c35a:	eb 15                	jmp    c010c371 <strtol+0x53>
    }
    else if (*s == '-') {
c010c35c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c35f:	0f b6 00             	movzbl (%eax),%eax
c010c362:	3c 2d                	cmp    $0x2d,%al
c010c364:	75 0b                	jne    c010c371 <strtol+0x53>
        s ++, neg = 1;
c010c366:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c36a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c371:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c375:	74 06                	je     c010c37d <strtol+0x5f>
c010c377:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c37b:	75 24                	jne    c010c3a1 <strtol+0x83>
c010c37d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c380:	0f b6 00             	movzbl (%eax),%eax
c010c383:	3c 30                	cmp    $0x30,%al
c010c385:	75 1a                	jne    c010c3a1 <strtol+0x83>
c010c387:	8b 45 08             	mov    0x8(%ebp),%eax
c010c38a:	83 c0 01             	add    $0x1,%eax
c010c38d:	0f b6 00             	movzbl (%eax),%eax
c010c390:	3c 78                	cmp    $0x78,%al
c010c392:	75 0d                	jne    c010c3a1 <strtol+0x83>
        s += 2, base = 16;
c010c394:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c398:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c39f:	eb 2a                	jmp    c010c3cb <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c3a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c3a5:	75 17                	jne    c010c3be <strtol+0xa0>
c010c3a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3aa:	0f b6 00             	movzbl (%eax),%eax
c010c3ad:	3c 30                	cmp    $0x30,%al
c010c3af:	75 0d                	jne    c010c3be <strtol+0xa0>
        s ++, base = 8;
c010c3b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c3b5:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c3bc:	eb 0d                	jmp    c010c3cb <strtol+0xad>
    }
    else if (base == 0) {
c010c3be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c3c2:	75 07                	jne    c010c3cb <strtol+0xad>
        base = 10;
c010c3c4:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c3cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ce:	0f b6 00             	movzbl (%eax),%eax
c010c3d1:	3c 2f                	cmp    $0x2f,%al
c010c3d3:	7e 1b                	jle    c010c3f0 <strtol+0xd2>
c010c3d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d8:	0f b6 00             	movzbl (%eax),%eax
c010c3db:	3c 39                	cmp    $0x39,%al
c010c3dd:	7f 11                	jg     c010c3f0 <strtol+0xd2>
            dig = *s - '0';
c010c3df:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3e2:	0f b6 00             	movzbl (%eax),%eax
c010c3e5:	0f be c0             	movsbl %al,%eax
c010c3e8:	83 e8 30             	sub    $0x30,%eax
c010c3eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c3ee:	eb 48                	jmp    c010c438 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c3f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f3:	0f b6 00             	movzbl (%eax),%eax
c010c3f6:	3c 60                	cmp    $0x60,%al
c010c3f8:	7e 1b                	jle    c010c415 <strtol+0xf7>
c010c3fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fd:	0f b6 00             	movzbl (%eax),%eax
c010c400:	3c 7a                	cmp    $0x7a,%al
c010c402:	7f 11                	jg     c010c415 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c404:	8b 45 08             	mov    0x8(%ebp),%eax
c010c407:	0f b6 00             	movzbl (%eax),%eax
c010c40a:	0f be c0             	movsbl %al,%eax
c010c40d:	83 e8 57             	sub    $0x57,%eax
c010c410:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c413:	eb 23                	jmp    c010c438 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c415:	8b 45 08             	mov    0x8(%ebp),%eax
c010c418:	0f b6 00             	movzbl (%eax),%eax
c010c41b:	3c 40                	cmp    $0x40,%al
c010c41d:	7e 3d                	jle    c010c45c <strtol+0x13e>
c010c41f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c422:	0f b6 00             	movzbl (%eax),%eax
c010c425:	3c 5a                	cmp    $0x5a,%al
c010c427:	7f 33                	jg     c010c45c <strtol+0x13e>
            dig = *s - 'A' + 10;
c010c429:	8b 45 08             	mov    0x8(%ebp),%eax
c010c42c:	0f b6 00             	movzbl (%eax),%eax
c010c42f:	0f be c0             	movsbl %al,%eax
c010c432:	83 e8 37             	sub    $0x37,%eax
c010c435:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c438:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c43b:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c43e:	7c 02                	jl     c010c442 <strtol+0x124>
            break;
c010c440:	eb 1a                	jmp    c010c45c <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010c442:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c446:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c449:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c44d:	89 c2                	mov    %eax,%edx
c010c44f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c452:	01 d0                	add    %edx,%eax
c010c454:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c457:	e9 6f ff ff ff       	jmp    c010c3cb <strtol+0xad>

    if (endptr) {
c010c45c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c460:	74 08                	je     c010c46a <strtol+0x14c>
        *endptr = (char *) s;
c010c462:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c465:	8b 55 08             	mov    0x8(%ebp),%edx
c010c468:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c46a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c46e:	74 07                	je     c010c477 <strtol+0x159>
c010c470:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c473:	f7 d8                	neg    %eax
c010c475:	eb 03                	jmp    c010c47a <strtol+0x15c>
c010c477:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c47a:	c9                   	leave  
c010c47b:	c3                   	ret    

c010c47c <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c47c:	55                   	push   %ebp
c010c47d:	89 e5                	mov    %esp,%ebp
c010c47f:	57                   	push   %edi
c010c480:	83 ec 24             	sub    $0x24,%esp
c010c483:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c486:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c489:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c48d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c490:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c493:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c496:	8b 45 10             	mov    0x10(%ebp),%eax
c010c499:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c49c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c49f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c4a3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c4a6:	89 d7                	mov    %edx,%edi
c010c4a8:	f3 aa                	rep stos %al,%es:(%edi)
c010c4aa:	89 fa                	mov    %edi,%edx
c010c4ac:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c4af:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c4b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c4b5:	83 c4 24             	add    $0x24,%esp
c010c4b8:	5f                   	pop    %edi
c010c4b9:	5d                   	pop    %ebp
c010c4ba:	c3                   	ret    

c010c4bb <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c4bb:	55                   	push   %ebp
c010c4bc:	89 e5                	mov    %esp,%ebp
c010c4be:	57                   	push   %edi
c010c4bf:	56                   	push   %esi
c010c4c0:	53                   	push   %ebx
c010c4c1:	83 ec 30             	sub    $0x30,%esp
c010c4c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c4ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c4d0:	8b 45 10             	mov    0x10(%ebp),%eax
c010c4d3:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c4d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c4dc:	73 42                	jae    c010c520 <memmove+0x65>
c010c4de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c4e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c4ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c4f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c4f3:	c1 e8 02             	shr    $0x2,%eax
c010c4f6:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c4f8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c4fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c4fe:	89 d7                	mov    %edx,%edi
c010c500:	89 c6                	mov    %eax,%esi
c010c502:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c504:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c507:	83 e1 03             	and    $0x3,%ecx
c010c50a:	74 02                	je     c010c50e <memmove+0x53>
c010c50c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c50e:	89 f0                	mov    %esi,%eax
c010c510:	89 fa                	mov    %edi,%edx
c010c512:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c515:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c518:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c51b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c51e:	eb 36                	jmp    c010c556 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c520:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c523:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c526:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c529:	01 c2                	add    %eax,%edx
c010c52b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c52e:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c534:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c537:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c53a:	89 c1                	mov    %eax,%ecx
c010c53c:	89 d8                	mov    %ebx,%eax
c010c53e:	89 d6                	mov    %edx,%esi
c010c540:	89 c7                	mov    %eax,%edi
c010c542:	fd                   	std    
c010c543:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c545:	fc                   	cld    
c010c546:	89 f8                	mov    %edi,%eax
c010c548:	89 f2                	mov    %esi,%edx
c010c54a:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c54d:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c550:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c553:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c556:	83 c4 30             	add    $0x30,%esp
c010c559:	5b                   	pop    %ebx
c010c55a:	5e                   	pop    %esi
c010c55b:	5f                   	pop    %edi
c010c55c:	5d                   	pop    %ebp
c010c55d:	c3                   	ret    

c010c55e <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c55e:	55                   	push   %ebp
c010c55f:	89 e5                	mov    %esp,%ebp
c010c561:	57                   	push   %edi
c010c562:	56                   	push   %esi
c010c563:	83 ec 20             	sub    $0x20,%esp
c010c566:	8b 45 08             	mov    0x8(%ebp),%eax
c010c569:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c56c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c56f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c572:	8b 45 10             	mov    0x10(%ebp),%eax
c010c575:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c578:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c57b:	c1 e8 02             	shr    $0x2,%eax
c010c57e:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c580:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c583:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c586:	89 d7                	mov    %edx,%edi
c010c588:	89 c6                	mov    %eax,%esi
c010c58a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c58c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c58f:	83 e1 03             	and    $0x3,%ecx
c010c592:	74 02                	je     c010c596 <memcpy+0x38>
c010c594:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c596:	89 f0                	mov    %esi,%eax
c010c598:	89 fa                	mov    %edi,%edx
c010c59a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c59d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c5a0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c5a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c5a6:	83 c4 20             	add    $0x20,%esp
c010c5a9:	5e                   	pop    %esi
c010c5aa:	5f                   	pop    %edi
c010c5ab:	5d                   	pop    %ebp
c010c5ac:	c3                   	ret    

c010c5ad <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c5ad:	55                   	push   %ebp
c010c5ae:	89 e5                	mov    %esp,%ebp
c010c5b0:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c5b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c5b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c5bf:	eb 30                	jmp    c010c5f1 <memcmp+0x44>
        if (*s1 != *s2) {
c010c5c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5c4:	0f b6 10             	movzbl (%eax),%edx
c010c5c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c5ca:	0f b6 00             	movzbl (%eax),%eax
c010c5cd:	38 c2                	cmp    %al,%dl
c010c5cf:	74 18                	je     c010c5e9 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c5d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5d4:	0f b6 00             	movzbl (%eax),%eax
c010c5d7:	0f b6 d0             	movzbl %al,%edx
c010c5da:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c5dd:	0f b6 00             	movzbl (%eax),%eax
c010c5e0:	0f b6 c0             	movzbl %al,%eax
c010c5e3:	29 c2                	sub    %eax,%edx
c010c5e5:	89 d0                	mov    %edx,%eax
c010c5e7:	eb 1a                	jmp    c010c603 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010c5e9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c5ed:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c5f1:	8b 45 10             	mov    0x10(%ebp),%eax
c010c5f4:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c5f7:	89 55 10             	mov    %edx,0x10(%ebp)
c010c5fa:	85 c0                	test   %eax,%eax
c010c5fc:	75 c3                	jne    c010c5c1 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c5fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c603:	c9                   	leave  
c010c604:	c3                   	ret    
